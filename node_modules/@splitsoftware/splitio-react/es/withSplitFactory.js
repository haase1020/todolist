import React from 'react';
import SplitFactory from './SplitFactory';
/**
 * High-Order Component for SplitFactory.
 * The wrapped component receives all the props of the container,
 * along with the passed props from SplitFactory (see ISplitFactoryChildProps).
 *
 * @param config Config object used to instantiate a Split factory
 * @param factory Split factory instance to use instead of creating a new one with the config object.
 */
export function withSplitFactory(config, factory) {
    return function withSplitFactoryHoc(WrappedComponent, updateOnSdkUpdate = false, updateOnSdkTimedout = false, updateOnSdkReady = true, updateOnSdkReadyFromCache = true) {
        return (props) => {
            return (React.createElement(SplitFactory, { config: config, factory: factory, updateOnSdkUpdate: updateOnSdkUpdate, updateOnSdkTimedout: updateOnSdkTimedout, updateOnSdkReady: updateOnSdkReady, updateOnSdkReadyFromCache: updateOnSdkReadyFromCache }, (splitProps) => {
                return (React.createElement(WrappedComponent, Object.assign({}, props, splitProps)));
            }));
        };
    };
}
export default withSplitFactory;
