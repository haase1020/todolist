{"ast":null,"code":"import thenable from '../../utils/promise/thenable';\n/**\n * Kill `splitName` at `this` split storage, setting `defaultTreatment` and `changeNumber`,\n * only if the split exists and its `changeNumber` is older than the given one.\n * Used for SPLIT_KILL push notifications.\n *\n * @param {string} splitName\n * @param {string} defaultTreatment\n * @param {number} changeNumber\n * @returns {Promise} a promise that is resolved once the split kill is performed.\n * The fulfillment value is a boolean: `true` if the kill success updating the split or `false` if no split is updated, for instance,\n * if the `changeNumber` is old, if the `splitName` is not found, or if the storage fails to apply the update.\n */\n\nexport default function killLocally(splitName, defaultTreatment, changeNumber) {\n  var _this = this;\n\n  var split = this.getSplit(splitName);\n  var splitPromise = thenable(split) ? split : Promise.resolve(split);\n  return splitPromise.then(function (split) {\n    if (split) {\n      var parsedSplit = JSON.parse(split);\n\n      if (!parsedSplit.changeNumber || parsedSplit.changeNumber < changeNumber) {\n        parsedSplit.killed = true;\n        parsedSplit.defaultTreatment = defaultTreatment;\n        parsedSplit.changeNumber = changeNumber;\n        var newSplit = JSON.stringify(parsedSplit);\n        return _this.addSplit(splitName, newSplit);\n      }\n    }\n\n    return false;\n  });\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/storage/SplitCache/killLocally.js"],"names":["thenable","killLocally","splitName","defaultTreatment","changeNumber","_this","split","getSplit","splitPromise","Promise","resolve","then","parsedSplit","JSON","parse","killed","newSplit","stringify","addSplit"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,8BAArB;AACA;;;;;;;;;;;;;AAaA,eAAe,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,gBAAhC,EAAkDC,YAAlD,EAAgE;AAC7E,MAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAIC,KAAK,GAAG,KAAKC,QAAL,CAAcL,SAAd,CAAZ;AACA,MAAIM,YAAY,GAAGR,QAAQ,CAACM,KAAD,CAAR,GAAkBA,KAAlB,GAA0BG,OAAO,CAACC,OAAR,CAAgBJ,KAAhB,CAA7C;AACA,SAAOE,YAAY,CAACG,IAAb,CAAkB,UAAUL,KAAV,EAAiB;AACxC,QAAIA,KAAJ,EAAW;AACT,UAAIM,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWR,KAAX,CAAlB;;AAEA,UAAI,CAACM,WAAW,CAACR,YAAb,IAA6BQ,WAAW,CAACR,YAAZ,GAA2BA,YAA5D,EAA0E;AACxEQ,QAAAA,WAAW,CAACG,MAAZ,GAAqB,IAArB;AACAH,QAAAA,WAAW,CAACT,gBAAZ,GAA+BA,gBAA/B;AACAS,QAAAA,WAAW,CAACR,YAAZ,GAA2BA,YAA3B;AACA,YAAIY,QAAQ,GAAGH,IAAI,CAACI,SAAL,CAAeL,WAAf,CAAf;AACA,eAAOP,KAAK,CAACa,QAAN,CAAehB,SAAf,EAA0Bc,QAA1B,CAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD,GAdM,CAAP;AAeD","sourcesContent":["import thenable from '../../utils/promise/thenable';\n/**\n * Kill `splitName` at `this` split storage, setting `defaultTreatment` and `changeNumber`,\n * only if the split exists and its `changeNumber` is older than the given one.\n * Used for SPLIT_KILL push notifications.\n *\n * @param {string} splitName\n * @param {string} defaultTreatment\n * @param {number} changeNumber\n * @returns {Promise} a promise that is resolved once the split kill is performed.\n * The fulfillment value is a boolean: `true` if the kill success updating the split or `false` if no split is updated, for instance,\n * if the `changeNumber` is old, if the `splitName` is not found, or if the storage fails to apply the update.\n */\n\nexport default function killLocally(splitName, defaultTreatment, changeNumber) {\n  var _this = this;\n\n  var split = this.getSplit(splitName);\n  var splitPromise = thenable(split) ? split : Promise.resolve(split);\n  return splitPromise.then(function (split) {\n    if (split) {\n      var parsedSplit = JSON.parse(split);\n\n      if (!parsedSplit.changeNumber || parsedSplit.changeNumber < changeNumber) {\n        parsedSplit.killed = true;\n        parsedSplit.defaultTreatment = defaultTreatment;\n        parsedSplit.changeNumber = changeNumber;\n        var newSplit = JSON.stringify(parsedSplit);\n        return _this.addSplit(splitName, newSplit);\n      }\n    }\n\n    return false;\n  });\n}"]},"metadata":{},"sourceType":"module"}