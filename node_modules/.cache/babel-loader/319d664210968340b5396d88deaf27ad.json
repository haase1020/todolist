{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../utils/logger';\nimport tracker from '../utils/timeTracker';\nimport repeat from '../utils/fn/repeat';\nimport metricsService from '../services/metrics';\nimport metricsTimesServiceRequest from '../services/metrics/times';\nimport metricsCountersServiceRequest from '../services/metrics/counters';\nimport { fromLatenciesCollector, fromCountersCollector } from '../services/metrics/dto';\nimport impressionsService from '../services/impressions';\nimport impressionsBulkRequest from '../services/impressions/bulk';\nimport impressionsCountRequest from '../services/impressions/count';\nimport { fromImpressionsCollector, fromImpressionsCountCollector } from '../services/impressions/dto';\nimport { SegmentChangesCollector, SplitChangesCollector, MySegmentsCollector, ClientCollector } from './Collectors';\nimport { OPTIMIZED } from '../utils/constants';\nvar log = logFactory('splitio-metrics');\nvar IMPRESSIONS_COUNT_RATE = 1800000; // 30 minutes\n\nvar MetricsFactory = function MetricsFactory(context) {\n  var impressionsRetries = 0;\n  var settings = context.get(context.constants.SETTINGS);\n  var storage = context.get(context.constants.STORAGE);\n  var impressionsCounter = context.get(context.constants.IMPRESSIONS_COUNTER);\n  var shouldPushImpressionsCount = settings.sync.impressionsMode === OPTIMIZED;\n\n  var pushMetrics = function pushMetrics() {\n    if (storage.metrics.isEmpty() && storage.count.isEmpty()) return Promise.resolve();\n    log.info('Pushing metrics');\n    var latencyTrackerStop = tracker.start(tracker.TaskNames.METRICS_PUSH); // POST latencies\n\n    var latenciesPromise = storage.metrics.isEmpty() ? null : metricsService(metricsTimesServiceRequest(settings, {\n      body: JSON.stringify(fromLatenciesCollector(storage.metrics))\n    })).then(function () {\n      return storage.metrics.clear();\n    }).catch(function () {\n      return storage.metrics.clear();\n    }); // POST counters\n\n    var countersPromise = storage.count.isEmpty() ? null : metricsService(metricsCountersServiceRequest(settings, {\n      body: JSON.stringify(fromCountersCollector(storage.count))\n    })).then(function () {\n      return storage.count.clear();\n    }).catch(function () {\n      return storage.count.clear();\n    });\n    return Promise.all([latenciesPromise, countersPromise]).then(function (resp) {\n      // After both finishes, track the end and return the results\n      latencyTrackerStop();\n      return resp;\n    });\n  };\n\n  var pushImpressions = function pushImpressions() {\n    if (storage.impressions.isEmpty()) return Promise.resolve();\n    var imprCount = storage.impressions.queue.length;\n    log.info(\"Pushing \".concat(imprCount, \" impressions\"));\n    var latencyTrackerStop = tracker.start(tracker.TaskNames.IMPRESSIONS_PUSH);\n    return impressionsService(impressionsBulkRequest(settings, {\n      body: JSON.stringify(fromImpressionsCollector(storage.impressions, settings))\n    })).then(function () {\n      impressionsRetries = 0;\n      storage.impressions.clear();\n    }).catch(function (err) {\n      if (impressionsRetries) {\n        // For now we retry only once.\n        log.warn(\"Droping \".concat(imprCount, \" impressions after retry. Reason \").concat(err, \".\"));\n        impressionsRetries = 0;\n        storage.impressions.clear();\n      } else {\n        impressionsRetries++;\n        log.warn(\"Failed to push \".concat(imprCount, \" impressions, keeping data to retry on next iteration. Reason \").concat(err, \".\"));\n      }\n    }).then(function () {\n      return latencyTrackerStop();\n    });\n  };\n\n  var pushImpressionsCount = function pushImpressionsCount() {\n    var pf = fromImpressionsCountCollector(impressionsCounter);\n    var imprCounts = pf.length;\n    if (imprCounts === 0) return Promise.resolve();\n    log.info(\"Pushing count of impressions for \".concat(imprCounts, \" features\"));\n    return impressionsService(impressionsCountRequest(settings, {\n      body: JSON.stringify({\n        pf: pf\n      })\n    })).then(function () {\n      impressionsRetries = 0;\n    }).catch(function (err) {\n      if (impressionsRetries) {\n        // For now we retry only once.\n        log.warn(\"Droping count of impressions for \".concat(imprCounts, \" features after retry. Reason \").concat(err, \".\"));\n        impressionsRetries = 0;\n      } else {\n        impressionsRetries++;\n        log.warn(\"Failed to push impressions count for \".concat(imprCounts, \" features, keeping data to retry on next iteration. Reason \").concat(err, \".\"));\n      }\n    });\n  };\n\n  var stopImpressionsPublisher = false;\n  var stopPerformancePublisher = false;\n  var stopImpressionsCountPublisher = false;\n  return {\n    start: function start() {\n      stopImpressionsPublisher = repeat(function (schedulePublisher) {\n        return pushImpressions().then(function () {\n          return schedulePublisher();\n        });\n      }, settings.scheduler.impressionsRefreshRate);\n      stopPerformancePublisher = repeat(function (schedulePublisher) {\n        return pushMetrics().then(function () {\n          return schedulePublisher();\n        });\n      }, settings.scheduler.metricsRefreshRate);\n\n      if (shouldPushImpressionsCount) {\n        stopImpressionsCountPublisher = repeat(function (schedulePublisher) {\n          return pushImpressionsCount().then(function () {\n            return schedulePublisher();\n          });\n        }, IMPRESSIONS_COUNT_RATE);\n      }\n    },\n    flush: function flush() {\n      if (shouldPushImpressionsCount) pushImpressionsCount();\n      return pushImpressions();\n    },\n    stop: function stop() {\n      stopImpressionsPublisher && stopImpressionsPublisher();\n      stopPerformancePublisher && stopPerformancePublisher();\n      stopImpressionsCountPublisher && stopImpressionsCountPublisher();\n    },\n    // Metrics collectors\n    collectors: {\n      segmentChanges: new SegmentChangesCollector(storage),\n      splitChanges: new SplitChangesCollector(storage),\n      mySegments: new MySegmentsCollector(storage),\n      client: new ClientCollector(storage)\n    }\n  };\n};\n\nexport default MetricsFactory;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/metrics/index.js"],"names":["logFactory","tracker","repeat","metricsService","metricsTimesServiceRequest","metricsCountersServiceRequest","fromLatenciesCollector","fromCountersCollector","impressionsService","impressionsBulkRequest","impressionsCountRequest","fromImpressionsCollector","fromImpressionsCountCollector","SegmentChangesCollector","SplitChangesCollector","MySegmentsCollector","ClientCollector","OPTIMIZED","log","IMPRESSIONS_COUNT_RATE","MetricsFactory","context","impressionsRetries","settings","get","constants","SETTINGS","storage","STORAGE","impressionsCounter","IMPRESSIONS_COUNTER","shouldPushImpressionsCount","sync","impressionsMode","pushMetrics","metrics","isEmpty","count","Promise","resolve","info","latencyTrackerStop","start","TaskNames","METRICS_PUSH","latenciesPromise","body","JSON","stringify","then","clear","catch","countersPromise","all","resp","pushImpressions","impressions","imprCount","queue","length","concat","IMPRESSIONS_PUSH","err","warn","pushImpressionsCount","pf","imprCounts","stopImpressionsPublisher","stopPerformancePublisher","stopImpressionsCountPublisher","schedulePublisher","scheduler","impressionsRefreshRate","metricsRefreshRate","flush","stop","collectors","segmentChanges","splitChanges","mySegments","client"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../utils/logger';\nimport tracker from '../utils/timeTracker';\nimport repeat from '../utils/fn/repeat';\nimport metricsService from '../services/metrics';\nimport metricsTimesServiceRequest from '../services/metrics/times';\nimport metricsCountersServiceRequest from '../services/metrics/counters';\nimport { fromLatenciesCollector, fromCountersCollector } from '../services/metrics/dto';\nimport impressionsService from '../services/impressions';\nimport impressionsBulkRequest from '../services/impressions/bulk';\nimport impressionsCountRequest from '../services/impressions/count';\nimport { fromImpressionsCollector, fromImpressionsCountCollector } from '../services/impressions/dto';\nimport { SegmentChangesCollector, SplitChangesCollector, MySegmentsCollector, ClientCollector } from './Collectors';\nimport { OPTIMIZED } from '../utils/constants';\nvar log = logFactory('splitio-metrics');\nvar IMPRESSIONS_COUNT_RATE = 1800000; // 30 minutes\n\nvar MetricsFactory = function MetricsFactory(context) {\n  var impressionsRetries = 0;\n  var settings = context.get(context.constants.SETTINGS);\n  var storage = context.get(context.constants.STORAGE);\n  var impressionsCounter = context.get(context.constants.IMPRESSIONS_COUNTER);\n  var shouldPushImpressionsCount = settings.sync.impressionsMode === OPTIMIZED;\n\n  var pushMetrics = function pushMetrics() {\n    if (storage.metrics.isEmpty() && storage.count.isEmpty()) return Promise.resolve();\n    log.info('Pushing metrics');\n    var latencyTrackerStop = tracker.start(tracker.TaskNames.METRICS_PUSH); // POST latencies\n\n    var latenciesPromise = storage.metrics.isEmpty() ? null : metricsService(metricsTimesServiceRequest(settings, {\n      body: JSON.stringify(fromLatenciesCollector(storage.metrics))\n    })).then(function () {\n      return storage.metrics.clear();\n    }).catch(function () {\n      return storage.metrics.clear();\n    }); // POST counters\n\n    var countersPromise = storage.count.isEmpty() ? null : metricsService(metricsCountersServiceRequest(settings, {\n      body: JSON.stringify(fromCountersCollector(storage.count))\n    })).then(function () {\n      return storage.count.clear();\n    }).catch(function () {\n      return storage.count.clear();\n    });\n    return Promise.all([latenciesPromise, countersPromise]).then(function (resp) {\n      // After both finishes, track the end and return the results\n      latencyTrackerStop();\n      return resp;\n    });\n  };\n\n  var pushImpressions = function pushImpressions() {\n    if (storage.impressions.isEmpty()) return Promise.resolve();\n    var imprCount = storage.impressions.queue.length;\n    log.info(\"Pushing \".concat(imprCount, \" impressions\"));\n    var latencyTrackerStop = tracker.start(tracker.TaskNames.IMPRESSIONS_PUSH);\n    return impressionsService(impressionsBulkRequest(settings, {\n      body: JSON.stringify(fromImpressionsCollector(storage.impressions, settings))\n    })).then(function () {\n      impressionsRetries = 0;\n      storage.impressions.clear();\n    }).catch(function (err) {\n      if (impressionsRetries) {\n        // For now we retry only once.\n        log.warn(\"Droping \".concat(imprCount, \" impressions after retry. Reason \").concat(err, \".\"));\n        impressionsRetries = 0;\n        storage.impressions.clear();\n      } else {\n        impressionsRetries++;\n        log.warn(\"Failed to push \".concat(imprCount, \" impressions, keeping data to retry on next iteration. Reason \").concat(err, \".\"));\n      }\n    }).then(function () {\n      return latencyTrackerStop();\n    });\n  };\n\n  var pushImpressionsCount = function pushImpressionsCount() {\n    var pf = fromImpressionsCountCollector(impressionsCounter);\n    var imprCounts = pf.length;\n    if (imprCounts === 0) return Promise.resolve();\n    log.info(\"Pushing count of impressions for \".concat(imprCounts, \" features\"));\n    return impressionsService(impressionsCountRequest(settings, {\n      body: JSON.stringify({\n        pf: pf\n      })\n    })).then(function () {\n      impressionsRetries = 0;\n    }).catch(function (err) {\n      if (impressionsRetries) {\n        // For now we retry only once.\n        log.warn(\"Droping count of impressions for \".concat(imprCounts, \" features after retry. Reason \").concat(err, \".\"));\n        impressionsRetries = 0;\n      } else {\n        impressionsRetries++;\n        log.warn(\"Failed to push impressions count for \".concat(imprCounts, \" features, keeping data to retry on next iteration. Reason \").concat(err, \".\"));\n      }\n    });\n  };\n\n  var stopImpressionsPublisher = false;\n  var stopPerformancePublisher = false;\n  var stopImpressionsCountPublisher = false;\n  return {\n    start: function start() {\n      stopImpressionsPublisher = repeat(function (schedulePublisher) {\n        return pushImpressions().then(function () {\n          return schedulePublisher();\n        });\n      }, settings.scheduler.impressionsRefreshRate);\n      stopPerformancePublisher = repeat(function (schedulePublisher) {\n        return pushMetrics().then(function () {\n          return schedulePublisher();\n        });\n      }, settings.scheduler.metricsRefreshRate);\n\n      if (shouldPushImpressionsCount) {\n        stopImpressionsCountPublisher = repeat(function (schedulePublisher) {\n          return pushImpressionsCount().then(function () {\n            return schedulePublisher();\n          });\n        }, IMPRESSIONS_COUNT_RATE);\n      }\n    },\n    flush: function flush() {\n      if (shouldPushImpressionsCount) pushImpressionsCount();\n      return pushImpressions();\n    },\n    stop: function stop() {\n      stopImpressionsPublisher && stopImpressionsPublisher();\n      stopPerformancePublisher && stopPerformancePublisher();\n      stopImpressionsCountPublisher && stopImpressionsCountPublisher();\n    },\n    // Metrics collectors\n    collectors: {\n      segmentChanges: new SegmentChangesCollector(storage),\n      splitChanges: new SplitChangesCollector(storage),\n      mySegments: new MySegmentsCollector(storage),\n      client: new ClientCollector(storage)\n    }\n  };\n};\n\nexport default MetricsFactory;"]},"metadata":{},"sourceType":"module"}