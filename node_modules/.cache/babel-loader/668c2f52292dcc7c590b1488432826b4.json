{"ast":null,"code":"import { isObject, shallowClone, isString, numberIsFinite, isBoolean } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('');\nvar ECMA_SIZES = {\n  NULL: 0,\n  // While on the JSON it's going to occupy more space, we'll take it as 0 for the approximation.\n  STRING: 2,\n  BOOLEAN: 4,\n  NUMBER: 8\n};\nvar MAX_PROPERTIES_AMOUNT = 300;\nvar MAX_PROPERTIES_SIZE = 1024 * 32;\nvar BASE_EVENT_SIZE = 1024; // We assume 1kb events without properties (avg measured)\n\nexport function validateEventProperties(maybeProperties, method) {\n  if (maybeProperties == undefined) return {\n    properties: null,\n    size: BASE_EVENT_SIZE\n  }; // eslint-disable-line eqeqeq\n\n  if (!isObject(maybeProperties)) {\n    log.error(\"\".concat(method, \": properties must be a plain object.\"));\n    return {\n      properties: false,\n      size: BASE_EVENT_SIZE\n    };\n  }\n\n  var keys = Object.keys(maybeProperties);\n  var clone = shallowClone(maybeProperties); // To avoid calculating the size twice we'll return it from here.\n\n  var output = {\n    properties: clone,\n    size: BASE_EVENT_SIZE // We assume 1kb events without properties (avg measured)\n\n  };\n\n  if (keys.length > MAX_PROPERTIES_AMOUNT) {\n    log.warn(\"\".concat(method, \": Event has more than 300 properties. Some of them will be trimmed when processed.\"));\n  }\n\n  for (var i = 0; i < keys.length; i++) {\n    output.size += keys[i].length * ECMA_SIZES.STRING; // Count the size of the key which is always a string.\n\n    var val = clone[keys[i]];\n    var isStringVal = isString(val);\n    var isFiniteVal = numberIsFinite(val);\n    var isBoolVal = isBoolean(val);\n    var isNullVal = val === null;\n\n    if (!(isStringVal || isFiniteVal || isBoolVal || isNullVal)) {\n      // If it's not of valid type.\n      clone[keys[i]] = null;\n      val = null;\n      isNullVal = true;\n      log.warn(\"\".concat(method, \": Property \").concat(keys[i], \" is of invalid type. Setting value to null.\"));\n    }\n\n    if (isNullVal) output.size += ECMA_SIZES.NULL;else if (isFiniteVal) output.size += ECMA_SIZES.NUMBER;else if (isBoolVal) output.size += ECMA_SIZES.BOOLEAN;else if (isStringVal) output.size += val.length * ECMA_SIZES.STRING;\n\n    if (output.size > MAX_PROPERTIES_SIZE) {\n      log.error(\"\".concat(method, \": The maximum size allowed for the properties is 32768 bytes, which was exceeded. Event not queued.\"));\n      output.properties = false;\n      break;\n    }\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/inputValidation/eventProperties.js"],"names":["isObject","shallowClone","isString","numberIsFinite","isBoolean","logFactory","log","ECMA_SIZES","NULL","STRING","BOOLEAN","NUMBER","MAX_PROPERTIES_AMOUNT","MAX_PROPERTIES_SIZE","BASE_EVENT_SIZE","validateEventProperties","maybeProperties","method","undefined","properties","size","error","concat","keys","Object","clone","output","length","warn","i","val","isStringVal","isFiniteVal","isBoolVal","isNullVal"],"mappings":"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","sourcesContent":["import { isObject, shallowClone, isString, numberIsFinite, isBoolean } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('');\nvar ECMA_SIZES = {\n  NULL: 0,\n  // While on the JSON it's going to occupy more space, we'll take it as 0 for the approximation.\n  STRING: 2,\n  BOOLEAN: 4,\n  NUMBER: 8\n};\nvar MAX_PROPERTIES_AMOUNT = 300;\nvar MAX_PROPERTIES_SIZE = 1024 * 32;\nvar BASE_EVENT_SIZE = 1024; // We assume 1kb events without properties (avg measured)\n\nexport function validateEventProperties(maybeProperties, method) {\n  if (maybeProperties == undefined) return {\n    properties: null,\n    size: BASE_EVENT_SIZE\n  }; // eslint-disable-line eqeqeq\n\n  if (!isObject(maybeProperties)) {\n    log.error(\"\".concat(method, \": properties must be a plain object.\"));\n    return {\n      properties: false,\n      size: BASE_EVENT_SIZE\n    };\n  }\n\n  var keys = Object.keys(maybeProperties);\n  var clone = shallowClone(maybeProperties); // To avoid calculating the size twice we'll return it from here.\n\n  var output = {\n    properties: clone,\n    size: BASE_EVENT_SIZE // We assume 1kb events without properties (avg measured)\n\n  };\n\n  if (keys.length > MAX_PROPERTIES_AMOUNT) {\n    log.warn(\"\".concat(method, \": Event has more than 300 properties. Some of them will be trimmed when processed.\"));\n  }\n\n  for (var i = 0; i < keys.length; i++) {\n    output.size += keys[i].length * ECMA_SIZES.STRING; // Count the size of the key which is always a string.\n\n    var val = clone[keys[i]];\n    var isStringVal = isString(val);\n    var isFiniteVal = numberIsFinite(val);\n    var isBoolVal = isBoolean(val);\n    var isNullVal = val === null;\n\n    if (!(isStringVal || isFiniteVal || isBoolVal || isNullVal)) {\n      // If it's not of valid type.\n      clone[keys[i]] = null;\n      val = null;\n      isNullVal = true;\n      log.warn(\"\".concat(method, \": Property \").concat(keys[i], \" is of invalid type. Setting value to null.\"));\n    }\n\n    if (isNullVal) output.size += ECMA_SIZES.NULL;else if (isFiniteVal) output.size += ECMA_SIZES.NUMBER;else if (isBoolVal) output.size += ECMA_SIZES.BOOLEAN;else if (isStringVal) output.size += val.length * ECMA_SIZES.STRING;\n\n    if (output.size > MAX_PROPERTIES_SIZE) {\n      log.error(\"\".concat(method, \": The maximum size allowed for the properties is 32768 bytes, which was exceeded. Event not queued.\"));\n      output.properties = false;\n      break;\n    }\n  }\n\n  return output;\n}"]},"metadata":{},"sourceType":"module"}