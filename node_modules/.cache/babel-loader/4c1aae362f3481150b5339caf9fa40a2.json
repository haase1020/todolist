{"ast":null,"code":"import { isString } from '../../../utils/lang';\nexport default function parseCondition(data) {\n  var treatment = data.treatment;\n\n  if (data.keys) {\n    return {\n      conditionType: 'WHITELIST',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'WHITELIST',\n          negate: false,\n          whitelistMatcherData: {\n            whitelist: isString(data.keys) ? [data.keys] : data.keys\n          }\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: \"whitelisted \".concat(treatment)\n    };\n  } else {\n    return {\n      conditionType: 'ROLLOUT',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'ALL_KEYS',\n          negate: false\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: 'default rule'\n    };\n  }\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/services/splitChanges/offline/parseCondition.js"],"names":["isString","parseCondition","data","treatment","keys","conditionType","matcherGroup","combiner","matchers","keySelector","matcherType","negate","whitelistMatcherData","whitelist","partitions","size","label","concat"],"mappings":"AAAA,SAASA,QAAT,QAAyB,qBAAzB;AACA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC3C,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;;AAEA,MAAID,IAAI,CAACE,IAAT,EAAe;AACb,WAAO;AACLC,MAAAA,aAAa,EAAE,WADV;AAELC,MAAAA,YAAY,EAAE;AACZC,QAAAA,QAAQ,EAAE,KADE;AAEZC,QAAAA,QAAQ,EAAE,CAAC;AACTC,UAAAA,WAAW,EAAE,IADJ;AAETC,UAAAA,WAAW,EAAE,WAFJ;AAGTC,UAAAA,MAAM,EAAE,KAHC;AAITC,UAAAA,oBAAoB,EAAE;AACpBC,YAAAA,SAAS,EAAEb,QAAQ,CAACE,IAAI,CAACE,IAAN,CAAR,GAAsB,CAACF,IAAI,CAACE,IAAN,CAAtB,GAAoCF,IAAI,CAACE;AADhC;AAJb,SAAD;AAFE,OAFT;AAaLU,MAAAA,UAAU,EAAE,CAAC;AACXX,QAAAA,SAAS,EAAEA,SADA;AAEXY,QAAAA,IAAI,EAAE;AAFK,OAAD,CAbP;AAiBLC,MAAAA,KAAK,EAAE,eAAeC,MAAf,CAAsBd,SAAtB;AAjBF,KAAP;AAmBD,GApBD,MAoBO;AACL,WAAO;AACLE,MAAAA,aAAa,EAAE,SADV;AAELC,MAAAA,YAAY,EAAE;AACZC,QAAAA,QAAQ,EAAE,KADE;AAEZC,QAAAA,QAAQ,EAAE,CAAC;AACTC,UAAAA,WAAW,EAAE,IADJ;AAETC,UAAAA,WAAW,EAAE,UAFJ;AAGTC,UAAAA,MAAM,EAAE;AAHC,SAAD;AAFE,OAFT;AAULG,MAAAA,UAAU,EAAE,CAAC;AACXX,QAAAA,SAAS,EAAEA,SADA;AAEXY,QAAAA,IAAI,EAAE;AAFK,OAAD,CAVP;AAcLC,MAAAA,KAAK,EAAE;AAdF,KAAP;AAgBD;AACF","sourcesContent":["import { isString } from '../../../utils/lang';\nexport default function parseCondition(data) {\n  var treatment = data.treatment;\n\n  if (data.keys) {\n    return {\n      conditionType: 'WHITELIST',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'WHITELIST',\n          negate: false,\n          whitelistMatcherData: {\n            whitelist: isString(data.keys) ? [data.keys] : data.keys\n          }\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: \"whitelisted \".concat(treatment)\n    };\n  } else {\n    return {\n      conditionType: 'ROLLOUT',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'ALL_KEYS',\n          negate: false\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: 'default rule'\n    };\n  }\n}"]},"metadata":{},"sourceType":"module"}