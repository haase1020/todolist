{"ast":null,"code":"import { isObject, isString, numberIsFinite, toString } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('');\nvar KEY_MAX_LENGTH = 250;\n\nfunction validateKeyValue(maybeKey, method, type) {\n  if (maybeKey == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined \").concat(type, \", \").concat(type, \" must be a non-empty string.\"));\n    return false;\n  }\n\n  if (numberIsFinite(maybeKey)) {\n    log.warn(\"\".concat(method, \": \").concat(type, \" \\\"\").concat(maybeKey, \"\\\" is not of type string, converting.\"));\n    return toString(maybeKey);\n  }\n\n  if (isString(maybeKey)) {\n    // It's a string, start by trimming the value.\n    maybeKey = maybeKey.trim(); // It's aaaaaall good.\n\n    if (maybeKey.length > 0 && maybeKey.length <= KEY_MAX_LENGTH) return maybeKey;\n\n    if (maybeKey.length === 0) {\n      log.error(\"\".concat(method, \": you passed an empty string, \").concat(type, \" must be a non-empty string.\"));\n    } else if (maybeKey.length > KEY_MAX_LENGTH) {\n      log.error(\"\".concat(method, \": \").concat(type, \" too long, \").concat(type, \" must be 250 characters or less.\"));\n    }\n  } else {\n    log.error(\"\".concat(method, \": you passed an invalid \").concat(type, \" type, \").concat(type, \" must be a non-empty string.\"));\n  }\n\n  return false;\n}\n\nexport function validateKey(maybeKey, method) {\n  if (isObject(maybeKey)) {\n    // Validate key object\n    var matchingKey = validateKeyValue(maybeKey.matchingKey, method, 'matchingKey');\n    var bucketingKey = validateKeyValue(maybeKey.bucketingKey, method, 'bucketingKey');\n    if (matchingKey && bucketingKey) return {\n      matchingKey: matchingKey,\n      bucketingKey: bucketingKey\n    };\n    log.error(\"\".concat(method, \": Key must be an object with bucketingKey and matchingKey with valid string properties.\"));\n    return false;\n  } else {\n    return validateKeyValue(maybeKey, method, 'key');\n  }\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/inputValidation/key.js"],"names":["isObject","isString","numberIsFinite","toString","logFactory","log","KEY_MAX_LENGTH","validateKeyValue","maybeKey","method","type","undefined","error","concat","warn","trim","length","validateKey","matchingKey","bucketingKey"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,cAA7B,EAA6CC,QAA7C,QAA6D,SAA7D;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,EAAD,CAApB;AACA,IAAIE,cAAc,GAAG,GAArB;;AAEA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,MAApC,EAA4CC,IAA5C,EAAkD;AAChD,MAAIF,QAAQ,IAAIG,SAAhB,EAA2B;AACzB;AACAN,IAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUJ,MAAV,EAAkB,mCAAlB,EAAuDI,MAAvD,CAA8DH,IAA9D,EAAoE,IAApE,EAA0EG,MAA1E,CAAiFH,IAAjF,EAAuF,8BAAvF,CAAV;AACA,WAAO,KAAP;AACD;;AAED,MAAIR,cAAc,CAACM,QAAD,CAAlB,EAA8B;AAC5BH,IAAAA,GAAG,CAACS,IAAJ,CAAS,GAAGD,MAAH,CAAUJ,MAAV,EAAkB,IAAlB,EAAwBI,MAAxB,CAA+BH,IAA/B,EAAqC,KAArC,EAA4CG,MAA5C,CAAmDL,QAAnD,EAA6D,uCAA7D,CAAT;AACA,WAAOL,QAAQ,CAACK,QAAD,CAAf;AACD;;AAED,MAAIP,QAAQ,CAACO,QAAD,CAAZ,EAAwB;AACtB;AACAA,IAAAA,QAAQ,GAAGA,QAAQ,CAACO,IAAT,EAAX,CAFsB,CAEM;;AAE5B,QAAIP,QAAQ,CAACQ,MAAT,GAAkB,CAAlB,IAAuBR,QAAQ,CAACQ,MAAT,IAAmBV,cAA9C,EAA8D,OAAOE,QAAP;;AAE9D,QAAIA,QAAQ,CAACQ,MAAT,KAAoB,CAAxB,EAA2B;AACzBX,MAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUJ,MAAV,EAAkB,gCAAlB,EAAoDI,MAApD,CAA2DH,IAA3D,EAAiE,8BAAjE,CAAV;AACD,KAFD,MAEO,IAAIF,QAAQ,CAACQ,MAAT,GAAkBV,cAAtB,EAAsC;AAC3CD,MAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUJ,MAAV,EAAkB,IAAlB,EAAwBI,MAAxB,CAA+BH,IAA/B,EAAqC,aAArC,EAAoDG,MAApD,CAA2DH,IAA3D,EAAiE,kCAAjE,CAAV;AACD;AACF,GAXD,MAWO;AACLL,IAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUJ,MAAV,EAAkB,0BAAlB,EAA8CI,MAA9C,CAAqDH,IAArD,EAA2D,SAA3D,EAAsEG,MAAtE,CAA6EH,IAA7E,EAAmF,8BAAnF,CAAV;AACD;;AAED,SAAO,KAAP;AACD;;AAED,OAAO,SAASO,WAAT,CAAqBT,QAArB,EAA+BC,MAA/B,EAAuC;AAC5C,MAAIT,QAAQ,CAACQ,QAAD,CAAZ,EAAwB;AACtB;AACA,QAAIU,WAAW,GAAGX,gBAAgB,CAACC,QAAQ,CAACU,WAAV,EAAuBT,MAAvB,EAA+B,aAA/B,CAAlC;AACA,QAAIU,YAAY,GAAGZ,gBAAgB,CAACC,QAAQ,CAACW,YAAV,EAAwBV,MAAxB,EAAgC,cAAhC,CAAnC;AACA,QAAIS,WAAW,IAAIC,YAAnB,EAAiC,OAAO;AACtCD,MAAAA,WAAW,EAAEA,WADyB;AAEtCC,MAAAA,YAAY,EAAEA;AAFwB,KAAP;AAIjCd,IAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUJ,MAAV,EAAkB,yFAAlB,CAAV;AACA,WAAO,KAAP;AACD,GAVD,MAUO;AACL,WAAOF,gBAAgB,CAACC,QAAD,EAAWC,MAAX,EAAmB,KAAnB,CAAvB;AACD;AACF","sourcesContent":["import { isObject, isString, numberIsFinite, toString } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('');\nvar KEY_MAX_LENGTH = 250;\n\nfunction validateKeyValue(maybeKey, method, type) {\n  if (maybeKey == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined \").concat(type, \", \").concat(type, \" must be a non-empty string.\"));\n    return false;\n  }\n\n  if (numberIsFinite(maybeKey)) {\n    log.warn(\"\".concat(method, \": \").concat(type, \" \\\"\").concat(maybeKey, \"\\\" is not of type string, converting.\"));\n    return toString(maybeKey);\n  }\n\n  if (isString(maybeKey)) {\n    // It's a string, start by trimming the value.\n    maybeKey = maybeKey.trim(); // It's aaaaaall good.\n\n    if (maybeKey.length > 0 && maybeKey.length <= KEY_MAX_LENGTH) return maybeKey;\n\n    if (maybeKey.length === 0) {\n      log.error(\"\".concat(method, \": you passed an empty string, \").concat(type, \" must be a non-empty string.\"));\n    } else if (maybeKey.length > KEY_MAX_LENGTH) {\n      log.error(\"\".concat(method, \": \").concat(type, \" too long, \").concat(type, \" must be 250 characters or less.\"));\n    }\n  } else {\n    log.error(\"\".concat(method, \": you passed an invalid \").concat(type, \" type, \").concat(type, \" must be a non-empty string.\"));\n  }\n\n  return false;\n}\n\nexport function validateKey(maybeKey, method) {\n  if (isObject(maybeKey)) {\n    // Validate key object\n    var matchingKey = validateKeyValue(maybeKey.matchingKey, method, 'matchingKey');\n    var bucketingKey = validateKeyValue(maybeKey.bucketingKey, method, 'bucketingKey');\n    if (matchingKey && bucketingKey) return {\n      matchingKey: matchingKey,\n      bucketingKey: bucketingKey\n    };\n    log.error(\"\".concat(method, \": Key must be an object with bucketingKey and matchingKey with valid string properties.\"));\n    return false;\n  } else {\n    return validateKeyValue(maybeKey, method, 'key');\n  }\n}"]},"metadata":{},"sourceType":"module"}