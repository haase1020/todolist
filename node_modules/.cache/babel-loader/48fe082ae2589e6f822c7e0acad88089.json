{"ast":null,"code":"import objectAssign from 'object-assign';\nimport thenable from '../utils/promise/thenable';\nimport { find } from '../utils/lang';\nimport { validateSplit, validateSplitExistance, validateIfDestroyed, validateIfReady } from '../utils/inputValidation';\n\nvar collectTreatments = function collectTreatments(splitObject) {\n  var conditions = splitObject.conditions; // Rollout conditions are supposed to have the entire partitions list, so we find the first one.\n\n  var allTreatmentsCondition = find(conditions, function (cond) {\n    return cond.conditionType === 'ROLLOUT';\n  }); // Localstorage mode could fall into a no rollout conditions state. Take the first condition in that case.\n\n  if (!allTreatmentsCondition) allTreatmentsCondition = conditions[0]; // Then extract the treatments from the partitions\n\n  return allTreatmentsCondition ? allTreatmentsCondition.partitions.map(function (v) {\n    return v.treatment;\n  }) : [];\n};\n\nvar ObjectToView = function ObjectToView(json) {\n  var splitObject;\n\n  try {\n    splitObject = JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n\n  if (splitObject == null) return null;\n  return {\n    name: splitObject.name,\n    trafficType: splitObject.trafficTypeName || null,\n    killed: splitObject.killed,\n    changeNumber: splitObject.changeNumber || 0,\n    treatments: collectTreatments(splitObject),\n    configs: splitObject.configurations || {}\n  };\n};\n\nvar ObjectsToViews = function ObjectsToViews(jsons) {\n  var views = [];\n  jsons.forEach(function (split) {\n    var view = ObjectToView(split);\n    if (view != null) views.push(view);\n  });\n  return views;\n};\n\nfunction SplitManagerFactory(_splits, context) {\n  var SPLIT_FN_LABEL = 'split';\n  var statusManager = context.get(context.constants.STATUS_MANAGER);\n  return objectAssign( // Proto-linkage of the readiness Event Emitter\n  Object.create(statusManager), {\n    /**\n     * Get the Split object corresponding to the given split name if valid\n     */\n    split: function split(maybeSplitName) {\n      var splitName = validateSplit(maybeSplitName, SPLIT_FN_LABEL);\n\n      if (!validateIfDestroyed(context) || !validateIfReady(context, SPLIT_FN_LABEL) || !splitName) {\n        return null;\n      }\n\n      var split = _splits.getSplit(splitName);\n\n      if (thenable(split)) {\n        return split.then(function (result) {\n          validateSplitExistance(context, splitName, result, SPLIT_FN_LABEL);\n          return ObjectToView(result);\n        });\n      }\n\n      validateSplitExistance(context, splitName, split, SPLIT_FN_LABEL);\n      return ObjectToView(split);\n    },\n\n    /**\n     * Get the Split objects present on the factory storage\n     */\n    splits: function splits() {\n      if (!validateIfDestroyed(context) || !validateIfReady(context, 'splits')) {\n        return [];\n      }\n\n      var currentSplits = _splits.getAll();\n\n      if (thenable(currentSplits)) return currentSplits.then(ObjectsToViews);\n      return ObjectsToViews(currentSplits);\n    },\n\n    /**\n     * Get the Split names present on the factory storage\n     */\n    names: function names() {\n      if (!validateIfDestroyed(context) || !validateIfReady(context, 'names')) {\n        return [];\n      }\n\n      return _splits.getKeys();\n    }\n  });\n}\n\nexport default SplitManagerFactory;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/manager/index.js"],"names":["objectAssign","thenable","find","validateSplit","validateSplitExistance","validateIfDestroyed","validateIfReady","collectTreatments","splitObject","conditions","allTreatmentsCondition","cond","conditionType","partitions","map","v","treatment","ObjectToView","json","JSON","parse","e","name","trafficType","trafficTypeName","killed","changeNumber","treatments","configs","configurations","ObjectsToViews","jsons","views","forEach","split","view","push","SplitManagerFactory","_splits","context","SPLIT_FN_LABEL","statusManager","get","constants","STATUS_MANAGER","Object","create","maybeSplitName","splitName","getSplit","then","result","splits","currentSplits","getAll","names","getKeys"],"mappings":"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","sourcesContent":["import objectAssign from 'object-assign';\nimport thenable from '../utils/promise/thenable';\nimport { find } from '../utils/lang';\nimport { validateSplit, validateSplitExistance, validateIfDestroyed, validateIfReady } from '../utils/inputValidation';\n\nvar collectTreatments = function collectTreatments(splitObject) {\n  var conditions = splitObject.conditions; // Rollout conditions are supposed to have the entire partitions list, so we find the first one.\n\n  var allTreatmentsCondition = find(conditions, function (cond) {\n    return cond.conditionType === 'ROLLOUT';\n  }); // Localstorage mode could fall into a no rollout conditions state. Take the first condition in that case.\n\n  if (!allTreatmentsCondition) allTreatmentsCondition = conditions[0]; // Then extract the treatments from the partitions\n\n  return allTreatmentsCondition ? allTreatmentsCondition.partitions.map(function (v) {\n    return v.treatment;\n  }) : [];\n};\n\nvar ObjectToView = function ObjectToView(json) {\n  var splitObject;\n\n  try {\n    splitObject = JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n\n  if (splitObject == null) return null;\n  return {\n    name: splitObject.name,\n    trafficType: splitObject.trafficTypeName || null,\n    killed: splitObject.killed,\n    changeNumber: splitObject.changeNumber || 0,\n    treatments: collectTreatments(splitObject),\n    configs: splitObject.configurations || {}\n  };\n};\n\nvar ObjectsToViews = function ObjectsToViews(jsons) {\n  var views = [];\n  jsons.forEach(function (split) {\n    var view = ObjectToView(split);\n    if (view != null) views.push(view);\n  });\n  return views;\n};\n\nfunction SplitManagerFactory(_splits, context) {\n  var SPLIT_FN_LABEL = 'split';\n  var statusManager = context.get(context.constants.STATUS_MANAGER);\n  return objectAssign( // Proto-linkage of the readiness Event Emitter\n  Object.create(statusManager), {\n    /**\n     * Get the Split object corresponding to the given split name if valid\n     */\n    split: function split(maybeSplitName) {\n      var splitName = validateSplit(maybeSplitName, SPLIT_FN_LABEL);\n\n      if (!validateIfDestroyed(context) || !validateIfReady(context, SPLIT_FN_LABEL) || !splitName) {\n        return null;\n      }\n\n      var split = _splits.getSplit(splitName);\n\n      if (thenable(split)) {\n        return split.then(function (result) {\n          validateSplitExistance(context, splitName, result, SPLIT_FN_LABEL);\n          return ObjectToView(result);\n        });\n      }\n\n      validateSplitExistance(context, splitName, split, SPLIT_FN_LABEL);\n      return ObjectToView(split);\n    },\n\n    /**\n     * Get the Split objects present on the factory storage\n     */\n    splits: function splits() {\n      if (!validateIfDestroyed(context) || !validateIfReady(context, 'splits')) {\n        return [];\n      }\n\n      var currentSplits = _splits.getAll();\n\n      if (thenable(currentSplits)) return currentSplits.then(ObjectsToViews);\n      return ObjectsToViews(currentSplits);\n    },\n\n    /**\n     * Get the Split names present on the factory storage\n     */\n    names: function names() {\n      if (!validateIfDestroyed(context) || !validateIfReady(context, 'names')) {\n        return [];\n      }\n\n      return _splits.getKeys();\n    }\n  });\n}\n\nexport default SplitManagerFactory;"]},"metadata":{},"sourceType":"module"}