{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-engine:sanitize');\nimport { isObject, uniq, toString, toNumber } from '../../utils/lang';\nimport { zeroSinceHH, zeroSinceSS } from '../convertions';\nimport { types as matcherTypes, dataTypes as matcherDataTypes } from '../matchers/types';\nvar MATCHERS = matcherTypes;\nvar DATA_TYPES = matcherDataTypes;\n\nfunction sanitizeNumber(val) {\n  var num = toNumber(val);\n  return isNaN(num) ? undefined : num;\n}\n\nfunction sanitizeString(val) {\n  var valueToSanitize = val;\n\n  if (isObject(val)) {\n    // If the value is an object and is not a key, discard it.\n    valueToSanitize = val.matchingKey ? val.matchingKey : undefined;\n  }\n\n  var str = toString(valueToSanitize);\n  return str ? str : undefined;\n}\n\nfunction sanitizeArray(val) {\n  var arr = Array.isArray(val) ? uniq(val.map(function (e) {\n    return e + '';\n  })) : [];\n  return arr.length ? arr : undefined;\n}\n\nfunction sanitizeBoolean(val) {\n  if (val === true || val === false) return val;\n\n  if (typeof val === 'string') {\n    var lowerCaseValue = val.toLocaleLowerCase();\n    if (lowerCaseValue === 'true') return true;\n    if (lowerCaseValue === 'false') return false;\n  }\n\n  return undefined;\n}\n\nfunction dependencyProcessor(sanitizedValue, attributes) {\n  return {\n    key: sanitizedValue,\n    attributes: attributes\n  };\n}\n/**\n * We can define a pre-processing for the value, to be executed prior to matcher evaluation.\n */\n\n\nfunction getProcessingFunction(matcherTypeID, dataType) {\n  switch (matcherTypeID) {\n    case MATCHERS.EQUAL_TO:\n      return dataType === 'DATETIME' ? zeroSinceHH : undefined;\n\n    case MATCHERS.GREATER_THAN_OR_EQUAL_TO:\n    case MATCHERS.LESS_THAN_OR_EQUAL_TO:\n    case MATCHERS.BETWEEN:\n      return dataType === 'DATETIME' ? zeroSinceSS : undefined;\n\n    case MATCHERS.IN_SPLIT_TREATMENT:\n      return dependencyProcessor;\n\n    default:\n      return undefined;\n  }\n}\n\nfunction sanitizeValue(matcherTypeID, value, dataType, attributes) {\n  var processor = getProcessingFunction(matcherTypeID, dataType);\n  var sanitizedValue;\n\n  switch (dataType) {\n    case DATA_TYPES.NUMBER:\n    case DATA_TYPES.DATETIME:\n      sanitizedValue = sanitizeNumber(value);\n      break;\n\n    case DATA_TYPES.STRING:\n      sanitizedValue = sanitizeString(value);\n      break;\n\n    case DATA_TYPES.SET:\n      sanitizedValue = sanitizeArray(value);\n      break;\n\n    case DATA_TYPES.BOOLEAN:\n      sanitizedValue = sanitizeBoolean(value);\n      break;\n\n    case DATA_TYPES.NOT_SPECIFIED:\n      sanitizedValue = value;\n      break;\n\n    default:\n      sanitizedValue = undefined;\n  }\n\n  if (processor) {\n    sanitizedValue = processor(sanitizedValue, attributes);\n  }\n\n  log.debug(\"Attempted to sanitize [\".concat(value, \"] which should be of type [\").concat(dataType, \"]. \\n Sanitized and processed value => [\").concat(sanitizedValue instanceof Object ? JSON.stringify(sanitizedValue) : sanitizedValue, \"]\"));\n  return sanitizedValue;\n}\n\nexport default sanitizeValue;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/value/sanitize.js"],"names":["logFactory","log","isObject","uniq","toString","toNumber","zeroSinceHH","zeroSinceSS","types","matcherTypes","dataTypes","matcherDataTypes","MATCHERS","DATA_TYPES","sanitizeNumber","val","num","isNaN","undefined","sanitizeString","valueToSanitize","matchingKey","str","sanitizeArray","arr","Array","isArray","map","e","length","sanitizeBoolean","lowerCaseValue","toLocaleLowerCase","dependencyProcessor","sanitizedValue","attributes","key","getProcessingFunction","matcherTypeID","dataType","EQUAL_TO","GREATER_THAN_OR_EQUAL_TO","LESS_THAN_OR_EQUAL_TO","BETWEEN","IN_SPLIT_TREATMENT","sanitizeValue","value","processor","NUMBER","DATETIME","STRING","SET","BOOLEAN","NOT_SPECIFIED","debug","concat","Object","JSON","stringify"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-engine:sanitize');\nimport { isObject, uniq, toString, toNumber } from '../../utils/lang';\nimport { zeroSinceHH, zeroSinceSS } from '../convertions';\nimport { types as matcherTypes, dataTypes as matcherDataTypes } from '../matchers/types';\nvar MATCHERS = matcherTypes;\nvar DATA_TYPES = matcherDataTypes;\n\nfunction sanitizeNumber(val) {\n  var num = toNumber(val);\n  return isNaN(num) ? undefined : num;\n}\n\nfunction sanitizeString(val) {\n  var valueToSanitize = val;\n\n  if (isObject(val)) {\n    // If the value is an object and is not a key, discard it.\n    valueToSanitize = val.matchingKey ? val.matchingKey : undefined;\n  }\n\n  var str = toString(valueToSanitize);\n  return str ? str : undefined;\n}\n\nfunction sanitizeArray(val) {\n  var arr = Array.isArray(val) ? uniq(val.map(function (e) {\n    return e + '';\n  })) : [];\n  return arr.length ? arr : undefined;\n}\n\nfunction sanitizeBoolean(val) {\n  if (val === true || val === false) return val;\n\n  if (typeof val === 'string') {\n    var lowerCaseValue = val.toLocaleLowerCase();\n    if (lowerCaseValue === 'true') return true;\n    if (lowerCaseValue === 'false') return false;\n  }\n\n  return undefined;\n}\n\nfunction dependencyProcessor(sanitizedValue, attributes) {\n  return {\n    key: sanitizedValue,\n    attributes: attributes\n  };\n}\n/**\n * We can define a pre-processing for the value, to be executed prior to matcher evaluation.\n */\n\n\nfunction getProcessingFunction(matcherTypeID, dataType) {\n  switch (matcherTypeID) {\n    case MATCHERS.EQUAL_TO:\n      return dataType === 'DATETIME' ? zeroSinceHH : undefined;\n\n    case MATCHERS.GREATER_THAN_OR_EQUAL_TO:\n    case MATCHERS.LESS_THAN_OR_EQUAL_TO:\n    case MATCHERS.BETWEEN:\n      return dataType === 'DATETIME' ? zeroSinceSS : undefined;\n\n    case MATCHERS.IN_SPLIT_TREATMENT:\n      return dependencyProcessor;\n\n    default:\n      return undefined;\n  }\n}\n\nfunction sanitizeValue(matcherTypeID, value, dataType, attributes) {\n  var processor = getProcessingFunction(matcherTypeID, dataType);\n  var sanitizedValue;\n\n  switch (dataType) {\n    case DATA_TYPES.NUMBER:\n    case DATA_TYPES.DATETIME:\n      sanitizedValue = sanitizeNumber(value);\n      break;\n\n    case DATA_TYPES.STRING:\n      sanitizedValue = sanitizeString(value);\n      break;\n\n    case DATA_TYPES.SET:\n      sanitizedValue = sanitizeArray(value);\n      break;\n\n    case DATA_TYPES.BOOLEAN:\n      sanitizedValue = sanitizeBoolean(value);\n      break;\n\n    case DATA_TYPES.NOT_SPECIFIED:\n      sanitizedValue = value;\n      break;\n\n    default:\n      sanitizedValue = undefined;\n  }\n\n  if (processor) {\n    sanitizedValue = processor(sanitizedValue, attributes);\n  }\n\n  log.debug(\"Attempted to sanitize [\".concat(value, \"] which should be of type [\").concat(dataType, \"]. \\n Sanitized and processed value => [\").concat(sanitizedValue instanceof Object ? JSON.stringify(sanitizedValue) : sanitizedValue, \"]\"));\n  return sanitizedValue;\n}\n\nexport default sanitizeValue;"]},"metadata":{},"sourceType":"module"}