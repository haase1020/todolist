{"ast":null,"code":"import React from 'react';\nimport SplitContext from './SplitContext';\nimport { ERROR_SC_NO_FACTORY } from './constants';\nimport { getStatus, getSplitSharedClient } from './utils';\n/**\n * Common component used to handle the status and events of a Split client passed as prop.\n * Reused by both SplitFactory (main client) and SplitClient (shared client) components.\n */\n\nexport class SplitComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setReady = () => {\n      if (this.props.updateOnSdkReady) this.setState({\n        lastUpdate: Date.now()\n      });\n    };\n\n    this.setReadyFromCache = () => {\n      if (this.props.updateOnSdkReadyFromCache) this.setState({\n        lastUpdate: Date.now()\n      });\n    };\n\n    this.setTimedout = () => {\n      if (this.props.updateOnSdkTimedout) this.setState({\n        lastUpdate: Date.now()\n      });\n    };\n\n    this.setUpdate = () => {\n      if (this.props.updateOnSdkUpdate) this.setState({\n        lastUpdate: Date.now()\n      });\n    };\n\n    const {\n      factory,\n      client\n    } = props; // Log error if factory is not available\n\n    if (!factory) {\n      console.error(ERROR_SC_NO_FACTORY);\n    }\n\n    this.state = Object.assign(Object.assign({\n      factory,\n      client\n    }, getStatus(client)), {\n      lastUpdate: 0\n    });\n  } // Using `getDerivedStateFromProps` since the state depends on the status of the client in props, which might change over time.\n  // It could be avoided by removing the client and its status from the component state.\n  // But it implies to have another instance property to use instead of the state, because we need a unique reference value for SplitContext.Producer\n\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      client,\n      factory\n    } = props;\n    const status = getStatus(client); // no need to compare status.isTimedout, since it derives from isReady and hasTimedout\n\n    if (client !== state.client || status.isReady !== state.isReady || status.isReadyFromCache !== state.isReadyFromCache || status.hasTimedout !== state.hasTimedout || status.isDestroyed !== state.isDestroyed) {\n      return Object.assign({\n        client,\n        factory\n      }, status);\n    }\n\n    return null;\n  } // Attach listeners for SDK events, to update state if client status change.\n  // The listeners take into account the value of `updateOnSdk***` props.\n\n\n  subscribeToEvents(client) {\n    if (client) {\n      client.once(client.Event.SDK_READY, this.setReady);\n      client.once(client.Event.SDK_READY_FROM_CACHE, this.setReadyFromCache);\n      client.once(client.Event.SDK_READY_TIMED_OUT, this.setTimedout);\n      client.on(client.Event.SDK_UPDATE, this.setUpdate);\n    }\n  }\n\n  unsubscribeFromEvents(client) {\n    if (client) {\n      client.removeListener(client.Event.SDK_READY, this.setReady);\n      client.removeListener(client.Event.SDK_READY_FROM_CACHE, this.setReadyFromCache);\n      client.removeListener(client.Event.SDK_READY_TIMED_OUT, this.setTimedout);\n      client.removeListener(client.Event.SDK_UPDATE, this.setUpdate);\n    }\n  }\n\n  componentDidMount() {\n    this.subscribeToEvents(this.props.client);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.client !== prevProps.client) {\n      this.unsubscribeFromEvents(prevProps.client);\n      this.subscribeToEvents(this.props.client);\n    }\n  }\n\n  componentWillUnmount() {\n    // unsubscrite to SDK client events, to remove references to SplitClient instance methods\n    this.unsubscribeFromEvents(this.props.client);\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    return React.createElement(SplitContext.Provider, {\n      value: this.state\n    }, typeof children === 'function' ? children(Object.assign({}, this.state)) : children);\n  }\n\n}\nSplitComponent.defaultProps = {\n  updateOnSdkUpdate: false,\n  updateOnSdkTimedout: false,\n  updateOnSdkReady: true,\n  updateOnSdkReadyFromCache: true,\n  children: null,\n  factory: null,\n  client: null\n};\n/**\n * SplitClient will initialize a new SDK client and listen for its events in order to update the Split Context.\n * Children components will have access to the new client when accessing Split Context.\n *\n * Unlike SplitFactory, the underlying SDK client can be changed during the component lifecycle\n * if the component is updated with a different splitKey or trafficType prop. Since the client can change,\n * its release is not handled by SplitClient but by its container SplitFactory component.\n *\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#advanced-instantiate-multiple-sdk-clients}\n */\n\nfunction SplitClient(props) {\n  return React.createElement(SplitContext.Consumer, null, splitContext => {\n    const {\n      factory\n    } = splitContext; // getSplitSharedClient is idempotent like factory.client: it returns the same client given the same factory, Split Key and TT\n\n    const client = factory ? getSplitSharedClient(factory, props.splitKey, props.trafficType) : null;\n    return React.createElement(SplitComponent, Object.assign({}, props, {\n      factory: factory,\n      client: client\n    }));\n  });\n}\n\nexport default SplitClient;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/SplitClient.js"],"names":["React","SplitContext","ERROR_SC_NO_FACTORY","getStatus","getSplitSharedClient","SplitComponent","Component","constructor","props","setReady","updateOnSdkReady","setState","lastUpdate","Date","now","setReadyFromCache","updateOnSdkReadyFromCache","setTimedout","updateOnSdkTimedout","setUpdate","updateOnSdkUpdate","factory","client","console","error","state","Object","assign","getDerivedStateFromProps","status","isReady","isReadyFromCache","hasTimedout","isDestroyed","subscribeToEvents","once","Event","SDK_READY","SDK_READY_FROM_CACHE","SDK_READY_TIMED_OUT","on","SDK_UPDATE","unsubscribeFromEvents","removeListener","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","render","children","createElement","Provider","value","defaultProps","SplitClient","Consumer","splitContext","splitKey","trafficType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SplitContext from './SplitContext';\nimport { ERROR_SC_NO_FACTORY } from './constants';\nimport { getStatus, getSplitSharedClient } from './utils';\n/**\n * Common component used to handle the status and events of a Split client passed as prop.\n * Reused by both SplitFactory (main client) and SplitClient (shared client) components.\n */\nexport class SplitComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setReady = () => {\n            if (this.props.updateOnSdkReady)\n                this.setState({ lastUpdate: Date.now() });\n        };\n        this.setReadyFromCache = () => {\n            if (this.props.updateOnSdkReadyFromCache)\n                this.setState({ lastUpdate: Date.now() });\n        };\n        this.setTimedout = () => {\n            if (this.props.updateOnSdkTimedout)\n                this.setState({ lastUpdate: Date.now() });\n        };\n        this.setUpdate = () => {\n            if (this.props.updateOnSdkUpdate)\n                this.setState({ lastUpdate: Date.now() });\n        };\n        const { factory, client } = props;\n        // Log error if factory is not available\n        if (!factory) {\n            console.error(ERROR_SC_NO_FACTORY);\n        }\n        this.state = Object.assign(Object.assign({ factory,\n            client }, getStatus(client)), { lastUpdate: 0 });\n    }\n    // Using `getDerivedStateFromProps` since the state depends on the status of the client in props, which might change over time.\n    // It could be avoided by removing the client and its status from the component state.\n    // But it implies to have another instance property to use instead of the state, because we need a unique reference value for SplitContext.Producer\n    static getDerivedStateFromProps(props, state) {\n        const { client, factory } = props;\n        const status = getStatus(client);\n        // no need to compare status.isTimedout, since it derives from isReady and hasTimedout\n        if (client !== state.client ||\n            status.isReady !== state.isReady ||\n            status.isReadyFromCache !== state.isReadyFromCache ||\n            status.hasTimedout !== state.hasTimedout ||\n            status.isDestroyed !== state.isDestroyed) {\n            return Object.assign({ client,\n                factory }, status);\n        }\n        return null;\n    }\n    // Attach listeners for SDK events, to update state if client status change.\n    // The listeners take into account the value of `updateOnSdk***` props.\n    subscribeToEvents(client) {\n        if (client) {\n            client.once(client.Event.SDK_READY, this.setReady);\n            client.once(client.Event.SDK_READY_FROM_CACHE, this.setReadyFromCache);\n            client.once(client.Event.SDK_READY_TIMED_OUT, this.setTimedout);\n            client.on(client.Event.SDK_UPDATE, this.setUpdate);\n        }\n    }\n    unsubscribeFromEvents(client) {\n        if (client) {\n            client.removeListener(client.Event.SDK_READY, this.setReady);\n            client.removeListener(client.Event.SDK_READY_FROM_CACHE, this.setReadyFromCache);\n            client.removeListener(client.Event.SDK_READY_TIMED_OUT, this.setTimedout);\n            client.removeListener(client.Event.SDK_UPDATE, this.setUpdate);\n        }\n    }\n    componentDidMount() {\n        this.subscribeToEvents(this.props.client);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.client !== prevProps.client) {\n            this.unsubscribeFromEvents(prevProps.client);\n            this.subscribeToEvents(this.props.client);\n        }\n    }\n    componentWillUnmount() {\n        // unsubscrite to SDK client events, to remove references to SplitClient instance methods\n        this.unsubscribeFromEvents(this.props.client);\n    }\n    render() {\n        const { children } = this.props;\n        return (React.createElement(SplitContext.Provider, { value: this.state }, typeof children === 'function' ?\n            children(Object.assign({}, this.state)) :\n            children));\n    }\n}\nSplitComponent.defaultProps = {\n    updateOnSdkUpdate: false,\n    updateOnSdkTimedout: false,\n    updateOnSdkReady: true,\n    updateOnSdkReadyFromCache: true,\n    children: null,\n    factory: null,\n    client: null,\n};\n/**\n * SplitClient will initialize a new SDK client and listen for its events in order to update the Split Context.\n * Children components will have access to the new client when accessing Split Context.\n *\n * Unlike SplitFactory, the underlying SDK client can be changed during the component lifecycle\n * if the component is updated with a different splitKey or trafficType prop. Since the client can change,\n * its release is not handled by SplitClient but by its container SplitFactory component.\n *\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#advanced-instantiate-multiple-sdk-clients}\n */\nfunction SplitClient(props) {\n    return (React.createElement(SplitContext.Consumer, null, (splitContext) => {\n        const { factory } = splitContext;\n        // getSplitSharedClient is idempotent like factory.client: it returns the same client given the same factory, Split Key and TT\n        const client = factory ? getSplitSharedClient(factory, props.splitKey, props.trafficType) : null;\n        return (React.createElement(SplitComponent, Object.assign({}, props, { factory: factory, client: client })));\n    }));\n}\nexport default SplitClient;\n"]},"metadata":{},"sourceType":"module"}