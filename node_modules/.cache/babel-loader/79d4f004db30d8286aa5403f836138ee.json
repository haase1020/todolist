{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport objectAssign from 'object-assign';\nimport { merge } from '../lang';\nimport language from './language';\nimport runtime from './runtime';\nimport overridesPerPlatform from './defaults';\nimport storage from './storage';\nimport integrations from './integrations';\nimport mode from './mode';\nimport validateSplitFilters from '../inputValidation/splitFilters';\nimport { API } from '../../utils/logger';\nimport { STANDALONE_MODE, STORAGE_MEMORY, CONSUMER_MODE, OPTIMIZED } from '../../utils/constants';\nimport validImpressionsMode from './impressionsMode';\nvar version = '10.15.3';\nvar eventsEndpointMatcher = /^\\/(testImpressions|metrics|events)/;\nvar authEndpointMatcher = /^\\/auth/;\nvar streamingEndpointMatcher = /^\\/(sse|event-stream)/;\nvar base = {\n  // Define which kind of object you want to retrieve from SplitFactory\n  mode: STANDALONE_MODE,\n  core: {\n    // API token (tight to an environment)\n    authorizationKey: undefined,\n    // key used in your system (only required for browser version)\n    key: undefined,\n    // traffic type for the given key (only used on browser version)\n    trafficType: undefined,\n    // toggle impressions tracking of labels\n    labelsEnabled: true,\n    // toggle sendind (true) or not sending (false) IP and Host Name with impressions, events, and telemetries requests (only used on nodejs version)\n    IPAddressesEnabled: undefined\n  },\n  scheduler: {\n    // fetch feature updates each 30 sec\n    featuresRefreshRate: 30,\n    // fetch segments updates each 60 sec\n    segmentsRefreshRate: 60,\n    // publish metrics each 120 sec\n    metricsRefreshRate: 120,\n    // publish evaluations each 60 sec\n    impressionsRefreshRate: 60,\n    // fetch offline changes each 15 sec\n    offlineRefreshRate: 15,\n    // publish events every 60 seconds after the first flush\n    eventsPushRate: 60,\n    // how many events will be queued before flushing\n    eventsQueueSize: 500,\n    // backoff base seconds to wait before re attempting to authenticate for push notifications\n    authRetryBackoffBase: 1,\n    // backoff base seconds to wait before re attempting to connect to streaming\n    streamingReconnectBackoffBase: 1\n  },\n  urls: {\n    // CDN having all the information for your environment\n    sdk: 'https://sdk.split.io/api',\n    // Storage for your SDK events\n    events: 'https://events.split.io/api',\n    // SDK Auth Server\n    auth: 'https://auth.split.io/api',\n    // Streaming Server\n    streaming: 'https://streaming.split.io'\n  },\n  // Defines which kind of storage we should instanciate.\n  storage: {\n    type: STORAGE_MEMORY\n  },\n  // Defines if the logs are enabled, SDK wide.\n  debug: undefined,\n  // Defines the impression listener, but will only be used on NodeJS.\n  impressionListener: undefined,\n  // Instance version.\n  version: \"\".concat(language, \"-\").concat(version),\n  // List of integrations.\n  integrations: undefined,\n  // toggle using (true) or not using (false) Server-Side Events for synchronizing storage\n  streamingEnabled: true,\n  sync: {\n    splitFilters: undefined,\n    // impressions collection mode\n    impressionsMode: OPTIMIZED\n  }\n};\n\nfunction fromSecondsToMillis(n) {\n  return Math.round(n * 1000);\n}\n\nfunction setupLogger(debugValue) {\n  if (typeof debugValue === 'boolean') {\n    if (debugValue) {\n      API.enable();\n    } else {\n      API.disable();\n    }\n  } else if (typeof debugValue === 'string') {\n    API.setLogLevel(debugValue);\n  }\n}\n\nfunction defaults(custom) {\n  var withDefaults = merge({}, base, overridesPerPlatform, custom); // Scheduler periods\n\n  withDefaults.scheduler.featuresRefreshRate = fromSecondsToMillis(withDefaults.scheduler.featuresRefreshRate);\n  withDefaults.scheduler.segmentsRefreshRate = fromSecondsToMillis(withDefaults.scheduler.segmentsRefreshRate);\n  withDefaults.scheduler.metricsRefreshRate = fromSecondsToMillis(withDefaults.scheduler.metricsRefreshRate);\n  withDefaults.scheduler.impressionsRefreshRate = fromSecondsToMillis(withDefaults.scheduler.impressionsRefreshRate);\n  withDefaults.scheduler.offlineRefreshRate = fromSecondsToMillis(withDefaults.scheduler.offlineRefreshRate);\n  withDefaults.scheduler.eventsPushRate = fromSecondsToMillis(withDefaults.scheduler.eventsPushRate); // Startup periods\n\n  withDefaults.startup.requestTimeoutBeforeReady = fromSecondsToMillis(withDefaults.startup.requestTimeoutBeforeReady);\n  withDefaults.startup.readyTimeout = fromSecondsToMillis(withDefaults.startup.readyTimeout);\n  withDefaults.startup.eventsFirstPushWindow = fromSecondsToMillis(withDefaults.startup.eventsFirstPushWindow); // ensure a valid SDK mode\n\n  withDefaults.mode = mode(withDefaults.core.authorizationKey, withDefaults.mode); // ensure a valid Storage based on mode defined.\n\n  withDefaults.storage = storage(withDefaults);\n  setupLogger(withDefaults.debug); // Current ip/hostname information\n\n  withDefaults.runtime = runtime(withDefaults.core.IPAddressesEnabled, withDefaults.mode === CONSUMER_MODE); // ensure a valid list of integrations.\n  // `integrations` returns an array of valid integration items.\n\n  withDefaults.integrations = integrations(withDefaults); // validate push options\n\n  if (withDefaults.streamingEnabled !== false) {\n    withDefaults.streamingEnabled = true; // Backoff bases.\n    // We are not checking if bases are positive numbers. Thus, we might be reauthenticating immediately (`setTimeout` with NaN or negative number)\n\n    withDefaults.scheduler.authRetryBackoffBase = fromSecondsToMillis(withDefaults.scheduler.authRetryBackoffBase);\n    withDefaults.scheduler.streamingReconnectBackoffBase = fromSecondsToMillis(withDefaults.scheduler.streamingReconnectBackoffBase);\n  } // validate the `splitFilters` settings and parse splits query\n\n\n  var splitFiltersValidation = validateSplitFilters(withDefaults.sync.splitFilters, withDefaults.mode);\n  withDefaults.sync.splitFilters = splitFiltersValidation.validFilters;\n  withDefaults.sync.__splitFiltersValidation = splitFiltersValidation; // ensure a valid impressionsMode\n\n  withDefaults.sync.impressionsMode = validImpressionsMode(withDefaults.sync.impressionsMode);\n  return withDefaults;\n}\n\nvar proto = {\n  /**\n   * Switch URLs servers based on target.\n   *\n   * @param {String} target url target\n   * @return {String} completed url\n   */\n  url: function url(target) {\n    if (eventsEndpointMatcher.test(target)) {\n      return \"\".concat(this.urls.events).concat(target);\n    }\n\n    if (authEndpointMatcher.test(target)) {\n      return \"\".concat(this.urls.auth).concat(target);\n    }\n\n    if (streamingEndpointMatcher.test(target)) {\n      return \"\".concat(this.urls.streaming).concat(target);\n    }\n\n    return \"\".concat(this.urls.sdk).concat(target);\n  },\n\n  /**\n   * Returns a settings clone with the key and traffic type (if provided) overriden.\n   * @param {SplitKey} key\n   * @param {string} [trafficType]\n   */\n  overrideKeyAndTT: function overrideKeyAndTT(key, trafficType) {\n    return objectAssign(Object.create(proto), this, {\n      core: objectAssign({}, this.core, {\n        key: key,\n        trafficType: trafficType\n      })\n    });\n  }\n};\n\nvar SettingsFactory = function SettingsFactory(settings) {\n  return objectAssign(Object.create(proto), defaults(settings));\n};\n\nexport default SettingsFactory;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/settings/index.js"],"names":["objectAssign","merge","language","runtime","overridesPerPlatform","storage","integrations","mode","validateSplitFilters","API","STANDALONE_MODE","STORAGE_MEMORY","CONSUMER_MODE","OPTIMIZED","validImpressionsMode","version","eventsEndpointMatcher","authEndpointMatcher","streamingEndpointMatcher","base","core","authorizationKey","undefined","key","trafficType","labelsEnabled","IPAddressesEnabled","scheduler","featuresRefreshRate","segmentsRefreshRate","metricsRefreshRate","impressionsRefreshRate","offlineRefreshRate","eventsPushRate","eventsQueueSize","authRetryBackoffBase","streamingReconnectBackoffBase","urls","sdk","events","auth","streaming","type","debug","impressionListener","concat","streamingEnabled","sync","splitFilters","impressionsMode","fromSecondsToMillis","n","Math","round","setupLogger","debugValue","enable","disable","setLogLevel","defaults","custom","withDefaults","startup","requestTimeoutBeforeReady","readyTimeout","eventsFirstPushWindow","splitFiltersValidation","validFilters","__splitFiltersValidation","proto","url","target","test","overrideKeyAndTT","Object","create","SettingsFactory","settings"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport objectAssign from 'object-assign';\nimport { merge } from '../lang';\nimport language from './language';\nimport runtime from './runtime';\nimport overridesPerPlatform from './defaults';\nimport storage from './storage';\nimport integrations from './integrations';\nimport mode from './mode';\nimport validateSplitFilters from '../inputValidation/splitFilters';\nimport { API } from '../../utils/logger';\nimport { STANDALONE_MODE, STORAGE_MEMORY, CONSUMER_MODE, OPTIMIZED } from '../../utils/constants';\nimport validImpressionsMode from './impressionsMode';\nvar version = '10.15.3';\nvar eventsEndpointMatcher = /^\\/(testImpressions|metrics|events)/;\nvar authEndpointMatcher = /^\\/auth/;\nvar streamingEndpointMatcher = /^\\/(sse|event-stream)/;\nvar base = {\n  // Define which kind of object you want to retrieve from SplitFactory\n  mode: STANDALONE_MODE,\n  core: {\n    // API token (tight to an environment)\n    authorizationKey: undefined,\n    // key used in your system (only required for browser version)\n    key: undefined,\n    // traffic type for the given key (only used on browser version)\n    trafficType: undefined,\n    // toggle impressions tracking of labels\n    labelsEnabled: true,\n    // toggle sendind (true) or not sending (false) IP and Host Name with impressions, events, and telemetries requests (only used on nodejs version)\n    IPAddressesEnabled: undefined\n  },\n  scheduler: {\n    // fetch feature updates each 30 sec\n    featuresRefreshRate: 30,\n    // fetch segments updates each 60 sec\n    segmentsRefreshRate: 60,\n    // publish metrics each 120 sec\n    metricsRefreshRate: 120,\n    // publish evaluations each 60 sec\n    impressionsRefreshRate: 60,\n    // fetch offline changes each 15 sec\n    offlineRefreshRate: 15,\n    // publish events every 60 seconds after the first flush\n    eventsPushRate: 60,\n    // how many events will be queued before flushing\n    eventsQueueSize: 500,\n    // backoff base seconds to wait before re attempting to authenticate for push notifications\n    authRetryBackoffBase: 1,\n    // backoff base seconds to wait before re attempting to connect to streaming\n    streamingReconnectBackoffBase: 1\n  },\n  urls: {\n    // CDN having all the information for your environment\n    sdk: 'https://sdk.split.io/api',\n    // Storage for your SDK events\n    events: 'https://events.split.io/api',\n    // SDK Auth Server\n    auth: 'https://auth.split.io/api',\n    // Streaming Server\n    streaming: 'https://streaming.split.io'\n  },\n  // Defines which kind of storage we should instanciate.\n  storage: {\n    type: STORAGE_MEMORY\n  },\n  // Defines if the logs are enabled, SDK wide.\n  debug: undefined,\n  // Defines the impression listener, but will only be used on NodeJS.\n  impressionListener: undefined,\n  // Instance version.\n  version: \"\".concat(language, \"-\").concat(version),\n  // List of integrations.\n  integrations: undefined,\n  // toggle using (true) or not using (false) Server-Side Events for synchronizing storage\n  streamingEnabled: true,\n  sync: {\n    splitFilters: undefined,\n    // impressions collection mode\n    impressionsMode: OPTIMIZED\n  }\n};\n\nfunction fromSecondsToMillis(n) {\n  return Math.round(n * 1000);\n}\n\nfunction setupLogger(debugValue) {\n  if (typeof debugValue === 'boolean') {\n    if (debugValue) {\n      API.enable();\n    } else {\n      API.disable();\n    }\n  } else if (typeof debugValue === 'string') {\n    API.setLogLevel(debugValue);\n  }\n}\n\nfunction defaults(custom) {\n  var withDefaults = merge({}, base, overridesPerPlatform, custom); // Scheduler periods\n\n  withDefaults.scheduler.featuresRefreshRate = fromSecondsToMillis(withDefaults.scheduler.featuresRefreshRate);\n  withDefaults.scheduler.segmentsRefreshRate = fromSecondsToMillis(withDefaults.scheduler.segmentsRefreshRate);\n  withDefaults.scheduler.metricsRefreshRate = fromSecondsToMillis(withDefaults.scheduler.metricsRefreshRate);\n  withDefaults.scheduler.impressionsRefreshRate = fromSecondsToMillis(withDefaults.scheduler.impressionsRefreshRate);\n  withDefaults.scheduler.offlineRefreshRate = fromSecondsToMillis(withDefaults.scheduler.offlineRefreshRate);\n  withDefaults.scheduler.eventsPushRate = fromSecondsToMillis(withDefaults.scheduler.eventsPushRate); // Startup periods\n\n  withDefaults.startup.requestTimeoutBeforeReady = fromSecondsToMillis(withDefaults.startup.requestTimeoutBeforeReady);\n  withDefaults.startup.readyTimeout = fromSecondsToMillis(withDefaults.startup.readyTimeout);\n  withDefaults.startup.eventsFirstPushWindow = fromSecondsToMillis(withDefaults.startup.eventsFirstPushWindow); // ensure a valid SDK mode\n\n  withDefaults.mode = mode(withDefaults.core.authorizationKey, withDefaults.mode); // ensure a valid Storage based on mode defined.\n\n  withDefaults.storage = storage(withDefaults);\n  setupLogger(withDefaults.debug); // Current ip/hostname information\n\n  withDefaults.runtime = runtime(withDefaults.core.IPAddressesEnabled, withDefaults.mode === CONSUMER_MODE); // ensure a valid list of integrations.\n  // `integrations` returns an array of valid integration items.\n\n  withDefaults.integrations = integrations(withDefaults); // validate push options\n\n  if (withDefaults.streamingEnabled !== false) {\n    withDefaults.streamingEnabled = true; // Backoff bases.\n    // We are not checking if bases are positive numbers. Thus, we might be reauthenticating immediately (`setTimeout` with NaN or negative number)\n\n    withDefaults.scheduler.authRetryBackoffBase = fromSecondsToMillis(withDefaults.scheduler.authRetryBackoffBase);\n    withDefaults.scheduler.streamingReconnectBackoffBase = fromSecondsToMillis(withDefaults.scheduler.streamingReconnectBackoffBase);\n  } // validate the `splitFilters` settings and parse splits query\n\n\n  var splitFiltersValidation = validateSplitFilters(withDefaults.sync.splitFilters, withDefaults.mode);\n  withDefaults.sync.splitFilters = splitFiltersValidation.validFilters;\n  withDefaults.sync.__splitFiltersValidation = splitFiltersValidation; // ensure a valid impressionsMode\n\n  withDefaults.sync.impressionsMode = validImpressionsMode(withDefaults.sync.impressionsMode);\n  return withDefaults;\n}\n\nvar proto = {\n  /**\n   * Switch URLs servers based on target.\n   *\n   * @param {String} target url target\n   * @return {String} completed url\n   */\n  url: function url(target) {\n    if (eventsEndpointMatcher.test(target)) {\n      return \"\".concat(this.urls.events).concat(target);\n    }\n\n    if (authEndpointMatcher.test(target)) {\n      return \"\".concat(this.urls.auth).concat(target);\n    }\n\n    if (streamingEndpointMatcher.test(target)) {\n      return \"\".concat(this.urls.streaming).concat(target);\n    }\n\n    return \"\".concat(this.urls.sdk).concat(target);\n  },\n\n  /**\n   * Returns a settings clone with the key and traffic type (if provided) overriden.\n   * @param {SplitKey} key\n   * @param {string} [trafficType]\n   */\n  overrideKeyAndTT: function overrideKeyAndTT(key, trafficType) {\n    return objectAssign(Object.create(proto), this, {\n      core: objectAssign({}, this.core, {\n        key: key,\n        trafficType: trafficType\n      })\n    });\n  }\n};\n\nvar SettingsFactory = function SettingsFactory(settings) {\n  return objectAssign(Object.create(proto), defaults(settings));\n};\n\nexport default SettingsFactory;"]},"metadata":{},"sourceType":"module"}