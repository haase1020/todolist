{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport TaskFactory from '../task';\nimport MySegmentsUpdater from '../updater/MySegments';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-producer:mySegmentsHandler');\n/**\n * Incremental updater to be used to share data in the browser.\n */\n\nvar PartialBrowserProducer = function PartialBrowserProducer(context) {\n  var settings = context.get(context.constants.SETTINGS);\n  var splitsStorage = context.get(context.constants.STORAGE).splits;\n\n  var _context$get = context.get(context.constants.READINESS),\n      splitsEventEmitter = _context$get.splits,\n      segmentsEventEmitter = _context$get.segments;\n\n  var mySegmentsUpdater = MySegmentsUpdater(context);\n  var mySegmentsUpdaterTask = TaskFactory(synchronizeMySegments, settings.scheduler.segmentsRefreshRate);\n  splitsEventEmitter.on(splitsEventEmitter.SDK_SPLITS_ARRIVED, smartPausing); // needed for shared clients, we run `smartReady` a first time if splits were sync and don't use segments,\n  // to emit SDK_SEGMENTS_ARRIVED (and thus SDK_READY) immediately in next event cycle\n\n  if (!splitsStorage.usesSegments()) setTimeout(smartReady, 0);else splitsEventEmitter.once(splitsEventEmitter.SDK_SPLITS_ARRIVED, smartReady);\n  var _isSynchronizingMySegments = false;\n  /**\n   * @param {string[] | undefined} segmentList might be undefined\n   */\n\n  function synchronizeMySegments(segmentList) {\n    _isSynchronizingMySegments = true; // `mySegmentsUpdater` promise always resolves, and with a false value if it fails to fetch or store mySegments\n\n    return mySegmentsUpdater(0, segmentList).then(function (res) {\n      _isSynchronizingMySegments = false;\n      return res;\n    });\n  }\n\n  var running = false; // we cannot rely on `mySegmentsUpdaterTask.isRunning` to check if doing polling\n\n  function isRunning() {\n    return running;\n  } // emit SDK_SEGMENTS_ARRIVED (and thus SDK_READY) if not ready yet and splits are not using segments\n\n\n  function smartReady() {\n    var isReady = context.get(context.constants.READY, true);\n    if (!isReady && !splitsStorage.usesSegments()) segmentsEventEmitter.emit(segmentsEventEmitter.SDK_SEGMENTS_ARRIVED);\n  } // smartly pause/resume mySegmentsUpdaterTask while doing polling\n\n\n  function smartPausing() {\n    if (!running) return; // noop if not doing polling\n\n    var splitsHaveSegments = splitsStorage.usesSegments();\n\n    if (splitsHaveSegments !== mySegmentsUpdaterTask.isRunning()) {\n      log.info(\"Turning segments data polling \".concat(splitsHaveSegments ? 'ON' : 'OFF', \".\"));\n\n      if (splitsHaveSegments) {\n        mySegmentsUpdaterTask.start();\n      } else {\n        mySegmentsUpdaterTask.stop();\n      }\n    }\n  }\n\n  return {\n    // Start periodic fetching (polling)\n    start: function start() {\n      running = true;\n      if (splitsStorage.usesSegments()) mySegmentsUpdaterTask.start();\n    },\n    // Stop periodic fetching (polling)\n    stop: function stop() {\n      running = false;\n      mySegmentsUpdaterTask.stop();\n    },\n    // Used by SyncManager to know if running in polling mode.\n    isRunning: isRunning,\n    // Used by MySegmentUpdateWorker\n    isSynchronizingMySegments: function isSynchronizingMySegments() {\n      return _isSynchronizingMySegments;\n    },\n    synchronizeMySegments: synchronizeMySegments\n  };\n};\n\nexport default PartialBrowserProducer;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/producer/browser/Partial.js"],"names":["TaskFactory","MySegmentsUpdater","logFactory","log","PartialBrowserProducer","context","settings","get","constants","SETTINGS","splitsStorage","STORAGE","splits","_context$get","READINESS","splitsEventEmitter","segmentsEventEmitter","segments","mySegmentsUpdater","mySegmentsUpdaterTask","synchronizeMySegments","scheduler","segmentsRefreshRate","on","SDK_SPLITS_ARRIVED","smartPausing","usesSegments","setTimeout","smartReady","once","_isSynchronizingMySegments","segmentList","then","res","running","isRunning","isReady","READY","emit","SDK_SEGMENTS_ARRIVED","splitsHaveSegments","info","concat","start","stop","isSynchronizingMySegments"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport TaskFactory from '../task';\nimport MySegmentsUpdater from '../updater/MySegments';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-producer:mySegmentsHandler');\n/**\n * Incremental updater to be used to share data in the browser.\n */\n\nvar PartialBrowserProducer = function PartialBrowserProducer(context) {\n  var settings = context.get(context.constants.SETTINGS);\n  var splitsStorage = context.get(context.constants.STORAGE).splits;\n\n  var _context$get = context.get(context.constants.READINESS),\n      splitsEventEmitter = _context$get.splits,\n      segmentsEventEmitter = _context$get.segments;\n\n  var mySegmentsUpdater = MySegmentsUpdater(context);\n  var mySegmentsUpdaterTask = TaskFactory(synchronizeMySegments, settings.scheduler.segmentsRefreshRate);\n  splitsEventEmitter.on(splitsEventEmitter.SDK_SPLITS_ARRIVED, smartPausing); // needed for shared clients, we run `smartReady` a first time if splits were sync and don't use segments,\n  // to emit SDK_SEGMENTS_ARRIVED (and thus SDK_READY) immediately in next event cycle\n\n  if (!splitsStorage.usesSegments()) setTimeout(smartReady, 0);else splitsEventEmitter.once(splitsEventEmitter.SDK_SPLITS_ARRIVED, smartReady);\n  var _isSynchronizingMySegments = false;\n  /**\n   * @param {string[] | undefined} segmentList might be undefined\n   */\n\n  function synchronizeMySegments(segmentList) {\n    _isSynchronizingMySegments = true; // `mySegmentsUpdater` promise always resolves, and with a false value if it fails to fetch or store mySegments\n\n    return mySegmentsUpdater(0, segmentList).then(function (res) {\n      _isSynchronizingMySegments = false;\n      return res;\n    });\n  }\n\n  var running = false; // we cannot rely on `mySegmentsUpdaterTask.isRunning` to check if doing polling\n\n  function isRunning() {\n    return running;\n  } // emit SDK_SEGMENTS_ARRIVED (and thus SDK_READY) if not ready yet and splits are not using segments\n\n\n  function smartReady() {\n    var isReady = context.get(context.constants.READY, true);\n    if (!isReady && !splitsStorage.usesSegments()) segmentsEventEmitter.emit(segmentsEventEmitter.SDK_SEGMENTS_ARRIVED);\n  } // smartly pause/resume mySegmentsUpdaterTask while doing polling\n\n\n  function smartPausing() {\n    if (!running) return; // noop if not doing polling\n\n    var splitsHaveSegments = splitsStorage.usesSegments();\n\n    if (splitsHaveSegments !== mySegmentsUpdaterTask.isRunning()) {\n      log.info(\"Turning segments data polling \".concat(splitsHaveSegments ? 'ON' : 'OFF', \".\"));\n\n      if (splitsHaveSegments) {\n        mySegmentsUpdaterTask.start();\n      } else {\n        mySegmentsUpdaterTask.stop();\n      }\n    }\n  }\n\n  return {\n    // Start periodic fetching (polling)\n    start: function start() {\n      running = true;\n      if (splitsStorage.usesSegments()) mySegmentsUpdaterTask.start();\n    },\n    // Stop periodic fetching (polling)\n    stop: function stop() {\n      running = false;\n      mySegmentsUpdaterTask.stop();\n    },\n    // Used by SyncManager to know if running in polling mode.\n    isRunning: isRunning,\n    // Used by MySegmentUpdateWorker\n    isSynchronizingMySegments: function isSynchronizingMySegments() {\n      return _isSynchronizingMySegments;\n    },\n    synchronizeMySegments: synchronizeMySegments\n  };\n};\n\nexport default PartialBrowserProducer;"]},"metadata":{},"sourceType":"module"}