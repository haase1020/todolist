{"ast":null,"code":"/*\r\n Copyright 2014 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\n\n/**\r\n * @license utfx (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/utfx for details\r\n */\n(function (global, factory) {\n  /* AMD */\n  if (typeof define === 'function' && define['amd']) define(factory);\n  /* CommonJS */\n  else if (typeof require === \"function\" && typeof module === 'object' && module && module['exports']) module['exports'] = factory();\n    /* Global */\n    else (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"utfx\"] = factory();\n})(this, function () {\n  \"use strict\";\n\n  if (!Array.isArray) Array.isArray = function (v) {\n    return Object.prototype.toString.call(v) === \"[object Array]\";\n  };\n  /**\r\n   * utfx namespace.\r\n   * @exports utfx\r\n   * @type {!Object.<string,*>}\r\n   */\n\n  var utfx = {};\n  /**\r\n   * Maximum valid code point.\r\n   * @type {number}\r\n   * @const\r\n   * @expose\r\n   */\n\n  utfx.MAX_CODEPOINT = 0x10FFFF;\n  /**\r\n   * Encodes UTF8 code points to UTF8 bytes.\r\n   * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n   *  respectively `null` if there are no more code points left or a single numeric code point.\r\n   * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\r\n   * @expose\r\n   */\n\n  utfx.encodeUTF8 = function (src, dst) {\n    var cp = null;\n    if (typeof src === 'number') cp = src, src = function () {\n      return null;\n    };\n\n    while (cp !== null || (cp = src()) !== null) {\n      if (cp < 0x80) dst(cp & 0x7F);else if (cp < 0x800) dst(cp >> 6 & 0x1F | 0xC0), dst(cp & 0x3F | 0x80);else if (cp < 0x10000) dst(cp >> 12 & 0x0F | 0xE0), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);else dst(cp >> 18 & 0x07 | 0xF0), dst(cp >> 12 & 0x3F | 0x80), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);\n      cp = null;\n    }\n  };\n  /**\r\n   * Decodes UTF8 bytes to UTF8 code points.\r\n   * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n   *  are no more bytes left.\r\n   * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.\r\n   * @throws {RangeError} If a starting byte is invalid in UTF8\r\n   * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\r\n   *  remaining bytes.\r\n   * @expose\r\n   */\n\n\n  utfx.decodeUTF8 = function (src, dst) {\n    var a,\n        b,\n        c,\n        d,\n        fail = function (b) {\n      b = b.slice(0, b.indexOf(null));\n      var err = Error(b.toString());\n      err.name = \"TruncatedError\";\n      err['bytes'] = b;\n      throw err;\n    };\n\n    while ((a = src()) !== null) {\n      if ((a & 0x80) === 0) dst(a);else if ((a & 0xE0) === 0xC0) (b = src()) === null && fail([a, b]), dst((a & 0x1F) << 6 | b & 0x3F);else if ((a & 0xF0) === 0xE0) ((b = src()) === null || (c = src()) === null) && fail([a, b, c]), dst((a & 0x0F) << 12 | (b & 0x3F) << 6 | c & 0x3F);else if ((a & 0xF8) === 0xF0) ((b = src()) === null || (c = src()) === null || (d = src()) === null) && fail([a, b, c, d]), dst((a & 0x07) << 18 | (b & 0x3F) << 12 | (c & 0x3F) << 6 | d & 0x3F);else throw RangeError(\"Illegal starting byte: \" + a);\n    }\n  };\n  /**\r\n   * Converts UTF16 characters to UTF8 code points.\r\n   * @param {!function():number|null} src Characters source as a function returning the next char code respectively\r\n   *  `null` if there are no more characters left.\r\n   * @param {!function(number)} dst Code points destination as a function successively called with each converted code\r\n   *  point.\r\n   * @expose\r\n   */\n\n\n  utfx.UTF16toUTF8 = function (src, dst) {\n    var c1,\n        c2 = null;\n\n    while (true) {\n      if ((c1 = c2 !== null ? c2 : src()) === null) break;\n\n      if (c1 >= 0xD800 && c1 <= 0xDFFF) {\n        if ((c2 = src()) !== null) {\n          if (c2 >= 0xDC00 && c2 <= 0xDFFF) {\n            dst((c1 - 0xD800) * 0x400 + c2 - 0xDC00 + 0x10000);\n            c2 = null;\n            continue;\n          }\n        }\n      }\n\n      dst(c1);\n    }\n\n    if (c2 !== null) dst(c2);\n  };\n  /**\r\n   * Converts UTF8 code points to UTF16 characters.\r\n   * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n   *  respectively `null` if there are no more code points left or a single numeric code point.\r\n   * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n   * @throws {RangeError} If a code point is out of range\r\n   * @expose\r\n   */\n\n\n  utfx.UTF8toUTF16 = function (src, dst) {\n    var cp = null;\n    if (typeof src === 'number') cp = src, src = function () {\n      return null;\n    };\n\n    while (cp !== null || (cp = src()) !== null) {\n      if (cp <= 0xFFFF) dst(cp);else cp -= 0x10000, dst((cp >> 10) + 0xD800), dst(cp % 0x400 + 0xDC00);\n      cp = null;\n    }\n  };\n  /**\r\n   * Converts and encodes UTF16 characters to UTF8 bytes.\r\n   * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\r\n   *  if there are no more characters left.\r\n   * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\r\n   * @expose\r\n   */\n\n\n  utfx.encodeUTF16toUTF8 = function (src, dst) {\n    utfx.UTF16toUTF8(src, function (cp) {\n      utfx.encodeUTF8(cp, dst);\n    });\n  };\n  /**\r\n   * Decodes and converts UTF8 bytes to UTF16 characters.\r\n   * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n   *  are no more bytes left.\r\n   * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n   * @throws {RangeError} If a starting byte is invalid in UTF8\r\n   * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\r\n   * @expose\r\n   */\n\n\n  utfx.decodeUTF8toUTF16 = function (src, dst) {\n    utfx.decodeUTF8(src, function (cp) {\n      utfx.UTF8toUTF16(cp, dst);\n    });\n  };\n  /**\r\n   * Calculates the byte length of an UTF8 code point.\r\n   * @param {number} cp UTF8 code point\r\n   * @returns {number} Byte length\r\n   * @expose\r\n   */\n\n\n  utfx.calculateCodePoint = function (cp) {\n    return cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;\n  };\n  /**\r\n   * Calculates the number of UTF8 bytes required to store UTF8 code points.\r\n   * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively\r\n   *  `null` if there are no more code points left.\r\n   * @returns {number} The number of UTF8 bytes required\r\n   * @expose\r\n   */\n\n\n  utfx.calculateUTF8 = function (src) {\n    var cp,\n        l = 0;\n\n    while ((cp = src()) !== null) l += cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;\n\n    return l;\n  };\n  /**\r\n   * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\r\n   * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively\r\n   *  `null` if there are no more characters left.\r\n   * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\r\n   * @expose\r\n   */\n\n\n  utfx.calculateUTF16asUTF8 = function (src) {\n    var n = 0,\n        l = 0;\n    utfx.UTF16toUTF8(src, function (cp) {\n      ++n;\n      l += cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;\n    });\n    return [n, l];\n  };\n  /**\r\n   * String.fromCharCode reference for compile time renaming.\r\n   * @type {!function(...[number]):string}\r\n   * @inner\r\n   */\n\n\n  var stringFromCharCode = String.fromCharCode;\n  /**\r\n   * Creates a source function for an array.\r\n   * @param {!Array.<number>} a Array to read from\r\n   * @returns {!function():number|null} Source function returning the next value respectively `null` if there are no\r\n   *  more values left.\r\n   * @throws {TypeError} If the argument is invalid\r\n   * @expose\r\n   */\n\n  utfx.arraySource = function (a) {\n    if (!Array.isArray(a)) throw TypeError(\"Illegal argument: \" + typeof a);\n    var i = 0;\n    return function () {\n      return i >= a.length ? null : a[i++];\n    };\n  };\n  /**\r\n   * Creates a destination function for an array.\r\n   * @param {!Array.<number>} a Array to write to\r\n   * @returns {!function(number)} Destination function successively called with the next value.\r\n   * @throws {TypeError} If the argument is invalid\r\n   * @expose\r\n   */\n\n\n  utfx.arrayDestination = function (a) {\n    if (!Array.isArray(a)) throw TypeError(\"Illegal argument: \" + typeof a);\n    return Array.prototype.push.bind(a);\n  };\n  /**\r\n   * Creates a source function for a string.\r\n   * @param {string} s String to read from\r\n   * @returns {!function():number|null} Source function returning the next char code respectively `null` if there are\r\n   *  no more characters left.\r\n   * @throws {TypeError} If the argument is invalid\r\n   * @expose\r\n   */\n\n\n  utfx.stringSource = function (s) {\n    if (typeof s !== 'string') throw TypeError(\"Illegal argument: \" + typeof s);\n    var i = 0;\n    return function () {\n      return i >= s.length ? null : s.charCodeAt(i++);\n    };\n  };\n  /**\r\n   * Creates a destination function for a string.\r\n   * @returns {function(number=):undefined|string} Destination function successively called with the next char code.\r\n   *  Returns the final string when called without arguments.\r\n   * @expose\r\n   */\n\n\n  utfx.stringDestination = function () {\n    var cs = [],\n        ps = [];\n    return function () {\n      if (arguments.length === 0) return ps.join('') + stringFromCharCode.apply(String, cs);\n      if (cs.length + arguments.length > 1024) ps.push(stringFromCharCode.apply(String, cs)), cs.length = 0;\n      Array.prototype.push.apply(cs, arguments);\n    };\n  };\n  /**\r\n   * Asserts an UTF16 char code.\r\n   * @param {number} c UTF16 char code\r\n   * @returns {number} Valid char code\r\n   * @throws {TypeError} If the char code is invalid\r\n   * @throws {RangeError} If the char code is out of range\r\n   * @expose\r\n   */\n\n\n  utfx.assertCharCode = function (c) {\n    if (typeof c !== 'number' || c !== c) throw TypeError(\"Illegal char code: \" + typeof c);\n    if (c < 0 || c > 0xFFFF) throw RangeError(\"Illegal char code: \" + c);\n    return c;\n  };\n  /**\r\n   * Asserts an UTF8 code point.\r\n   * @param {number} cp UTF8 code point\r\n   * @returns {number} Valid code point\r\n   * @throws {TypeError} If the code point is invalid\r\n   * @throws {RangeError} If the code point is out of range\r\n   * @expose\r\n   */\n\n\n  utfx.assertCodePoint = function (cp) {\n    if (typeof cp !== 'number' || cp !== cp) throw TypeError(\"Illegal code point: \" + typeof cp);\n    if (cp < 0 || cp > utfx.MAX_CODEPOINT) throw RangeError(\"Illegal code point: \" + cp);\n    return cp;\n  };\n  /**\r\n   * A polyfill for `String.fromCodePoint`.\r\n   * @param {...number} var_args Code points\r\n   * @returns {string} JavaScript string\r\n   * @throws {TypeError} If arguments are invalid or a code point is invalid\r\n   * @throws {RangeError} If a code point is out of range\r\n   * @expose\r\n   */\n\n\n  utfx.fromCodePoint = function (var_args) {\n    var sd,\n        i = 0,\n        cps = arguments,\n        k = cps.length;\n    utfx.UTF8toUTF16(function () {\n      return i < k ? utfx.assertCodePoint(cps[i++]) : null;\n    }, sd = utfx.stringDestination());\n    return sd();\n  };\n  /**\r\n   * A polyfill for `String#codePointAt`.\r\n   * @param {string} s JavaScript string\r\n   * @param {number} i Index\r\n   * @returns {number|undefined} Code point or `undefined` if `i` is out of range\r\n   * @throws {TypeError} If arguments are invalid\r\n   * @expose\r\n   */\n\n\n  utfx.codePointAt = function (s, i) {\n    if (typeof s !== 'string' && !(s && s instanceof String) || typeof i !== 'number') throw TypeError(\"Illegal arguments: \" + typeof s + \", \" + typeof i);\n    var k, cp;\n    if (i < 0 || i >= (k = s.length)) return;\n    utfx.UTF16toUTF8(function () {\n      return typeof cp === 'undefined' && i < k ? s.charCodeAt(i++) : null;\n    }, function (icp) {\n      cp = icp;\n    });\n    return cp;\n  };\n  /**\r\n   * Installs utfx as a polyfill for `String.fromCodePoint` and `String#codePointAt` if not implemented.\r\n   * @param {boolean=} override Overrides an existing implementation if `true`, defaults to `false`\r\n   * @returns {!Object.<string,*>} utfx namespace\r\n   * @expose\r\n   */\n\n\n  utfx.polyfill = function (override) {\n    if (!String['fromCodePoint'] || override) String['fromCodePoint'] = utfx.fromCodePoint;\n    if (!String.prototype['codePointAt'] || override) String.prototype['codePointAt'] = function (i) {\n      return utfx.codePointAt(this, i);\n    };\n    return utfx;\n  };\n\n  return utfx;\n});","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/utfx/dist/utfx.js"],"names":["global","factory","define","require","module","Array","isArray","v","Object","prototype","toString","call","utfx","MAX_CODEPOINT","encodeUTF8","src","dst","cp","decodeUTF8","a","b","c","d","fail","slice","indexOf","err","Error","name","RangeError","UTF16toUTF8","c1","c2","UTF8toUTF16","encodeUTF16toUTF8","decodeUTF8toUTF16","calculateCodePoint","calculateUTF8","l","calculateUTF16asUTF8","n","stringFromCharCode","String","fromCharCode","arraySource","TypeError","i","length","arrayDestination","push","bind","stringSource","s","charCodeAt","stringDestination","cs","ps","arguments","join","apply","assertCharCode","assertCodePoint","fromCodePoint","var_args","sd","cps","k","codePointAt","icp","polyfill","override"],"mappings":"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","sourcesContent":["/*\r\n Copyright 2014 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license utfx (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/utfx for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define['amd'])\r\n        define(factory);\r\n    /* CommonJS */ else if (typeof require === \"function\" && typeof module === 'object' && module && module['exports'])\r\n        module['exports'] = factory();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"utfx\"] = factory();\r\n\r\n})(this, function() {\r\n    \"use strict\";\r\n\r\n    if (!Array.isArray)\r\n        Array.isArray = function (v) {\r\n            return Object.prototype.toString.call(v) === \"[object Array]\";\r\n        };\r\n\r\n    /**\r\n     * utfx namespace.\r\n     * @exports utfx\r\n     * @type {!Object.<string,*>}\r\n     */\r\n    var utfx = {};\r\n\r\n    /**\r\n     * Maximum valid code point.\r\n     * @type {number}\r\n     * @const\r\n     * @expose\r\n     */\r\n    utfx.MAX_CODEPOINT = 0x10FFFF;\r\n\r\n    /**\r\n     * Encodes UTF8 code points to UTF8 bytes.\r\n     * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n     *  respectively `null` if there are no more code points left or a single numeric code point.\r\n     * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\r\n     * @expose\r\n     */\r\n    utfx.encodeUTF8 = function(src, dst) {\r\n        var cp = null;\r\n        if (typeof src === 'number')\r\n            cp = src,\r\n            src = function() { return null; };\r\n        while (cp !== null || (cp = src()) !== null) {\r\n            if (cp < 0x80)\r\n                dst(cp&0x7F);\r\n            else if (cp < 0x800)\r\n                dst(((cp>>6)&0x1F)|0xC0),\r\n                dst((cp&0x3F)|0x80);\r\n            else if (cp < 0x10000)\r\n                dst(((cp>>12)&0x0F)|0xE0),\r\n                dst(((cp>>6)&0x3F)|0x80),\r\n                dst((cp&0x3F)|0x80);\r\n            else\r\n                dst(((cp>>18)&0x07)|0xF0),\r\n                dst(((cp>>12)&0x3F)|0x80),\r\n                dst(((cp>>6)&0x3F)|0x80),\r\n                dst((cp&0x3F)|0x80);\r\n            cp = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Decodes UTF8 bytes to UTF8 code points.\r\n     * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n     *  are no more bytes left.\r\n     * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.\r\n     * @throws {RangeError} If a starting byte is invalid in UTF8\r\n     * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\r\n     *  remaining bytes.\r\n     * @expose\r\n     */\r\n    utfx.decodeUTF8 = function(src, dst) {\r\n        var a, b, c, d, fail = function(b) {\r\n            b = b.slice(0, b.indexOf(null));\r\n            var err = Error(b.toString());\r\n            err.name = \"TruncatedError\";\r\n            err['bytes'] = b;\r\n            throw err;\r\n        };\r\n        while ((a = src()) !== null) {\r\n            if ((a&0x80) === 0)\r\n                dst(a);\r\n            else if ((a&0xE0) === 0xC0)\r\n                ((b = src()) === null) && fail([a, b]),\r\n                dst(((a&0x1F)<<6) | (b&0x3F));\r\n            else if ((a&0xF0) === 0xE0)\r\n                ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),\r\n                dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));\r\n            else if ((a&0xF8) === 0xF0)\r\n                ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),\r\n                dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));\r\n            else throw RangeError(\"Illegal starting byte: \"+a);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Converts UTF16 characters to UTF8 code points.\r\n     * @param {!function():number|null} src Characters source as a function returning the next char code respectively\r\n     *  `null` if there are no more characters left.\r\n     * @param {!function(number)} dst Code points destination as a function successively called with each converted code\r\n     *  point.\r\n     * @expose\r\n     */\r\n    utfx.UTF16toUTF8 = function(src, dst) {\r\n        var c1, c2 = null;\r\n        while (true) {\r\n            if ((c1 = c2 !== null ? c2 : src()) === null)\r\n                break;\r\n            if (c1 >= 0xD800 && c1 <= 0xDFFF) {\r\n                if ((c2 = src()) !== null) {\r\n                    if (c2 >= 0xDC00 && c2 <= 0xDFFF) {\r\n                        dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);\r\n                        c2 = null; continue;\r\n                    }\r\n                }\r\n            }\r\n            dst(c1);\r\n        }\r\n        if (c2 !== null) dst(c2);\r\n    };\r\n\r\n    /**\r\n     * Converts UTF8 code points to UTF16 characters.\r\n     * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n     *  respectively `null` if there are no more code points left or a single numeric code point.\r\n     * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n     * @throws {RangeError} If a code point is out of range\r\n     * @expose\r\n     */\r\n    utfx.UTF8toUTF16 = function(src, dst) {\r\n        var cp = null;\r\n        if (typeof src === 'number')\r\n            cp = src, src = function() { return null; };\r\n        while (cp !== null || (cp = src()) !== null) {\r\n            if (cp <= 0xFFFF)\r\n                dst(cp);\r\n            else\r\n                cp -= 0x10000,\r\n                dst((cp>>10)+0xD800),\r\n                dst((cp%0x400)+0xDC00);\r\n            cp = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Converts and encodes UTF16 characters to UTF8 bytes.\r\n     * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\r\n     *  if there are no more characters left.\r\n     * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\r\n     * @expose\r\n     */\r\n    utfx.encodeUTF16toUTF8 = function(src, dst) {\r\n        utfx.UTF16toUTF8(src, function(cp) {\r\n            utfx.encodeUTF8(cp, dst);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Decodes and converts UTF8 bytes to UTF16 characters.\r\n     * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n     *  are no more bytes left.\r\n     * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n     * @throws {RangeError} If a starting byte is invalid in UTF8\r\n     * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\r\n     * @expose\r\n     */\r\n    utfx.decodeUTF8toUTF16 = function(src, dst) {\r\n        utfx.decodeUTF8(src, function(cp) {\r\n            utfx.UTF8toUTF16(cp, dst);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Calculates the byte length of an UTF8 code point.\r\n     * @param {number} cp UTF8 code point\r\n     * @returns {number} Byte length\r\n     * @expose\r\n     */\r\n    utfx.calculateCodePoint = function(cp) {\r\n        return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;\r\n    };\r\n\r\n    /**\r\n     * Calculates the number of UTF8 bytes required to store UTF8 code points.\r\n     * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively\r\n     *  `null` if there are no more code points left.\r\n     * @returns {number} The number of UTF8 bytes required\r\n     * @expose\r\n     */\r\n    utfx.calculateUTF8 = function(src) {\r\n        var cp, l=0;\r\n        while ((cp = src()) !== null)\r\n            l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;\r\n        return l;\r\n    };\r\n\r\n    /**\r\n     * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\r\n     * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively\r\n     *  `null` if there are no more characters left.\r\n     * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\r\n     * @expose\r\n     */\r\n    utfx.calculateUTF16asUTF8 = function(src) {\r\n        var n=0, l=0;\r\n        utfx.UTF16toUTF8(src, function(cp) {\r\n            ++n; l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;\r\n        });\r\n        return [n,l];\r\n    };\r\n\r\n    /**\r\n     * String.fromCharCode reference for compile time renaming.\r\n     * @type {!function(...[number]):string}\r\n     * @inner\r\n     */\r\n    var stringFromCharCode = String.fromCharCode;\r\n\r\n    /**\r\n     * Creates a source function for an array.\r\n     * @param {!Array.<number>} a Array to read from\r\n     * @returns {!function():number|null} Source function returning the next value respectively `null` if there are no\r\n     *  more values left.\r\n     * @throws {TypeError} If the argument is invalid\r\n     * @expose\r\n     */\r\n    utfx.arraySource = function(a) {\r\n        if (!Array.isArray(a))\r\n            throw TypeError(\"Illegal argument: \"+(typeof a));\r\n        var i=0; return function() {\r\n            return i >= a.length ? null : a[i++];\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Creates a destination function for an array.\r\n     * @param {!Array.<number>} a Array to write to\r\n     * @returns {!function(number)} Destination function successively called with the next value.\r\n     * @throws {TypeError} If the argument is invalid\r\n     * @expose\r\n     */\r\n    utfx.arrayDestination = function(a) {\r\n        if (!Array.isArray(a))\r\n            throw TypeError(\"Illegal argument: \"+(typeof a));\r\n        return Array.prototype.push.bind(a);\r\n    };\r\n\r\n    /**\r\n     * Creates a source function for a string.\r\n     * @param {string} s String to read from\r\n     * @returns {!function():number|null} Source function returning the next char code respectively `null` if there are\r\n     *  no more characters left.\r\n     * @throws {TypeError} If the argument is invalid\r\n     * @expose\r\n     */\r\n    utfx.stringSource = function(s) {\r\n        if (typeof s !== 'string')\r\n            throw TypeError(\"Illegal argument: \"+(typeof s));\r\n        var i=0; return function() {\r\n            return i >= s.length ? null : s.charCodeAt(i++);\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Creates a destination function for a string.\r\n     * @returns {function(number=):undefined|string} Destination function successively called with the next char code.\r\n     *  Returns the final string when called without arguments.\r\n     * @expose\r\n     */\r\n    utfx.stringDestination = function() {\r\n        var cs = [], ps = []; return function() {\r\n            if (arguments.length === 0)\r\n                return ps.join('')+stringFromCharCode.apply(String, cs);\r\n            if (cs.length + arguments.length > 1024)\r\n                ps.push(stringFromCharCode.apply(String, cs)),\r\n                    cs.length = 0;\r\n            Array.prototype.push.apply(cs, arguments);\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Asserts an UTF16 char code.\r\n     * @param {number} c UTF16 char code\r\n     * @returns {number} Valid char code\r\n     * @throws {TypeError} If the char code is invalid\r\n     * @throws {RangeError} If the char code is out of range\r\n     * @expose\r\n     */\r\n    utfx.assertCharCode = function(c) {\r\n        if (typeof c !== 'number' || c !== c)\r\n            throw TypeError(\"Illegal char code: \"+(typeof c));\r\n        if (c < 0 || c > 0xFFFF)\r\n            throw RangeError(\"Illegal char code: \"+c);\r\n        return c;\r\n    };\r\n\r\n    /**\r\n     * Asserts an UTF8 code point.\r\n     * @param {number} cp UTF8 code point\r\n     * @returns {number} Valid code point\r\n     * @throws {TypeError} If the code point is invalid\r\n     * @throws {RangeError} If the code point is out of range\r\n     * @expose\r\n     */\r\n    utfx.assertCodePoint = function(cp) {\r\n        if (typeof cp !== 'number' || cp !== cp)\r\n            throw TypeError(\"Illegal code point: \"+(typeof cp));\r\n        if (cp < 0 || cp > utfx.MAX_CODEPOINT)\r\n            throw RangeError(\"Illegal code point: \"+cp);\r\n        return cp;\r\n    };\r\n\r\n    /**\r\n     * A polyfill for `String.fromCodePoint`.\r\n     * @param {...number} var_args Code points\r\n     * @returns {string} JavaScript string\r\n     * @throws {TypeError} If arguments are invalid or a code point is invalid\r\n     * @throws {RangeError} If a code point is out of range\r\n     * @expose\r\n     */\r\n    utfx.fromCodePoint = function(var_args) {\r\n        var sd, i=0, cps=arguments, k=cps.length;\r\n        utfx.UTF8toUTF16(function() {\r\n            return i < k ? utfx.assertCodePoint(cps[i++]) : null;\r\n        }, sd = utfx.stringDestination());\r\n        return sd();\r\n    };\r\n\r\n    /**\r\n     * A polyfill for `String#codePointAt`.\r\n     * @param {string} s JavaScript string\r\n     * @param {number} i Index\r\n     * @returns {number|undefined} Code point or `undefined` if `i` is out of range\r\n     * @throws {TypeError} If arguments are invalid\r\n     * @expose\r\n     */\r\n    utfx.codePointAt = function(s, i) {\r\n        if ((typeof s !== 'string' && !(s && s instanceof String)) || typeof i !== 'number')\r\n            throw TypeError(\"Illegal arguments: \"+(typeof s)+\", \"+(typeof i));\r\n        var k, cp;\r\n        if (i < 0 || i >= (k=s.length))\r\n            return;\r\n        utfx.UTF16toUTF8(function() {\r\n            return typeof cp === 'undefined' && i < k ? s.charCodeAt(i++) : null;\r\n        }, function(icp) {\r\n            cp = icp;\r\n        });\r\n        return cp;\r\n    };\r\n\r\n    /**\r\n     * Installs utfx as a polyfill for `String.fromCodePoint` and `String#codePointAt` if not implemented.\r\n     * @param {boolean=} override Overrides an existing implementation if `true`, defaults to `false`\r\n     * @returns {!Object.<string,*>} utfx namespace\r\n     * @expose\r\n     */\r\n    utfx.polyfill = function(override) {\r\n        if (!String['fromCodePoint'] || override)\r\n            String['fromCodePoint'] = utfx.fromCodePoint;\r\n        if (!String.prototype['codePointAt'] || override)\r\n            String.prototype['codePointAt'] = function(i) { return utfx.codePointAt(this, i); };\r\n        return utfx;\r\n    };\r\n\r\n    return utfx;\r\n\r\n});\r\n"]},"metadata":{},"sourceType":"script"}