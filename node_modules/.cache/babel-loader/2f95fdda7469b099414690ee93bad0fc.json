{"ast":null,"code":"import React from 'react';\nimport SplitContext from './SplitContext';\nimport { ERROR_UC_NO_USECONTEXT } from './constants';\nimport { getSplitSharedClient, checkHooks } from './utils';\n/**\n * 'useClient' is a custom hook that returns a client from the Split context.\n * It uses the 'useContext' hook to access the context, which is updated by\n * SplitFactory and SplitClient components in the hierarchy of components.\n *\n * @return A Split Client instance, or null if used outside the scope of SplitFactory\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#advanced-instantiate-multiple-sdk-clients}\n */\n\nconst useClient = (key, trafficType) => {\n  if (!checkHooks(ERROR_UC_NO_USECONTEXT)) return null;\n  const {\n    factory,\n    client\n  } = React.useContext(SplitContext);\n\n  if (key) {\n    return factory ? getSplitSharedClient(factory, key, trafficType) : null;\n  }\n\n  return client;\n};\n\nexport default useClient;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/useClient.js"],"names":["React","SplitContext","ERROR_UC_NO_USECONTEXT","getSplitSharedClient","checkHooks","useClient","key","trafficType","factory","client","useContext"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,sBAAT,QAAuC,aAAvC;AACA,SAASC,oBAAT,EAA+BC,UAA/B,QAAiD,SAAjD;AACA;;;;;;;;;AAQA,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,WAAN,KAAsB;AACpC,MAAI,CAACH,UAAU,CAACF,sBAAD,CAAf,EACI,OAAO,IAAP;AACJ,QAAM;AAAEM,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBT,KAAK,CAACU,UAAN,CAAiBT,YAAjB,CAA5B;;AACA,MAAIK,GAAJ,EAAS;AACL,WAAOE,OAAO,GAAGL,oBAAoB,CAACK,OAAD,EAAUF,GAAV,EAAeC,WAAf,CAAvB,GAAqD,IAAnE;AACH;;AACD,SAAOE,MAAP;AACH,CARD;;AASA,eAAeJ,SAAf","sourcesContent":["import React from 'react';\nimport SplitContext from './SplitContext';\nimport { ERROR_UC_NO_USECONTEXT } from './constants';\nimport { getSplitSharedClient, checkHooks } from './utils';\n/**\n * 'useClient' is a custom hook that returns a client from the Split context.\n * It uses the 'useContext' hook to access the context, which is updated by\n * SplitFactory and SplitClient components in the hierarchy of components.\n *\n * @return A Split Client instance, or null if used outside the scope of SplitFactory\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#advanced-instantiate-multiple-sdk-clients}\n */\nconst useClient = (key, trafficType) => {\n    if (!checkHooks(ERROR_UC_NO_USECONTEXT))\n        return null;\n    const { factory, client } = React.useContext(SplitContext);\n    if (key) {\n        return factory ? getSplitSharedClient(factory, key, trafficType) : null;\n    }\n    return client;\n};\nexport default useClient;\n"]},"metadata":{},"sourceType":"module"}