{"ast":null,"code":"import { OCCUPANCY } from '../constants';\nimport { isString } from '../../utils/lang';\n/**\n * Parses the `data` JSON string, if exists, of a given SSE error notifications.\n * HTTP errors handled by Ably (e.g., 400 due to invalid token, 401 due to expired token, 500) have the `data` property.\n * Other network and HTTP errors do not have this property.\n *\n * @param {Object} error\n * @throws {SyntaxError} if `error.data` is an invalid JSON string\n */\n\nexport function errorParser(error) {\n  if (isString(error.data)) error.parsedData = JSON.parse(error.data); // cannot assign to read only property 'data'\n\n  return error;\n}\n/**\n * Parses the `data` JSON string of a given SSE message notifications.\n * Also assigns the type OCCUPANCY, if it corresponds, so that all supported messages (e.g., SPLIT_UPDATE, CONTROL) have a type.\n *\n * @param {Object} message\n * @throws {SyntaxError} if `message.data` or `JSON.parse(message.data).data` are invalid JSON strings\n */\n\nexport function messageParser(message) {\n  var messageData = JSON.parse(message.data);\n  messageData.parsedData = JSON.parse(messageData.data); // set the event type to OCCUPANCY, to handle all events uniformely\n\n  if (messageData.name && messageData.name === '[meta]occupancy') messageData.parsedData.type = OCCUPANCY;\n  return messageData;\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/sync/SSEHandler/NotificationParser.js"],"names":["OCCUPANCY","isString","errorParser","error","data","parsedData","JSON","parse","messageParser","message","messageData","name","type"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA;;;;;;;;;AASA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACjC,MAAIF,QAAQ,CAACE,KAAK,CAACC,IAAP,CAAZ,EAA0BD,KAAK,CAACE,UAAN,GAAmBC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,IAAjB,CAAnB,CADO,CACoC;;AAErE,SAAOD,KAAP;AACD;AACD;;;;;;;;AAQA,OAAO,SAASK,aAAT,CAAuBC,OAAvB,EAAgC;AACrC,MAAIC,WAAW,GAAGJ,IAAI,CAACC,KAAL,CAAWE,OAAO,CAACL,IAAnB,CAAlB;AACAM,EAAAA,WAAW,CAACL,UAAZ,GAAyBC,IAAI,CAACC,KAAL,CAAWG,WAAW,CAACN,IAAvB,CAAzB,CAFqC,CAEkB;;AAEvD,MAAIM,WAAW,CAACC,IAAZ,IAAoBD,WAAW,CAACC,IAAZ,KAAqB,iBAA7C,EAAgED,WAAW,CAACL,UAAZ,CAAuBO,IAAvB,GAA8BZ,SAA9B;AAChE,SAAOU,WAAP;AACD","sourcesContent":["import { OCCUPANCY } from '../constants';\nimport { isString } from '../../utils/lang';\n/**\n * Parses the `data` JSON string, if exists, of a given SSE error notifications.\n * HTTP errors handled by Ably (e.g., 400 due to invalid token, 401 due to expired token, 500) have the `data` property.\n * Other network and HTTP errors do not have this property.\n *\n * @param {Object} error\n * @throws {SyntaxError} if `error.data` is an invalid JSON string\n */\n\nexport function errorParser(error) {\n  if (isString(error.data)) error.parsedData = JSON.parse(error.data); // cannot assign to read only property 'data'\n\n  return error;\n}\n/**\n * Parses the `data` JSON string of a given SSE message notifications.\n * Also assigns the type OCCUPANCY, if it corresponds, so that all supported messages (e.g., SPLIT_UPDATE, CONTROL) have a type.\n *\n * @param {Object} message\n * @throws {SyntaxError} if `message.data` or `JSON.parse(message.data).data` are invalid JSON strings\n */\n\nexport function messageParser(message) {\n  var messageData = JSON.parse(message.data);\n  messageData.parsedData = JSON.parse(messageData.data); // set the event type to OCCUPANCY, to handle all events uniformely\n\n  if (messageData.name && messageData.name === '[meta]occupancy') messageData.parsedData.type = OCCUPANCY;\n  return messageData;\n}"]},"metadata":{},"sourceType":"module"}