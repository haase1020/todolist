{"ast":null,"code":"import objectAssign from 'object-assign';\nimport ClientFactory from '../client';\nimport OfflineProducerFactory from '../producer/offline';\nimport { releaseApiKey } from '../utils/inputValidation'; //\n// Create SDK instance for offline mode.\n//\n\nfunction SplitFactoryOffline(context, sharedTrackers) {\n  var sharedInstance = !sharedTrackers;\n  var readiness = context.get(context.constants.READINESS);\n  var storage = context.get(context.constants.STORAGE);\n  var statusManager = context.get(context.constants.STATUS_MANAGER); // In LOCALHOST mode, shared clients are ready in the next event cycle than created\n\n  if (sharedInstance) setTimeout(function () {\n    readiness.gate.emit(readiness.gate.SDK_READY);\n  }, 0); // Producer\n\n  var producer = sharedInstance ? undefined : OfflineProducerFactory(context); // Start background task for flag updates\n\n  producer && producer.start();\n  var api = objectAssign( // Proto linkage of the EventEmitter to prevent any change\n  Object.create(statusManager), // GetTreatment/s\n  ClientFactory(context), // Utilities\n  {\n    // Destroy instance. Async so we respect the online api.\n    destroy: function destroy() {\n      // Stop background jobs\n      producer && producer.stop(); // Cleanup event listeners\n\n      readiness.destroy(); // Cleanup storage\n\n      storage.destroy && storage.destroy(); // Mark the factory as destroyed.\n\n      context.put(context.constants.DESTROYED, true);\n      !sharedInstance && releaseApiKey();\n      return Promise.resolve();\n    }\n  });\n  return {\n    api: api,\n    metricCollectors: false // We won't collect any metrics on localhost mode.\n\n  };\n}\n\nexport default SplitFactoryOffline;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/factory/offline.js"],"names":["objectAssign","ClientFactory","OfflineProducerFactory","releaseApiKey","SplitFactoryOffline","context","sharedTrackers","sharedInstance","readiness","get","constants","READINESS","storage","STORAGE","statusManager","STATUS_MANAGER","setTimeout","gate","emit","SDK_READY","producer","undefined","start","api","Object","create","destroy","stop","put","DESTROYED","Promise","resolve","metricCollectors"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,aAAP,MAA0B,WAA1B;AACA,OAAOC,sBAAP,MAAmC,qBAAnC;AACA,SAASC,aAAT,QAA8B,0BAA9B,C,CAA0D;AAC1D;AACA;;AAEA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,cAAtC,EAAsD;AACpD,MAAIC,cAAc,GAAG,CAACD,cAAtB;AACA,MAAIE,SAAS,GAAGH,OAAO,CAACI,GAAR,CAAYJ,OAAO,CAACK,SAAR,CAAkBC,SAA9B,CAAhB;AACA,MAAIC,OAAO,GAAGP,OAAO,CAACI,GAAR,CAAYJ,OAAO,CAACK,SAAR,CAAkBG,OAA9B,CAAd;AACA,MAAIC,aAAa,GAAGT,OAAO,CAACI,GAAR,CAAYJ,OAAO,CAACK,SAAR,CAAkBK,cAA9B,CAApB,CAJoD,CAIe;;AAEnE,MAAIR,cAAJ,EAAoBS,UAAU,CAAC,YAAY;AACzCR,IAAAA,SAAS,CAACS,IAAV,CAAeC,IAAf,CAAoBV,SAAS,CAACS,IAAV,CAAeE,SAAnC;AACD,GAF6B,EAE3B,CAF2B,CAAV,CANgC,CAQ7C;;AAEP,MAAIC,QAAQ,GAAGb,cAAc,GAAGc,SAAH,GAAenB,sBAAsB,CAACG,OAAD,CAAlE,CAVoD,CAUyB;;AAE7Ee,EAAAA,QAAQ,IAAIA,QAAQ,CAACE,KAAT,EAAZ;AACA,MAAIC,GAAG,GAAGvB,YAAY,EAAE;AACxBwB,EAAAA,MAAM,CAACC,MAAP,CAAcX,aAAd,CADsB,EACQ;AAC9Bb,EAAAA,aAAa,CAACI,OAAD,CAFS,EAEE;AACxB;AACE;AACAqB,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B;AACAN,MAAAA,QAAQ,IAAIA,QAAQ,CAACO,IAAT,EAAZ,CAF0B,CAEG;;AAE7BnB,MAAAA,SAAS,CAACkB,OAAV,GAJ0B,CAIL;;AAErBd,MAAAA,OAAO,CAACc,OAAR,IAAmBd,OAAO,CAACc,OAAR,EAAnB,CAN0B,CAMY;;AAEtCrB,MAAAA,OAAO,CAACuB,GAAR,CAAYvB,OAAO,CAACK,SAAR,CAAkBmB,SAA9B,EAAyC,IAAzC;AACA,OAACtB,cAAD,IAAmBJ,aAAa,EAAhC;AACA,aAAO2B,OAAO,CAACC,OAAR,EAAP;AACD;AAbH,GAHsB,CAAtB;AAkBA,SAAO;AACLR,IAAAA,GAAG,EAAEA,GADA;AAELS,IAAAA,gBAAgB,EAAE,KAFb,CAEmB;;AAFnB,GAAP;AAKD;;AAED,eAAe5B,mBAAf","sourcesContent":["import objectAssign from 'object-assign';\nimport ClientFactory from '../client';\nimport OfflineProducerFactory from '../producer/offline';\nimport { releaseApiKey } from '../utils/inputValidation'; //\n// Create SDK instance for offline mode.\n//\n\nfunction SplitFactoryOffline(context, sharedTrackers) {\n  var sharedInstance = !sharedTrackers;\n  var readiness = context.get(context.constants.READINESS);\n  var storage = context.get(context.constants.STORAGE);\n  var statusManager = context.get(context.constants.STATUS_MANAGER); // In LOCALHOST mode, shared clients are ready in the next event cycle than created\n\n  if (sharedInstance) setTimeout(function () {\n    readiness.gate.emit(readiness.gate.SDK_READY);\n  }, 0); // Producer\n\n  var producer = sharedInstance ? undefined : OfflineProducerFactory(context); // Start background task for flag updates\n\n  producer && producer.start();\n  var api = objectAssign( // Proto linkage of the EventEmitter to prevent any change\n  Object.create(statusManager), // GetTreatment/s\n  ClientFactory(context), // Utilities\n  {\n    // Destroy instance. Async so we respect the online api.\n    destroy: function destroy() {\n      // Stop background jobs\n      producer && producer.stop(); // Cleanup event listeners\n\n      readiness.destroy(); // Cleanup storage\n\n      storage.destroy && storage.destroy(); // Mark the factory as destroyed.\n\n      context.put(context.constants.DESTROYED, true);\n      !sharedInstance && releaseApiKey();\n      return Promise.resolve();\n    }\n  });\n  return {\n    api: api,\n    metricCollectors: false // We won't collect any metrics on localhost mode.\n\n  };\n}\n\nexport default SplitFactoryOffline;"]},"metadata":{},"sourceType":"module"}