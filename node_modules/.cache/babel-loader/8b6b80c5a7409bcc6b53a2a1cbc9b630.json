{"ast":null,"code":"import { isString } from '../lang';\nimport thenable from '../promise/thenable';\nimport { LOCALHOST_MODE } from '../constants';\nimport logFactory from '../logger';\nvar log = logFactory('');\nvar CAPITAL_LETTERS_REGEX = /[A-Z]/;\nexport function validateTrafficType(maybeTT, method) {\n  if (maybeTT == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined traffic_type_name, traffic_type_name must be a non-empty string.\"));\n  } else if (!isString(maybeTT)) {\n    log.error(\"\".concat(method, \": you passed an invalid traffic_type_name, traffic_type_name must be a non-empty string.\"));\n  } else {\n    if (maybeTT.length === 0) {\n      log.error(\"\".concat(method, \": you passed an empty traffic_type_name, traffic_type_name must be a non-empty string.\"));\n    } else {\n      if (CAPITAL_LETTERS_REGEX.test(maybeTT)) {\n        log.warn(\"\".concat(method, \": traffic_type_name should be all lowercase - converting string to lowercase.\"));\n        maybeTT = maybeTT.toLowerCase();\n      }\n\n      return maybeTT;\n    }\n  }\n\n  return false;\n}\n\nfunction logTTExistanceWarning(method, ttName) {\n  log.warn(\"\".concat(method, \": Traffic Type \").concat(ttName, \" does not have any corresponding Splits in this environment, make sure you're tracking your events to a valid traffic type defined in the Split console.\"));\n}\n/**\n * Separated from the previous method since on some cases it'll be async.\n */\n\n\nexport function validateTrafficTypeExistance(maybeTT, context, method) {\n  var isReady = context.get(context.constants.READY, true);\n  var settings = context.get(context.constants.SETTINGS);\n  var splitsStorage = context.get(context.constants.STORAGE).splits; // If not ready or in localhost mode, we won't run the validation\n\n  if (!isReady || settings.mode === LOCALHOST_MODE) return true;\n  var res = splitsStorage.trafficTypeExists(maybeTT);\n\n  if (thenable(res)) {\n    res.then(function (isValid) {\n      if (!isValid) logTTExistanceWarning(method, maybeTT);\n      return isValid; // propagate result\n    });\n  } else {\n    if (!res) logTTExistanceWarning(method, maybeTT);\n  }\n\n  return res;\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/inputValidation/trafficType.js"],"names":["isString","thenable","LOCALHOST_MODE","logFactory","log","CAPITAL_LETTERS_REGEX","validateTrafficType","maybeTT","method","undefined","error","concat","length","test","warn","toLowerCase","logTTExistanceWarning","ttName","validateTrafficTypeExistance","context","isReady","get","constants","READY","settings","SETTINGS","splitsStorage","STORAGE","splits","mode","res","trafficTypeExists","then","isValid"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,EAAD,CAApB;AACA,IAAIE,qBAAqB,GAAG,OAA5B;AACA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,MAAtC,EAA8C;AACnD,MAAID,OAAO,IAAIE,SAAf,EAA0B;AACxB;AACAL,IAAAA,GAAG,CAACM,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,mGAAlB,CAAV;AACD,GAHD,MAGO,IAAI,CAACR,QAAQ,CAACO,OAAD,CAAb,EAAwB;AAC7BH,IAAAA,GAAG,CAACM,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,0FAAlB,CAAV;AACD,GAFM,MAEA;AACL,QAAID,OAAO,CAACK,MAAR,KAAmB,CAAvB,EAA0B;AACxBR,MAAAA,GAAG,CAACM,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,wFAAlB,CAAV;AACD,KAFD,MAEO;AACL,UAAIH,qBAAqB,CAACQ,IAAtB,CAA2BN,OAA3B,CAAJ,EAAyC;AACvCH,QAAAA,GAAG,CAACU,IAAJ,CAAS,GAAGH,MAAH,CAAUH,MAAV,EAAkB,+EAAlB,CAAT;AACAD,QAAAA,OAAO,GAAGA,OAAO,CAACQ,WAAR,EAAV;AACD;;AAED,aAAOR,OAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD;;AAED,SAASS,qBAAT,CAA+BR,MAA/B,EAAuCS,MAAvC,EAA+C;AAC7Cb,EAAAA,GAAG,CAACU,IAAJ,CAAS,GAAGH,MAAH,CAAUH,MAAV,EAAkB,iBAAlB,EAAqCG,MAArC,CAA4CM,MAA5C,EAAoD,0JAApD,CAAT;AACD;AACD;;;;;AAKA,OAAO,SAASC,4BAAT,CAAsCX,OAAtC,EAA+CY,OAA/C,EAAwDX,MAAxD,EAAgE;AACrE,MAAIY,OAAO,GAAGD,OAAO,CAACE,GAAR,CAAYF,OAAO,CAACG,SAAR,CAAkBC,KAA9B,EAAqC,IAArC,CAAd;AACA,MAAIC,QAAQ,GAAGL,OAAO,CAACE,GAAR,CAAYF,OAAO,CAACG,SAAR,CAAkBG,QAA9B,CAAf;AACA,MAAIC,aAAa,GAAGP,OAAO,CAACE,GAAR,CAAYF,OAAO,CAACG,SAAR,CAAkBK,OAA9B,EAAuCC,MAA3D,CAHqE,CAGF;;AAEnE,MAAI,CAACR,OAAD,IAAYI,QAAQ,CAACK,IAAT,KAAkB3B,cAAlC,EAAkD,OAAO,IAAP;AAClD,MAAI4B,GAAG,GAAGJ,aAAa,CAACK,iBAAd,CAAgCxB,OAAhC,CAAV;;AAEA,MAAIN,QAAQ,CAAC6B,GAAD,CAAZ,EAAmB;AACjBA,IAAAA,GAAG,CAACE,IAAJ,CAAS,UAAUC,OAAV,EAAmB;AAC1B,UAAI,CAACA,OAAL,EAAcjB,qBAAqB,CAACR,MAAD,EAASD,OAAT,CAArB;AACd,aAAO0B,OAAP,CAF0B,CAEV;AACjB,KAHD;AAID,GALD,MAKO;AACL,QAAI,CAACH,GAAL,EAAUd,qBAAqB,CAACR,MAAD,EAASD,OAAT,CAArB;AACX;;AAED,SAAOuB,GAAP;AACD","sourcesContent":["import { isString } from '../lang';\nimport thenable from '../promise/thenable';\nimport { LOCALHOST_MODE } from '../constants';\nimport logFactory from '../logger';\nvar log = logFactory('');\nvar CAPITAL_LETTERS_REGEX = /[A-Z]/;\nexport function validateTrafficType(maybeTT, method) {\n  if (maybeTT == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined traffic_type_name, traffic_type_name must be a non-empty string.\"));\n  } else if (!isString(maybeTT)) {\n    log.error(\"\".concat(method, \": you passed an invalid traffic_type_name, traffic_type_name must be a non-empty string.\"));\n  } else {\n    if (maybeTT.length === 0) {\n      log.error(\"\".concat(method, \": you passed an empty traffic_type_name, traffic_type_name must be a non-empty string.\"));\n    } else {\n      if (CAPITAL_LETTERS_REGEX.test(maybeTT)) {\n        log.warn(\"\".concat(method, \": traffic_type_name should be all lowercase - converting string to lowercase.\"));\n        maybeTT = maybeTT.toLowerCase();\n      }\n\n      return maybeTT;\n    }\n  }\n\n  return false;\n}\n\nfunction logTTExistanceWarning(method, ttName) {\n  log.warn(\"\".concat(method, \": Traffic Type \").concat(ttName, \" does not have any corresponding Splits in this environment, make sure you're tracking your events to a valid traffic type defined in the Split console.\"));\n}\n/**\n * Separated from the previous method since on some cases it'll be async.\n */\n\n\nexport function validateTrafficTypeExistance(maybeTT, context, method) {\n  var isReady = context.get(context.constants.READY, true);\n  var settings = context.get(context.constants.SETTINGS);\n  var splitsStorage = context.get(context.constants.STORAGE).splits; // If not ready or in localhost mode, we won't run the validation\n\n  if (!isReady || settings.mode === LOCALHOST_MODE) return true;\n  var res = splitsStorage.trafficTypeExists(maybeTT);\n\n  if (thenable(res)) {\n    res.then(function (isValid) {\n      if (!isValid) logTTExistanceWarning(method, maybeTT);\n      return isValid; // propagate result\n    });\n  } else {\n    if (!res) logTTExistanceWarning(method, maybeTT);\n  }\n\n  return res;\n}"]},"metadata":{},"sourceType":"module"}