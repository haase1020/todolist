{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\n/**\n * Checks if the target string starts with the sub string.\n */\n\nexport function startsWith(target, sub) {\n  if (!(isString(target) && isString(sub))) {\n    return false;\n  }\n\n  return target.slice(0, sub.length) === sub;\n}\n/**\n * Checks if the target string ends with the sub string.\n */\n\nexport function endsWith(target, sub) {\n  var caseInsensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!(isString(target) && isString(sub))) {\n    return false;\n  }\n\n  if (caseInsensitive) {\n    target = target.toLowerCase();\n    sub = sub.toLowerCase();\n  }\n\n  return target.slice(target.length - sub.length) === sub;\n}\n/**\n * Safely retrieve the specified prop from obj. If we can't retrieve\n * that property value, we return the default value.\n */\n\nexport function get(obj, prop, val) {\n  var res = val;\n\n  try {\n    // No risks nor lots of checks.\n    var pathPieces = prop.split('.');\n    var partial = obj;\n    pathPieces.forEach(function (pathPiece) {\n      return partial = partial[pathPiece];\n    });\n    if (typeof partial !== 'undefined') res = partial;\n  } catch (e) {// noop\n  }\n\n  return res;\n}\n/**\n * Evaluates iteratee for each element of the source array. Returns the index of the first element\n * for which iteratee returns truthy. If no element is found or there's an issue with the params it returns -1.\n */\n\nexport function findIndex(source, iteratee) {\n  if (Array.isArray(source) && typeof iteratee === 'function') {\n    for (var i = 0; i < source.length; i++) {\n      if (iteratee(source[i], i, source) === true) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n/**\n * Loops through a source collection (an object or an array) running iteratee\n * against each element. It returns the first element for which iteratee returned\n * a truthy value and stops the loop.\n * Iteratee receives three arguments (element, key/index, collection)\n */\n\nexport function find(source, iteratee) {\n  var res;\n\n  if (isObject(source)) {\n    var keys = Object.keys(source);\n\n    for (var i = 0; i < keys.length && !res; i++) {\n      var key = keys[i];\n      var iterateeResult = iteratee(source[key], key, source);\n      if (iterateeResult) res = source[key];\n    }\n  } else if (Array.isArray(source)) {\n    for (var _i = 0; _i < source.length && !res; _i++) {\n      var _iterateeResult = iteratee(source[_i], _i, source);\n\n      if (_iterateeResult) res = source[_i];\n    }\n  }\n\n  return res;\n}\n/**\n * Checks if a given value is a string.\n */\n\nexport function isString(val) {\n  return typeof val === 'string' || val instanceof String;\n}\n/**\n * Checks if a given value is a finite value of number type or Number object.\n * Unlike `Number.isFinite`, it also tests Number object instances.\n * Unlike global `isFinite`, it returns false if the value is not a number or Number object instance.\n * @TODO remove `isFinite` once `Number.isFinite` is fully supported by targets\n */\n\nexport function numberIsFinite(val) {\n  if (val instanceof Number) val = val.valueOf(); // eslint-disable-next-line compat/compat\n\n  if (typeof val === 'number') return Number.isFinite ? Number.isFinite(val) : isFinite(val);\n  return false;\n}\n/**\n * Checks if a given value is a NaN value of number type or Number object.\n * Unlike `Number.isNaN`, it also tests Number object instances.\n * Unlike global `isNan`, it returns false if the value is not a number or Number object instance.\n */\n\nexport function numberIsNaN(val) {\n  if (val instanceof Number) val = val.valueOf(); // @TODO replace with `Number.isNaN` once it is fully supported by targets\n  // eslint-disable-next-line eqeqeq\n\n  return val !== val;\n}\n/**\n * Checks if a given value is an integer value of number type or Number object.\n * Unlike `Number.isInteger`, it also tests Number object instances.\n * @TODO remove shim once `Number.isInteger` is fully supported by targets\n */\n\nexport function numberIsInteger(val) {\n  if (val instanceof Number) val = val.valueOf(); // eslint-disable-next-line compat/compat\n\n  if (typeof val === 'number') return Number.isInteger ? Number.isInteger(val) : isFinite(val) && Math.floor(val) === val;\n  return false;\n}\nvar uniqueIdCounter = -1;\n/**\n * Returns a number to be used as ID, which will be unique.\n */\n\nexport function uniqueId() {\n  return uniqueIdCounter++;\n}\n/**\n * Validates if a value is an object.\n */\n\nexport function isObject(obj) {\n  return obj && _typeof(obj) === 'object' && obj.constructor === Object;\n}\n/**\n * There are some assumptions here. It's for internal use and we don't need verbose errors\n * or to ensure the data types or whatever. Parameters should always be correct (at least have a target and a source, of type object).\n */\n\nexport function merge(target, source) {\n  var res = target;\n  isObject(source) && Object.keys(source).forEach(function (key) {\n    var val = source[key];\n\n    if (isObject(val)) {\n      if (res[key] && isObject(res[key])) {\n        // If both are objects, merge into a new one.\n        val = merge({}, res[key], val);\n      } else {\n        // else make a copy.\n        val = merge({}, val);\n      }\n    } // We skip undefined values.\n\n\n    if (val !== undefined) res[key] = val;\n  });\n\n  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    rest[_key - 2] = arguments[_key];\n  }\n\n  if (rest && rest.length) {\n    var nextSource = rest.splice(0, 1)[0];\n    res = merge.apply(void 0, [res, nextSource].concat(rest));\n  }\n\n  return res;\n}\n/**\n * Removes duplicate items on an array of strings.\n */\n\nexport function uniq(arr) {\n  var seen = {};\n  return arr.filter(function (item) {\n    return Object.prototype.hasOwnProperty.call(seen, item) ? false : seen[item] = true;\n  });\n}\n/**\n * Removes duplicate items on an array of objects using an optional `stringify` function as equality criteria.\n * It uses JSON.stringify as default criteria.\n */\n\nexport function unicAsStrings(arr) {\n  var stringify = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : JSON.stringify;\n  var seen = {};\n  return arr.filter(function (item) {\n    var itemString = stringify(item);\n    return Object.prototype.hasOwnProperty.call(seen, itemString) ? false : seen[itemString] = true;\n  });\n}\n/**\n * Transforms a value into it's string representation.\n */\n\nexport function toString(val) {\n  if (val == null) return '';\n  if (typeof val === 'string') return val;\n  if (Array.isArray(val)) return val.map(function (val) {\n    return isString(val) ? val : '';\n  }) + '';\n  var result = val + '';\n  return result === '0' && 1 / val === Number.NEGATIVE_INFINITY ? '-0' : result;\n}\n/**\n * Transforms a value into a number.\n * Note: We're not expecting anything fancy here. If we are at some point, add more type checks.\n */\n\nexport function toNumber(val) {\n  if (typeof val === 'number') return val;\n\n  if (isObject(val) && typeof val.valueOf === 'function') {\n    var valOf = val.valueOf();\n    val = isObject(valOf) ? valOf + '' : valOf;\n  }\n\n  if (typeof val !== 'string') {\n    return val === 0 ? val : +val;\n  } // Remove trailing whitespaces.\n\n\n  val = val.replace(/^\\s+|\\s+$/g, '');\n  return +val;\n}\n/**\n * Executes iteratee for given obj own props.\n */\n\nexport function forOwn(obj, iteratee) {\n  var keys = Object.keys(obj);\n  keys.forEach(function (key) {\n    return iteratee(obj[key], key, obj);\n  });\n  return obj;\n}\n/**\n * Parses an array into a map of different arrays, grouping by the specified prop value.\n */\n\nexport function groupBy(source, prop) {\n  var map = {};\n\n  if (Array.isArray(source) && isString(prop)) {\n    for (var i = 0; i < source.length; i++) {\n      var key = source[i][prop]; // Skip the element if the key is not a string.\n\n      if (isString(key)) {\n        if (!map[key]) map[key] = [];\n        map[key].push(source[i]);\n      }\n    }\n  }\n\n  return map;\n}\n/**\n * Returns the name of a given function.\n */\n\nexport function getFnName(fn) {\n  if (fn.name) return fn.name;\n  return (fn.toString().match(/function (.+?)\\(/) || ['', ''])[1];\n}\n/**\n * Shallow clone an object\n */\n\nexport function shallowClone(obj) {\n  var keys = Object.keys(obj);\n  var output = {};\n\n  for (var i = 0; i < keys.length; i++) {\n    output[keys[i]] = obj[keys[i]];\n  }\n\n  return output;\n}\nexport function isBoolean(val) {\n  return val === true || val === false;\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/lang/index.js"],"names":["_typeof","startsWith","target","sub","isString","slice","length","endsWith","caseInsensitive","arguments","undefined","toLowerCase","get","obj","prop","val","res","pathPieces","split","partial","forEach","pathPiece","e","findIndex","source","iteratee","Array","isArray","i","find","isObject","keys","Object","key","iterateeResult","_i","_iterateeResult","String","numberIsFinite","Number","valueOf","isFinite","numberIsNaN","numberIsInteger","isInteger","Math","floor","uniqueIdCounter","uniqueId","constructor","merge","_len","rest","_key","nextSource","splice","apply","concat","uniq","arr","seen","filter","item","prototype","hasOwnProperty","call","unicAsStrings","stringify","JSON","itemString","toString","map","result","NEGATIVE_INFINITY","toNumber","valOf","replace","forOwn","groupBy","push","getFnName","fn","name","match","shallowClone","output","isBoolean"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\n/**\n * Checks if the target string starts with the sub string.\n */\nexport function startsWith(target, sub) {\n  if (!(isString(target) && isString(sub))) {\n    return false;\n  }\n\n  return target.slice(0, sub.length) === sub;\n}\n/**\n * Checks if the target string ends with the sub string.\n */\n\nexport function endsWith(target, sub) {\n  var caseInsensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!(isString(target) && isString(sub))) {\n    return false;\n  }\n\n  if (caseInsensitive) {\n    target = target.toLowerCase();\n    sub = sub.toLowerCase();\n  }\n\n  return target.slice(target.length - sub.length) === sub;\n}\n/**\n * Safely retrieve the specified prop from obj. If we can't retrieve\n * that property value, we return the default value.\n */\n\nexport function get(obj, prop, val) {\n  var res = val;\n\n  try {\n    // No risks nor lots of checks.\n    var pathPieces = prop.split('.');\n    var partial = obj;\n    pathPieces.forEach(function (pathPiece) {\n      return partial = partial[pathPiece];\n    });\n    if (typeof partial !== 'undefined') res = partial;\n  } catch (e) {// noop\n  }\n\n  return res;\n}\n/**\n * Evaluates iteratee for each element of the source array. Returns the index of the first element\n * for which iteratee returns truthy. If no element is found or there's an issue with the params it returns -1.\n */\n\nexport function findIndex(source, iteratee) {\n  if (Array.isArray(source) && typeof iteratee === 'function') {\n    for (var i = 0; i < source.length; i++) {\n      if (iteratee(source[i], i, source) === true) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n/**\n * Loops through a source collection (an object or an array) running iteratee\n * against each element. It returns the first element for which iteratee returned\n * a truthy value and stops the loop.\n * Iteratee receives three arguments (element, key/index, collection)\n */\n\nexport function find(source, iteratee) {\n  var res;\n\n  if (isObject(source)) {\n    var keys = Object.keys(source);\n\n    for (var i = 0; i < keys.length && !res; i++) {\n      var key = keys[i];\n      var iterateeResult = iteratee(source[key], key, source);\n      if (iterateeResult) res = source[key];\n    }\n  } else if (Array.isArray(source)) {\n    for (var _i = 0; _i < source.length && !res; _i++) {\n      var _iterateeResult = iteratee(source[_i], _i, source);\n\n      if (_iterateeResult) res = source[_i];\n    }\n  }\n\n  return res;\n}\n/**\n * Checks if a given value is a string.\n */\n\nexport function isString(val) {\n  return typeof val === 'string' || val instanceof String;\n}\n/**\n * Checks if a given value is a finite value of number type or Number object.\n * Unlike `Number.isFinite`, it also tests Number object instances.\n * Unlike global `isFinite`, it returns false if the value is not a number or Number object instance.\n * @TODO remove `isFinite` once `Number.isFinite` is fully supported by targets\n */\n\nexport function numberIsFinite(val) {\n  if (val instanceof Number) val = val.valueOf(); // eslint-disable-next-line compat/compat\n\n  if (typeof val === 'number') return Number.isFinite ? Number.isFinite(val) : isFinite(val);\n  return false;\n}\n/**\n * Checks if a given value is a NaN value of number type or Number object.\n * Unlike `Number.isNaN`, it also tests Number object instances.\n * Unlike global `isNan`, it returns false if the value is not a number or Number object instance.\n */\n\nexport function numberIsNaN(val) {\n  if (val instanceof Number) val = val.valueOf(); // @TODO replace with `Number.isNaN` once it is fully supported by targets\n  // eslint-disable-next-line eqeqeq\n\n  return val !== val;\n}\n/**\n * Checks if a given value is an integer value of number type or Number object.\n * Unlike `Number.isInteger`, it also tests Number object instances.\n * @TODO remove shim once `Number.isInteger` is fully supported by targets\n */\n\nexport function numberIsInteger(val) {\n  if (val instanceof Number) val = val.valueOf(); // eslint-disable-next-line compat/compat\n\n  if (typeof val === 'number') return Number.isInteger ? Number.isInteger(val) : isFinite(val) && Math.floor(val) === val;\n  return false;\n}\nvar uniqueIdCounter = -1;\n/**\n * Returns a number to be used as ID, which will be unique.\n */\n\nexport function uniqueId() {\n  return uniqueIdCounter++;\n}\n/**\n * Validates if a value is an object.\n */\n\nexport function isObject(obj) {\n  return obj && _typeof(obj) === 'object' && obj.constructor === Object;\n}\n/**\n * There are some assumptions here. It's for internal use and we don't need verbose errors\n * or to ensure the data types or whatever. Parameters should always be correct (at least have a target and a source, of type object).\n */\n\nexport function merge(target, source) {\n  var res = target;\n  isObject(source) && Object.keys(source).forEach(function (key) {\n    var val = source[key];\n\n    if (isObject(val)) {\n      if (res[key] && isObject(res[key])) {\n        // If both are objects, merge into a new one.\n        val = merge({}, res[key], val);\n      } else {\n        // else make a copy.\n        val = merge({}, val);\n      }\n    } // We skip undefined values.\n\n\n    if (val !== undefined) res[key] = val;\n  });\n\n  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    rest[_key - 2] = arguments[_key];\n  }\n\n  if (rest && rest.length) {\n    var nextSource = rest.splice(0, 1)[0];\n    res = merge.apply(void 0, [res, nextSource].concat(rest));\n  }\n\n  return res;\n}\n/**\n * Removes duplicate items on an array of strings.\n */\n\nexport function uniq(arr) {\n  var seen = {};\n  return arr.filter(function (item) {\n    return Object.prototype.hasOwnProperty.call(seen, item) ? false : seen[item] = true;\n  });\n}\n/**\n * Removes duplicate items on an array of objects using an optional `stringify` function as equality criteria.\n * It uses JSON.stringify as default criteria.\n */\n\nexport function unicAsStrings(arr) {\n  var stringify = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : JSON.stringify;\n  var seen = {};\n  return arr.filter(function (item) {\n    var itemString = stringify(item);\n    return Object.prototype.hasOwnProperty.call(seen, itemString) ? false : seen[itemString] = true;\n  });\n}\n/**\n * Transforms a value into it's string representation.\n */\n\nexport function toString(val) {\n  if (val == null) return '';\n  if (typeof val === 'string') return val;\n  if (Array.isArray(val)) return val.map(function (val) {\n    return isString(val) ? val : '';\n  }) + '';\n  var result = val + '';\n  return result === '0' && 1 / val === Number.NEGATIVE_INFINITY ? '-0' : result;\n}\n/**\n * Transforms a value into a number.\n * Note: We're not expecting anything fancy here. If we are at some point, add more type checks.\n */\n\nexport function toNumber(val) {\n  if (typeof val === 'number') return val;\n\n  if (isObject(val) && typeof val.valueOf === 'function') {\n    var valOf = val.valueOf();\n    val = isObject(valOf) ? valOf + '' : valOf;\n  }\n\n  if (typeof val !== 'string') {\n    return val === 0 ? val : +val;\n  } // Remove trailing whitespaces.\n\n\n  val = val.replace(/^\\s+|\\s+$/g, '');\n  return +val;\n}\n/**\n * Executes iteratee for given obj own props.\n */\n\nexport function forOwn(obj, iteratee) {\n  var keys = Object.keys(obj);\n  keys.forEach(function (key) {\n    return iteratee(obj[key], key, obj);\n  });\n  return obj;\n}\n/**\n * Parses an array into a map of different arrays, grouping by the specified prop value.\n */\n\nexport function groupBy(source, prop) {\n  var map = {};\n\n  if (Array.isArray(source) && isString(prop)) {\n    for (var i = 0; i < source.length; i++) {\n      var key = source[i][prop]; // Skip the element if the key is not a string.\n\n      if (isString(key)) {\n        if (!map[key]) map[key] = [];\n        map[key].push(source[i]);\n      }\n    }\n  }\n\n  return map;\n}\n/**\n * Returns the name of a given function.\n */\n\nexport function getFnName(fn) {\n  if (fn.name) return fn.name;\n  return (fn.toString().match(/function (.+?)\\(/) || ['', ''])[1];\n}\n/**\n * Shallow clone an object\n */\n\nexport function shallowClone(obj) {\n  var keys = Object.keys(obj);\n  var output = {};\n\n  for (var i = 0; i < keys.length; i++) {\n    output[keys[i]] = obj[keys[i]];\n  }\n\n  return output;\n}\nexport function isBoolean(val) {\n  return val === true || val === false;\n}"]},"metadata":{},"sourceType":"module"}