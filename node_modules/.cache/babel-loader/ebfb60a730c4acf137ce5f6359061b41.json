{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport { findIndex } from '../../utils/lang';\nimport { types as matcherTypes, mapper as matcherTypesMapper, dataTypes as matcherDataTypes } from '../matchers/types';\nimport segmentTransform from './segment';\nimport whitelistTransform from './whitelist';\nimport setTransform from './set';\nimport numericTransform from './unaryNumeric';\nimport { zeroSinceHH, zeroSinceSS } from '../convertions'; // Flat the complex matcherGroup structure into something handy.\n\nfunction transform(matchers) {\n  var parsedMatchers = matchers.map(function (matcher) {\n    var matcherType = matcher.matcherType,\n        negate = matcher.negate,\n        keySelector = matcher.keySelector,\n        segmentObject = matcher.userDefinedSegmentMatcherData,\n        whitelistObject = matcher.whitelistMatcherData,\n        unaryNumericObject = matcher.unaryNumericMatcherData,\n        betweenObject = matcher.betweenMatcherData,\n        dependencyObject = matcher.dependencyMatcherData,\n        booleanMatcherData = matcher.booleanMatcherData,\n        stringMatcherData = matcher.stringMatcherData;\n    var attribute = keySelector && keySelector.attribute;\n    var type = matcherTypesMapper(matcherType); // As default input data type we use string (even for ALL_KEYS)\n\n    var dataType = matcherDataTypes.STRING;\n    var value = undefined;\n\n    if (type === matcherTypes.SEGMENT) {\n      value = segmentTransform(segmentObject);\n    } else if (type === matcherTypes.WHITELIST) {\n      value = whitelistTransform(whitelistObject);\n    } else if (type === matcherTypes.EQUAL_TO) {\n      value = numericTransform(unaryNumericObject);\n      dataType = matcherDataTypes.NUMBER;\n\n      if (unaryNumericObject.dataType === 'DATETIME') {\n        value = zeroSinceHH(value);\n        dataType = matcherDataTypes.DATETIME;\n      }\n    } else if (type === matcherTypes.GREATER_THAN_OR_EQUAL_TO || type === matcherTypes.LESS_THAN_OR_EQUAL_TO) {\n      value = numericTransform(unaryNumericObject);\n      dataType = matcherDataTypes.NUMBER;\n\n      if (unaryNumericObject.dataType === 'DATETIME') {\n        value = zeroSinceSS(value);\n        dataType = matcherDataTypes.DATETIME;\n      }\n    } else if (type === matcherTypes.BETWEEN) {\n      value = betweenObject;\n      dataType = matcherDataTypes.NUMBER;\n\n      if (betweenObject.dataType === 'DATETIME') {\n        value.start = zeroSinceSS(value.start);\n        value.end = zeroSinceSS(value.end);\n        dataType = matcherDataTypes.DATETIME;\n      }\n    } else if (type === matcherTypes.EQUAL_TO_SET || type === matcherTypes.CONTAINS_ANY_OF_SET || type === matcherTypes.CONTAINS_ALL_OF_SET || type === matcherTypes.PART_OF_SET) {\n      value = setTransform(whitelistObject);\n      dataType = matcherDataTypes.SET;\n    } else if (type === matcherTypes.STARTS_WITH || type === matcherTypes.ENDS_WITH || type === matcherTypes.CONTAINS_STRING) {\n      value = setTransform(whitelistObject);\n    } else if (type === matcherTypes.IN_SPLIT_TREATMENT) {\n      value = dependencyObject;\n      dataType = matcherDataTypes.NOT_SPECIFIED;\n    } else if (type === matcherTypes.EQUAL_TO_BOOLEAN) {\n      dataType = matcherDataTypes.BOOLEAN;\n      value = booleanMatcherData;\n    } else if (type === matcherTypes.MATCHES_STRING) {\n      value = stringMatcherData;\n    }\n\n    return {\n      attribute: attribute,\n      // attribute over we should do the matching, undefined means 'use the key'\n      negate: negate,\n      // should we negate the result?\n      type: type,\n      // which kind of matcher we should evaluate\n      value: value,\n      // metadata used for the matching\n      dataType: dataType // runtime input data type\n\n    };\n  });\n\n  if (findIndex(parsedMatchers, function (m) {\n    return m.type === matcherTypes.UNDEFINED;\n  }) === -1) {\n    return parsedMatchers;\n  } else {\n    return [];\n  }\n}\n\nexport default transform;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/transforms/matchers.js"],"names":["findIndex","types","matcherTypes","mapper","matcherTypesMapper","dataTypes","matcherDataTypes","segmentTransform","whitelistTransform","setTransform","numericTransform","zeroSinceHH","zeroSinceSS","transform","matchers","parsedMatchers","map","matcher","matcherType","negate","keySelector","segmentObject","userDefinedSegmentMatcherData","whitelistObject","whitelistMatcherData","unaryNumericObject","unaryNumericMatcherData","betweenObject","betweenMatcherData","dependencyObject","dependencyMatcherData","booleanMatcherData","stringMatcherData","attribute","type","dataType","STRING","value","undefined","SEGMENT","WHITELIST","EQUAL_TO","NUMBER","DATETIME","GREATER_THAN_OR_EQUAL_TO","LESS_THAN_OR_EQUAL_TO","BETWEEN","start","end","EQUAL_TO_SET","CONTAINS_ANY_OF_SET","CONTAINS_ALL_OF_SET","PART_OF_SET","SET","STARTS_WITH","ENDS_WITH","CONTAINS_STRING","IN_SPLIT_TREATMENT","NOT_SPECIFIED","EQUAL_TO_BOOLEAN","BOOLEAN","MATCHES_STRING","m","UNDEFINED"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport { findIndex } from '../../utils/lang';\nimport { types as matcherTypes, mapper as matcherTypesMapper, dataTypes as matcherDataTypes } from '../matchers/types';\nimport segmentTransform from './segment';\nimport whitelistTransform from './whitelist';\nimport setTransform from './set';\nimport numericTransform from './unaryNumeric';\nimport { zeroSinceHH, zeroSinceSS } from '../convertions'; // Flat the complex matcherGroup structure into something handy.\n\nfunction transform(matchers) {\n  var parsedMatchers = matchers.map(function (matcher) {\n    var matcherType = matcher.matcherType,\n        negate = matcher.negate,\n        keySelector = matcher.keySelector,\n        segmentObject = matcher.userDefinedSegmentMatcherData,\n        whitelistObject = matcher.whitelistMatcherData,\n        unaryNumericObject = matcher.unaryNumericMatcherData,\n        betweenObject = matcher.betweenMatcherData,\n        dependencyObject = matcher.dependencyMatcherData,\n        booleanMatcherData = matcher.booleanMatcherData,\n        stringMatcherData = matcher.stringMatcherData;\n    var attribute = keySelector && keySelector.attribute;\n    var type = matcherTypesMapper(matcherType); // As default input data type we use string (even for ALL_KEYS)\n\n    var dataType = matcherDataTypes.STRING;\n    var value = undefined;\n\n    if (type === matcherTypes.SEGMENT) {\n      value = segmentTransform(segmentObject);\n    } else if (type === matcherTypes.WHITELIST) {\n      value = whitelistTransform(whitelistObject);\n    } else if (type === matcherTypes.EQUAL_TO) {\n      value = numericTransform(unaryNumericObject);\n      dataType = matcherDataTypes.NUMBER;\n\n      if (unaryNumericObject.dataType === 'DATETIME') {\n        value = zeroSinceHH(value);\n        dataType = matcherDataTypes.DATETIME;\n      }\n    } else if (type === matcherTypes.GREATER_THAN_OR_EQUAL_TO || type === matcherTypes.LESS_THAN_OR_EQUAL_TO) {\n      value = numericTransform(unaryNumericObject);\n      dataType = matcherDataTypes.NUMBER;\n\n      if (unaryNumericObject.dataType === 'DATETIME') {\n        value = zeroSinceSS(value);\n        dataType = matcherDataTypes.DATETIME;\n      }\n    } else if (type === matcherTypes.BETWEEN) {\n      value = betweenObject;\n      dataType = matcherDataTypes.NUMBER;\n\n      if (betweenObject.dataType === 'DATETIME') {\n        value.start = zeroSinceSS(value.start);\n        value.end = zeroSinceSS(value.end);\n        dataType = matcherDataTypes.DATETIME;\n      }\n    } else if (type === matcherTypes.EQUAL_TO_SET || type === matcherTypes.CONTAINS_ANY_OF_SET || type === matcherTypes.CONTAINS_ALL_OF_SET || type === matcherTypes.PART_OF_SET) {\n      value = setTransform(whitelistObject);\n      dataType = matcherDataTypes.SET;\n    } else if (type === matcherTypes.STARTS_WITH || type === matcherTypes.ENDS_WITH || type === matcherTypes.CONTAINS_STRING) {\n      value = setTransform(whitelistObject);\n    } else if (type === matcherTypes.IN_SPLIT_TREATMENT) {\n      value = dependencyObject;\n      dataType = matcherDataTypes.NOT_SPECIFIED;\n    } else if (type === matcherTypes.EQUAL_TO_BOOLEAN) {\n      dataType = matcherDataTypes.BOOLEAN;\n      value = booleanMatcherData;\n    } else if (type === matcherTypes.MATCHES_STRING) {\n      value = stringMatcherData;\n    }\n\n    return {\n      attribute: attribute,\n      // attribute over we should do the matching, undefined means 'use the key'\n      negate: negate,\n      // should we negate the result?\n      type: type,\n      // which kind of matcher we should evaluate\n      value: value,\n      // metadata used for the matching\n      dataType: dataType // runtime input data type\n\n    };\n  });\n\n  if (findIndex(parsedMatchers, function (m) {\n    return m.type === matcherTypes.UNDEFINED;\n  }) === -1) {\n    return parsedMatchers;\n  } else {\n    return [];\n  }\n}\n\nexport default transform;"]},"metadata":{},"sourceType":"module"}