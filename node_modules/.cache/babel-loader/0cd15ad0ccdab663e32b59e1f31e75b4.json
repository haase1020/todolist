{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport objectAssign from 'object-assign';\nimport logFactory from '../utils/logger';\nimport thenable from '../utils/promise/thenable';\nimport ImpressionObserverFactory from '../impressions/observer';\nimport { truncateTimeFrame } from '../utils/time';\nimport { OPTIMIZED, PRODUCER_MODE, STANDALONE_MODE } from '../utils/constants';\nvar log = logFactory('splitio-client:impressions-tracker');\n/**\n * Checks if impressions previous time should be added or not.\n */\n\nfunction shouldAddPt(settings) {\n  return [PRODUCER_MODE, STANDALONE_MODE].indexOf(settings.mode) > -1 ? true : false;\n}\n/**\n * Checks if it should dedupe impressions or not.\n */\n\n\nfunction shouldBeOptimized(settings) {\n  if (!shouldAddPt(settings)) return false;\n  return settings.sync.impressionsMode === OPTIMIZED ? true : false;\n}\n\nfunction ImpressionsTracker(context) {\n  var collector = context.get(context.constants.STORAGE).impressions;\n  var settings = context.get(context.constants.SETTINGS);\n  var listener = settings.impressionListener;\n  var integrationsManager = context.get(context.constants.INTEGRATIONS_MANAGER, true);\n  var _settings$runtime = settings.runtime,\n      ip = _settings$runtime.ip,\n      hostname = _settings$runtime.hostname;\n  var sdkLanguageVersion = settings.version;\n  var _queue = [];\n  var shouldAddPreviousTime = shouldAddPt(settings);\n  var isOptimized = shouldBeOptimized(settings);\n  var observer = ImpressionObserverFactory(); // Instantiates observer\n\n  var impressionsCounter = context.get(context.constants.IMPRESSIONS_COUNTER);\n  return {\n    queue: function queue(impression, attributes) {\n      _queue.push({\n        impression: impression,\n        attributes: attributes\n      });\n    },\n    track: function track() {\n      var impressionsCount = _queue.length;\n\n      var slice = _queue.splice(0, impressionsCount);\n\n      var impressionsToStore = []; // Track only the impressions that are going to be stored\n      // Wraps impressions to store and adds previousTime if it corresponds\n\n      slice.forEach(function (_ref) {\n        var impression = _ref.impression;\n\n        if (shouldAddPreviousTime) {\n          // Adds previous time if it is enabled\n          impression.pt = observer.testAndSet(impression);\n        }\n\n        var now = Date.now();\n\n        if (isOptimized && impressionsCounter) {\n          // Increments impression counter per featureName\n          impressionsCounter.inc(impression.feature, now, 1);\n        } // Checks if the impression should be added in queue to be sent\n\n\n        if (!isOptimized || !impression.pt || impression.pt < truncateTimeFrame(now)) {\n          impressionsToStore.push(impression);\n        }\n      });\n      var res = collector.track(impressionsToStore); // If we're on an async storage, handle error and log it.\n\n      if (thenable(res)) {\n        res.then(function () {\n          log.debug(\"Successfully stored \".concat(impressionsCount, \" impression\").concat(impressionsCount === 1 ? '' : 's', \".\"));\n        }).catch(function (err) {\n          log.error(\"Could not store impressions bulk with \".concat(impressionsCount, \" impression\").concat(impressionsCount === 1 ? '' : 's', \". Error: \").concat(err));\n        });\n      }\n\n      if (listener || integrationsManager) {\n        var _loop = function _loop(i) {\n          var impressionData = {\n            // copy of impression, to avoid unexpected behaviour if modified by integrations or impressionListener\n            impression: objectAssign({}, slice[i].impression),\n            attributes: slice[i].attributes,\n            ip: ip,\n            hostname: hostname,\n            sdkLanguageVersion: sdkLanguageVersion\n          }; // Wrap in a timeout because we don't want it to be blocking.\n\n          setTimeout(function () {\n            // integrationsManager.handleImpression does not throw errors\n            if (integrationsManager) integrationsManager.handleImpression(impressionData);\n\n            try {\n              // An exception on the listeners should not break the SDK.\n              if (listener) listener.logImpression(impressionData);\n            } catch (err) {\n              log.error(\"Impression listener logImpression method threw: \".concat(err, \".\"));\n            }\n          }, 0);\n        };\n\n        for (var i = 0; i < impressionsCount; i++) {\n          _loop(i);\n        }\n      }\n    }\n  };\n}\n\nexport default ImpressionsTracker;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/trackers/impressions.js"],"names":["objectAssign","logFactory","thenable","ImpressionObserverFactory","truncateTimeFrame","OPTIMIZED","PRODUCER_MODE","STANDALONE_MODE","log","shouldAddPt","settings","indexOf","mode","shouldBeOptimized","sync","impressionsMode","ImpressionsTracker","context","collector","get","constants","STORAGE","impressions","SETTINGS","listener","impressionListener","integrationsManager","INTEGRATIONS_MANAGER","_settings$runtime","runtime","ip","hostname","sdkLanguageVersion","version","_queue","shouldAddPreviousTime","isOptimized","observer","impressionsCounter","IMPRESSIONS_COUNTER","queue","impression","attributes","push","track","impressionsCount","length","slice","splice","impressionsToStore","forEach","_ref","pt","testAndSet","now","Date","inc","feature","res","then","debug","concat","catch","err","error","_loop","i","impressionData","setTimeout","handleImpression","logImpression"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport objectAssign from 'object-assign';\nimport logFactory from '../utils/logger';\nimport thenable from '../utils/promise/thenable';\nimport ImpressionObserverFactory from '../impressions/observer';\nimport { truncateTimeFrame } from '../utils/time';\nimport { OPTIMIZED, PRODUCER_MODE, STANDALONE_MODE } from '../utils/constants';\nvar log = logFactory('splitio-client:impressions-tracker');\n/**\n * Checks if impressions previous time should be added or not.\n */\n\nfunction shouldAddPt(settings) {\n  return [PRODUCER_MODE, STANDALONE_MODE].indexOf(settings.mode) > -1 ? true : false;\n}\n/**\n * Checks if it should dedupe impressions or not.\n */\n\n\nfunction shouldBeOptimized(settings) {\n  if (!shouldAddPt(settings)) return false;\n  return settings.sync.impressionsMode === OPTIMIZED ? true : false;\n}\n\nfunction ImpressionsTracker(context) {\n  var collector = context.get(context.constants.STORAGE).impressions;\n  var settings = context.get(context.constants.SETTINGS);\n  var listener = settings.impressionListener;\n  var integrationsManager = context.get(context.constants.INTEGRATIONS_MANAGER, true);\n  var _settings$runtime = settings.runtime,\n      ip = _settings$runtime.ip,\n      hostname = _settings$runtime.hostname;\n  var sdkLanguageVersion = settings.version;\n  var _queue = [];\n  var shouldAddPreviousTime = shouldAddPt(settings);\n  var isOptimized = shouldBeOptimized(settings);\n  var observer = ImpressionObserverFactory(); // Instantiates observer\n\n  var impressionsCounter = context.get(context.constants.IMPRESSIONS_COUNTER);\n  return {\n    queue: function queue(impression, attributes) {\n      _queue.push({\n        impression: impression,\n        attributes: attributes\n      });\n    },\n    track: function track() {\n      var impressionsCount = _queue.length;\n\n      var slice = _queue.splice(0, impressionsCount);\n\n      var impressionsToStore = []; // Track only the impressions that are going to be stored\n      // Wraps impressions to store and adds previousTime if it corresponds\n\n      slice.forEach(function (_ref) {\n        var impression = _ref.impression;\n\n        if (shouldAddPreviousTime) {\n          // Adds previous time if it is enabled\n          impression.pt = observer.testAndSet(impression);\n        }\n\n        var now = Date.now();\n\n        if (isOptimized && impressionsCounter) {\n          // Increments impression counter per featureName\n          impressionsCounter.inc(impression.feature, now, 1);\n        } // Checks if the impression should be added in queue to be sent\n\n\n        if (!isOptimized || !impression.pt || impression.pt < truncateTimeFrame(now)) {\n          impressionsToStore.push(impression);\n        }\n      });\n      var res = collector.track(impressionsToStore); // If we're on an async storage, handle error and log it.\n\n      if (thenable(res)) {\n        res.then(function () {\n          log.debug(\"Successfully stored \".concat(impressionsCount, \" impression\").concat(impressionsCount === 1 ? '' : 's', \".\"));\n        }).catch(function (err) {\n          log.error(\"Could not store impressions bulk with \".concat(impressionsCount, \" impression\").concat(impressionsCount === 1 ? '' : 's', \". Error: \").concat(err));\n        });\n      }\n\n      if (listener || integrationsManager) {\n        var _loop = function _loop(i) {\n          var impressionData = {\n            // copy of impression, to avoid unexpected behaviour if modified by integrations or impressionListener\n            impression: objectAssign({}, slice[i].impression),\n            attributes: slice[i].attributes,\n            ip: ip,\n            hostname: hostname,\n            sdkLanguageVersion: sdkLanguageVersion\n          }; // Wrap in a timeout because we don't want it to be blocking.\n\n          setTimeout(function () {\n            // integrationsManager.handleImpression does not throw errors\n            if (integrationsManager) integrationsManager.handleImpression(impressionData);\n\n            try {\n              // An exception on the listeners should not break the SDK.\n              if (listener) listener.logImpression(impressionData);\n            } catch (err) {\n              log.error(\"Impression listener logImpression method threw: \".concat(err, \".\"));\n            }\n          }, 0);\n        };\n\n        for (var i = 0; i < impressionsCount; i++) {\n          _loop(i);\n        }\n      }\n    }\n  };\n}\n\nexport default ImpressionsTracker;"]},"metadata":{},"sourceType":"module"}