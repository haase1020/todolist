{"ast":null,"code":"/* eslint-disable no-fallthrough */\nimport { UTF16ToUTF8, x86Fmix, x86Multiply, x86Rotl } from './index';\n/*!\n * +----------------------------------------------------------------------------------+\n * | murmurHash3.js v3.0.0 (http://github.com/karanlyons/murmurHash3.js)              |\n * | A TypeScript/JavaScript implementation of MurmurHash3's hashing algorithms.      |\n * |----------------------------------------------------------------------------------|\n * | Copyright (c) 2012-2020 Karan Lyons. Freely distributable under the MIT license. |\n * +----------------------------------------------------------------------------------+\n */\n// PUBLIC FUNCTIONS\n// ----------------\n\nfunction hash32(key, seed) {\n  //\n  // Given a string and an optional seed as an int, returns a 32 bit hash\n  // using the x86 flavor of MurmurHash3, as an unsigned int.\n  //\n  key = key || '';\n  seed = seed || 0;\n  var remainder = key.length % 4;\n  var bytes = key.length - remainder;\n  var h1 = seed;\n  var k1 = 0;\n  var c1 = 0xcc9e2d51;\n  var c2 = 0x1b873593;\n\n  for (var i = 0; i < bytes; i = i + 4) {\n    k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24;\n    k1 = x86Multiply(k1, c1);\n    k1 = x86Rotl(k1, 15);\n    k1 = x86Multiply(k1, c2);\n    h1 ^= k1;\n    h1 = x86Rotl(h1, 13);\n    h1 = x86Multiply(h1, 5) + 0xe6546b64;\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      k1 ^= key.charCodeAt(i) & 0xff;\n      k1 = x86Multiply(k1, c1);\n      k1 = x86Rotl(k1, 15);\n      k1 = x86Multiply(k1, c2);\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n  h1 = x86Fmix(h1);\n  return h1 >>> 0;\n}\n\nfunction hash(str\n/*: string */\n, seed\n/*: number */\n)\n/*: number */\n{\n  return hash32(UTF16ToUTF8(str), seed >>> 0);\n}\n\nfunction bucket(str\n/*: string */\n, seed\n/*: number */\n)\n/*: number */\n{\n  return Math.abs(hash(str, seed) % 100) + 1;\n}\n\nexport default {\n  hash: hash,\n  bucket: bucket\n};","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/engine/murmur3/murmur3.js"],"names":["UTF16ToUTF8","x86Fmix","x86Multiply","x86Rotl","hash32","key","seed","remainder","length","bytes","h1","k1","c1","c2","i","charCodeAt","hash","str","bucket","Math","abs"],"mappings":"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","sourcesContent":["/* eslint-disable no-fallthrough */\nimport { UTF16ToUTF8, x86Fmix, x86Multiply, x86Rotl } from './index';\n/*!\n * +----------------------------------------------------------------------------------+\n * | murmurHash3.js v3.0.0 (http://github.com/karanlyons/murmurHash3.js)              |\n * | A TypeScript/JavaScript implementation of MurmurHash3's hashing algorithms.      |\n * |----------------------------------------------------------------------------------|\n * | Copyright (c) 2012-2020 Karan Lyons. Freely distributable under the MIT license. |\n * +----------------------------------------------------------------------------------+\n */\n// PUBLIC FUNCTIONS\n// ----------------\n\nfunction hash32(key, seed) {\n  //\n  // Given a string and an optional seed as an int, returns a 32 bit hash\n  // using the x86 flavor of MurmurHash3, as an unsigned int.\n  //\n  key = key || '';\n  seed = seed || 0;\n  var remainder = key.length % 4;\n  var bytes = key.length - remainder;\n  var h1 = seed;\n  var k1 = 0;\n  var c1 = 0xcc9e2d51;\n  var c2 = 0x1b873593;\n\n  for (var i = 0; i < bytes; i = i + 4) {\n    k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24;\n    k1 = x86Multiply(k1, c1);\n    k1 = x86Rotl(k1, 15);\n    k1 = x86Multiply(k1, c2);\n    h1 ^= k1;\n    h1 = x86Rotl(h1, 13);\n    h1 = x86Multiply(h1, 5) + 0xe6546b64;\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      k1 ^= key.charCodeAt(i) & 0xff;\n      k1 = x86Multiply(k1, c1);\n      k1 = x86Rotl(k1, 15);\n      k1 = x86Multiply(k1, c2);\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n  h1 = x86Fmix(h1);\n  return h1 >>> 0;\n}\n\nfunction hash(str\n/*: string */\n, seed\n/*: number */\n)\n/*: number */\n{\n  return hash32(UTF16ToUTF8(str), seed >>> 0);\n}\n\nfunction bucket(str\n/*: string */\n, seed\n/*: number */\n)\n/*: number */\n{\n  return Math.abs(hash(str, seed) % 100) + 1;\n}\n\nexport default {\n  hash: hash,\n  bucket: bucket\n};"]},"metadata":{},"sourceType":"module"}