{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { isObject, forOwn } from '../../../utils/lang';\nimport parseCondition from './parseCondition';\nvar previousMock = {\n  'emptyMock': 1\n};\n\nfunction hasTreatmentChanged(prev, curr) {\n  if (_typeof(prev) !== _typeof(curr)) return true;\n\n  if (typeof prev === 'string') {\n    // strings treatments, just compare\n    return prev !== curr;\n  } else {\n    // has treatment and config, compare both\n    return prev.treatment !== curr.treatment || prev.config !== curr.config;\n  }\n}\n\nfunction mockUpdated(currentData) {\n  var names = Object.keys(currentData); // Different amount of items\n\n  if (names.length !== Object.keys(previousMock).length) {\n    previousMock = currentData;\n    return true;\n  }\n\n  return names.some(function (name) {\n    var newSplit = !previousMock[name];\n    var newTreatment = hasTreatmentChanged(previousMock[name], currentData[name]);\n    var changed = newSplit || newTreatment;\n    if (changed) previousMock = currentData;\n    return changed;\n  });\n}\n\nfunction getConfigurationFromSettings(settings) {\n  var mockSettings = settings.features || {};\n  if (!mockUpdated(mockSettings)) return false;\n  var splitObjects = {};\n  forOwn(mockSettings, function (data, splitName) {\n    var treatment = data;\n    var config = null;\n\n    if (isObject(data)) {\n      treatment = data.treatment;\n      config = data.config || config;\n    }\n\n    var configurations = {};\n    if (config !== null) configurations[treatment] = config;\n    splitObjects[splitName] = {\n      conditions: [parseCondition({\n        treatment: treatment\n      })],\n      configurations: configurations\n    };\n  });\n  return splitObjects;\n}\n\nexport default getConfigurationFromSettings;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/services/splitChanges/offline/browser.js"],"names":["_typeof","isObject","forOwn","parseCondition","previousMock","hasTreatmentChanged","prev","curr","treatment","config","mockUpdated","currentData","names","Object","keys","length","some","name","newSplit","newTreatment","changed","getConfigurationFromSettings","settings","mockSettings","features","splitObjects","data","splitName","configurations","conditions"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mCAApB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,qBAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,IAAIC,YAAY,GAAG;AACjB,eAAa;AADI,CAAnB;;AAIA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;AACvC,MAAIP,OAAO,CAACM,IAAD,CAAP,KAAkBN,OAAO,CAACO,IAAD,CAA7B,EAAqC,OAAO,IAAP;;AAErC,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B;AACA,WAAOA,IAAI,KAAKC,IAAhB;AACD,GAHD,MAGO;AACL;AACA,WAAOD,IAAI,CAACE,SAAL,KAAmBD,IAAI,CAACC,SAAxB,IAAqCF,IAAI,CAACG,MAAL,KAAgBF,IAAI,CAACE,MAAjE;AACD;AACF;;AAED,SAASC,WAAT,CAAqBC,WAArB,EAAkC;AAChC,MAAIC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAZ,CADgC,CACM;;AAEtC,MAAIC,KAAK,CAACG,MAAN,KAAiBF,MAAM,CAACC,IAAP,CAAYV,YAAZ,EAA0BW,MAA/C,EAAuD;AACrDX,IAAAA,YAAY,GAAGO,WAAf;AACA,WAAO,IAAP;AACD;;AAED,SAAOC,KAAK,CAACI,IAAN,CAAW,UAAUC,IAAV,EAAgB;AAChC,QAAIC,QAAQ,GAAG,CAACd,YAAY,CAACa,IAAD,CAA5B;AACA,QAAIE,YAAY,GAAGd,mBAAmB,CAACD,YAAY,CAACa,IAAD,CAAb,EAAqBN,WAAW,CAACM,IAAD,CAAhC,CAAtC;AACA,QAAIG,OAAO,GAAGF,QAAQ,IAAIC,YAA1B;AACA,QAAIC,OAAJ,EAAahB,YAAY,GAAGO,WAAf;AACb,WAAOS,OAAP;AACD,GANM,CAAP;AAOD;;AAED,SAASC,4BAAT,CAAsCC,QAAtC,EAAgD;AAC9C,MAAIC,YAAY,GAAGD,QAAQ,CAACE,QAAT,IAAqB,EAAxC;AACA,MAAI,CAACd,WAAW,CAACa,YAAD,CAAhB,EAAgC,OAAO,KAAP;AAChC,MAAIE,YAAY,GAAG,EAAnB;AACAvB,EAAAA,MAAM,CAACqB,YAAD,EAAe,UAAUG,IAAV,EAAgBC,SAAhB,EAA2B;AAC9C,QAAInB,SAAS,GAAGkB,IAAhB;AACA,QAAIjB,MAAM,GAAG,IAAb;;AAEA,QAAIR,QAAQ,CAACyB,IAAD,CAAZ,EAAoB;AAClBlB,MAAAA,SAAS,GAAGkB,IAAI,CAAClB,SAAjB;AACAC,MAAAA,MAAM,GAAGiB,IAAI,CAACjB,MAAL,IAAeA,MAAxB;AACD;;AAED,QAAImB,cAAc,GAAG,EAArB;AACA,QAAInB,MAAM,KAAK,IAAf,EAAqBmB,cAAc,CAACpB,SAAD,CAAd,GAA4BC,MAA5B;AACrBgB,IAAAA,YAAY,CAACE,SAAD,CAAZ,GAA0B;AACxBE,MAAAA,UAAU,EAAE,CAAC1B,cAAc,CAAC;AAC1BK,QAAAA,SAAS,EAAEA;AADe,OAAD,CAAf,CADY;AAIxBoB,MAAAA,cAAc,EAAEA;AAJQ,KAA1B;AAMD,GAjBK,CAAN;AAkBA,SAAOH,YAAP;AACD;;AAED,eAAeJ,4BAAf","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { isObject, forOwn } from '../../../utils/lang';\nimport parseCondition from './parseCondition';\nvar previousMock = {\n  'emptyMock': 1\n};\n\nfunction hasTreatmentChanged(prev, curr) {\n  if (_typeof(prev) !== _typeof(curr)) return true;\n\n  if (typeof prev === 'string') {\n    // strings treatments, just compare\n    return prev !== curr;\n  } else {\n    // has treatment and config, compare both\n    return prev.treatment !== curr.treatment || prev.config !== curr.config;\n  }\n}\n\nfunction mockUpdated(currentData) {\n  var names = Object.keys(currentData); // Different amount of items\n\n  if (names.length !== Object.keys(previousMock).length) {\n    previousMock = currentData;\n    return true;\n  }\n\n  return names.some(function (name) {\n    var newSplit = !previousMock[name];\n    var newTreatment = hasTreatmentChanged(previousMock[name], currentData[name]);\n    var changed = newSplit || newTreatment;\n    if (changed) previousMock = currentData;\n    return changed;\n  });\n}\n\nfunction getConfigurationFromSettings(settings) {\n  var mockSettings = settings.features || {};\n  if (!mockUpdated(mockSettings)) return false;\n  var splitObjects = {};\n  forOwn(mockSettings, function (data, splitName) {\n    var treatment = data;\n    var config = null;\n\n    if (isObject(data)) {\n      treatment = data.treatment;\n      config = data.config || config;\n    }\n\n    var configurations = {};\n    if (config !== null) configurations[treatment] = config;\n    splitObjects[splitName] = {\n      conditions: [parseCondition({\n        treatment: treatment\n      })],\n      configurations: configurations\n    };\n  });\n  return splitObjects;\n}\n\nexport default getConfigurationFromSettings;"]},"metadata":{},"sourceType":"module"}