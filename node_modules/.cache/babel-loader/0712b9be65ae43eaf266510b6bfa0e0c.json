{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../utils/logger';\nimport TaskFactory from './task';\nimport SplitChangesUpdater from './updater/SplitChanges';\nimport PartialBrowserProducer from './browser/Partial';\nvar log = logFactory('splitio-producer:updater');\n/**\n * Startup all the background jobs required for a Browser SDK instance.\n */\n\nvar FullBrowserProducer = function FullBrowserProducer(context) {\n  var settings = context.get(context.constants.SETTINGS);\n  var splitsUpdater = SplitChangesUpdater(context);\n  var splitsUpdaterTask = TaskFactory(synchronizeSplits, settings.scheduler.featuresRefreshRate);\n  var mySegmentsProducer = PartialBrowserProducer(context);\n  var _isSynchronizingSplits = false;\n\n  function synchronizeSplits() {\n    _isSynchronizingSplits = true; // `splitsUpdater` promise always resolves, and with a false value if it fails to fetch or store splits\n\n    return splitsUpdater().then(function (res) {\n      _isSynchronizingSplits = false;\n      return res;\n    });\n  }\n\n  return {\n    // Start periodic fetching (polling)\n    start: function start() {\n      log.info('Starting BROWSER producer');\n      splitsUpdaterTask.start();\n      mySegmentsProducer.start();\n    },\n    // Stop periodic fetching (polling)\n    stop: function stop() {\n      log.info('Stopping BROWSER producer');\n      splitsUpdaterTask.stop();\n      mySegmentsProducer.stop();\n    },\n    // Used by SyncManager to know if running in polling mode.\n    isRunning: splitsUpdaterTask.isRunning,\n    // Used by SplitUpdateWorker\n    isSynchronizingSplits: function isSynchronizingSplits() {\n      return _isSynchronizingSplits;\n    },\n    synchronizeSplits: synchronizeSplits,\n    // Used by MySegmentUpdateWorker\n    isSynchronizingMySegments: mySegmentsProducer.isSynchronizingMySegments,\n    synchronizeMySegments: mySegmentsProducer.synchronizeMySegments\n  };\n};\n\nexport default FullBrowserProducer;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/producer/browser.js"],"names":["logFactory","TaskFactory","SplitChangesUpdater","PartialBrowserProducer","log","FullBrowserProducer","context","settings","get","constants","SETTINGS","splitsUpdater","splitsUpdaterTask","synchronizeSplits","scheduler","featuresRefreshRate","mySegmentsProducer","_isSynchronizingSplits","then","res","start","info","stop","isRunning","isSynchronizingSplits","isSynchronizingMySegments","synchronizeMySegments"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,WAAP,MAAwB,QAAxB;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AACA,OAAOC,sBAAP,MAAmC,mBAAnC;AACA,IAAIC,GAAG,GAAGJ,UAAU,CAAC,0BAAD,CAApB;AACA;;;;AAIA,IAAIK,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;AAC9D,MAAIC,QAAQ,GAAGD,OAAO,CAACE,GAAR,CAAYF,OAAO,CAACG,SAAR,CAAkBC,QAA9B,CAAf;AACA,MAAIC,aAAa,GAAGT,mBAAmB,CAACI,OAAD,CAAvC;AACA,MAAIM,iBAAiB,GAAGX,WAAW,CAACY,iBAAD,EAAoBN,QAAQ,CAACO,SAAT,CAAmBC,mBAAvC,CAAnC;AACA,MAAIC,kBAAkB,GAAGb,sBAAsB,CAACG,OAAD,CAA/C;AACA,MAAIW,sBAAsB,GAAG,KAA7B;;AAEA,WAASJ,iBAAT,GAA6B;AAC3BI,IAAAA,sBAAsB,GAAG,IAAzB,CAD2B,CACI;;AAE/B,WAAON,aAAa,GAAGO,IAAhB,CAAqB,UAAUC,GAAV,EAAe;AACzCF,MAAAA,sBAAsB,GAAG,KAAzB;AACA,aAAOE,GAAP;AACD,KAHM,CAAP;AAID;;AAED,SAAO;AACL;AACAC,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBhB,MAAAA,GAAG,CAACiB,IAAJ,CAAS,2BAAT;AACAT,MAAAA,iBAAiB,CAACQ,KAAlB;AACAJ,MAAAA,kBAAkB,CAACI,KAAnB;AACD,KANI;AAOL;AACAE,IAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpBlB,MAAAA,GAAG,CAACiB,IAAJ,CAAS,2BAAT;AACAT,MAAAA,iBAAiB,CAACU,IAAlB;AACAN,MAAAA,kBAAkB,CAACM,IAAnB;AACD,KAZI;AAaL;AACAC,IAAAA,SAAS,EAAEX,iBAAiB,CAACW,SAdxB;AAeL;AACAC,IAAAA,qBAAqB,EAAE,SAASA,qBAAT,GAAiC;AACtD,aAAOP,sBAAP;AACD,KAlBI;AAmBLJ,IAAAA,iBAAiB,EAAEA,iBAnBd;AAoBL;AACAY,IAAAA,yBAAyB,EAAET,kBAAkB,CAACS,yBArBzC;AAsBLC,IAAAA,qBAAqB,EAAEV,kBAAkB,CAACU;AAtBrC,GAAP;AAwBD,CAxCD;;AA0CA,eAAerB,mBAAf","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../utils/logger';\nimport TaskFactory from './task';\nimport SplitChangesUpdater from './updater/SplitChanges';\nimport PartialBrowserProducer from './browser/Partial';\nvar log = logFactory('splitio-producer:updater');\n/**\n * Startup all the background jobs required for a Browser SDK instance.\n */\n\nvar FullBrowserProducer = function FullBrowserProducer(context) {\n  var settings = context.get(context.constants.SETTINGS);\n  var splitsUpdater = SplitChangesUpdater(context);\n  var splitsUpdaterTask = TaskFactory(synchronizeSplits, settings.scheduler.featuresRefreshRate);\n  var mySegmentsProducer = PartialBrowserProducer(context);\n  var _isSynchronizingSplits = false;\n\n  function synchronizeSplits() {\n    _isSynchronizingSplits = true; // `splitsUpdater` promise always resolves, and with a false value if it fails to fetch or store splits\n\n    return splitsUpdater().then(function (res) {\n      _isSynchronizingSplits = false;\n      return res;\n    });\n  }\n\n  return {\n    // Start periodic fetching (polling)\n    start: function start() {\n      log.info('Starting BROWSER producer');\n      splitsUpdaterTask.start();\n      mySegmentsProducer.start();\n    },\n    // Stop periodic fetching (polling)\n    stop: function stop() {\n      log.info('Stopping BROWSER producer');\n      splitsUpdaterTask.stop();\n      mySegmentsProducer.stop();\n    },\n    // Used by SyncManager to know if running in polling mode.\n    isRunning: splitsUpdaterTask.isRunning,\n    // Used by SplitUpdateWorker\n    isSynchronizingSplits: function isSynchronizingSplits() {\n      return _isSynchronizingSplits;\n    },\n    synchronizeSplits: synchronizeSplits,\n    // Used by MySegmentUpdateWorker\n    isSynchronizingMySegments: mySegmentsProducer.isSynchronizingMySegments,\n    synchronizeMySegments: mySegmentsProducer.synchronizeMySegments\n  };\n};\n\nexport default FullBrowserProducer;"]},"metadata":{},"sourceType":"module"}