{"ast":null,"code":"import objectAssign from 'object-assign';\nimport authService from '../../services/auth';\nimport authRequest from '../../services/auth/auth';\nimport { decodeJWTtoken } from '../../utils/jwt';\n/**\n * Run authentication requests to Auth Server, and handle response decoding the JTW token.\n * Precondition:\n *\n * @param {Object} settings Split factory config, used to get authorizationKey and other params required by authRequest.\n * @param {string[] | undefined} userKeys set of user Keys to track MY_SEGMENTS_CHANGES. It is undefined for Node.\n * @throws {ReferenceError} if `atob` function is not defined\n */\n\nexport default function authenticate(settings, userKeys) {\n  var authPromise = authService(authRequest(settings, userKeys)); // errors handled by authService\n\n  return authPromise // no need to handle json parsing errors as SplitError, since no user callbacks are executed after this promise is resolved\n  .then(function (resp) {\n    return resp.json();\n  }).then(function (json) {\n    if (json.token) {\n      // empty token when `\"pushEnabled\": false`\n      var decodedToken = decodeJWTtoken(json.token);\n      if (typeof decodedToken.iat !== 'number' || typeof decodedToken.exp !== 'number') throw 'token properties \"issuedAt\" (iat) or \"expiration\" (exp) are missing or invalid';\n      var channels = JSON.parse(decodedToken['x-ably-capability']);\n      return objectAssign({\n        decodedToken: decodedToken,\n        channels: channels\n      }, json);\n    }\n\n    return json;\n  });\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/sync/AuthClient/index.js"],"names":["objectAssign","authService","authRequest","decodeJWTtoken","authenticate","settings","userKeys","authPromise","then","resp","json","token","decodedToken","iat","exp","channels","JSON","parse"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA;;;;;;;;;AASA,eAAe,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AACvD,MAAIC,WAAW,GAAGN,WAAW,CAACC,WAAW,CAACG,QAAD,EAAWC,QAAX,CAAZ,CAA7B,CADuD,CACS;;AAEhE,SAAOC,WAAW,CAAC;AAAD,GACjBC,IADM,CACD,UAAUC,IAAV,EAAgB;AACpB,WAAOA,IAAI,CAACC,IAAL,EAAP;AACD,GAHM,EAGJF,IAHI,CAGC,UAAUE,IAAV,EAAgB;AACtB,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACd;AACA,UAAIC,YAAY,GAAGT,cAAc,CAACO,IAAI,CAACC,KAAN,CAAjC;AACA,UAAI,OAAOC,YAAY,CAACC,GAApB,KAA4B,QAA5B,IAAwC,OAAOD,YAAY,CAACE,GAApB,KAA4B,QAAxE,EAAkF,MAAM,gFAAN;AAClF,UAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAAC,mBAAD,CAAvB,CAAf;AACA,aAAOZ,YAAY,CAAC;AAClBY,QAAAA,YAAY,EAAEA,YADI;AAElBG,QAAAA,QAAQ,EAAEA;AAFQ,OAAD,EAGhBL,IAHgB,CAAnB;AAID;;AAED,WAAOA,IAAP;AACD,GAhBM,CAAP;AAiBD","sourcesContent":["import objectAssign from 'object-assign';\nimport authService from '../../services/auth';\nimport authRequest from '../../services/auth/auth';\nimport { decodeJWTtoken } from '../../utils/jwt';\n/**\n * Run authentication requests to Auth Server, and handle response decoding the JTW token.\n * Precondition:\n *\n * @param {Object} settings Split factory config, used to get authorizationKey and other params required by authRequest.\n * @param {string[] | undefined} userKeys set of user Keys to track MY_SEGMENTS_CHANGES. It is undefined for Node.\n * @throws {ReferenceError} if `atob` function is not defined\n */\n\nexport default function authenticate(settings, userKeys) {\n  var authPromise = authService(authRequest(settings, userKeys)); // errors handled by authService\n\n  return authPromise // no need to handle json parsing errors as SplitError, since no user callbacks are executed after this promise is resolved\n  .then(function (resp) {\n    return resp.json();\n  }).then(function (json) {\n    if (json.token) {\n      // empty token when `\"pushEnabled\": false`\n      var decodedToken = decodeJWTtoken(json.token);\n      if (typeof decodedToken.iat !== 'number' || typeof decodedToken.exp !== 'number') throw 'token properties \"issuedAt\" (iat) or \"expiration\" (exp) are missing or invalid';\n      var channels = JSON.parse(decodedToken['x-ably-capability']);\n      return objectAssign({\n        decodedToken: decodedToken,\n        channels: channels\n      }, json);\n    }\n\n    return json;\n  });\n}"]},"metadata":{},"sourceType":"module"}