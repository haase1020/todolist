{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { startsWith } from '../utils/lang';\nvar everythingAtTheEnd = /[^.]+$/;\nvar everythingAfterCount = /count\\.([^/]+)$/;\nvar latencyMetricNameAndBucket = /latency\\.([^/]+)\\.bucket\\.([0-9]+)$/;\n\nvar KeyBuilder = /*#__PURE__*/function () {\n  function KeyBuilder(settings) {\n    _classCallCheck(this, KeyBuilder);\n\n    this.settings = settings;\n  }\n\n  _createClass(KeyBuilder, [{\n    key: \"buildSplitKey\",\n    value: function buildSplitKey(splitName) {\n      return \"\".concat(this.settings.storage.prefix, \".split.\").concat(splitName);\n    }\n  }, {\n    key: \"buildTrafficTypeKey\",\n    value: function buildTrafficTypeKey(trafficType) {\n      return \"\".concat(this.settings.storage.prefix, \".trafficType.\").concat(trafficType);\n    }\n  }, {\n    key: \"buildSplitsTillKey\",\n    value: function buildSplitsTillKey() {\n      return \"\".concat(this.settings.storage.prefix, \".splits.till\");\n    }\n  }, {\n    key: \"buildSplitsReady\",\n    value: function buildSplitsReady() {\n      return \"\".concat(this.settings.storage.prefix, \".splits.ready\");\n    }\n  }, {\n    key: \"isSplitKey\",\n    value: function isSplitKey(key) {\n      return startsWith(key, \"\".concat(this.settings.storage.prefix, \".split.\"));\n    }\n  }, {\n    key: \"buildSegmentNameKey\",\n    value: function buildSegmentNameKey(segmentName) {\n      return \"\".concat(this.settings.storage.prefix, \".segment.\").concat(segmentName);\n    }\n  }, {\n    key: \"buildSegmentTillKey\",\n    value: function buildSegmentTillKey(segmentName) {\n      return \"\".concat(this.settings.storage.prefix, \".segment.\").concat(segmentName, \".till\");\n    }\n  }, {\n    key: \"buildRegisteredSegmentsKey\",\n    value: function buildRegisteredSegmentsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".segments.registered\");\n    }\n  }, {\n    key: \"buildSegmentsReady\",\n    value: function buildSegmentsReady() {\n      return \"\".concat(this.settings.storage.prefix, \".segments.ready\");\n    }\n  }, {\n    key: \"buildVersionablePrefix\",\n    value: function buildVersionablePrefix() {\n      return \"\".concat(this.settings.storage.prefix, \"/\").concat(this.settings.version, \"/\").concat(this.settings.runtime.ip);\n    }\n  }, {\n    key: \"buildImpressionsKey\",\n    value: function buildImpressionsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".impressions\");\n    }\n  }, {\n    key: \"buildEventsKey\",\n    value: function buildEventsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".events\");\n    }\n  }, {\n    key: \"buildLatencyKeyPrefix\",\n    value: function buildLatencyKeyPrefix() {\n      return \"\".concat(this.buildVersionablePrefix(), \"/latency\");\n    }\n  }, {\n    key: \"buildLatencyKey\",\n    value: function buildLatencyKey(metricName, bucketNumber) {\n      return \"\".concat(this.buildLatencyKeyPrefix(), \".\").concat(metricName, \".bucket.\").concat(bucketNumber);\n    }\n  }, {\n    key: \"buildCountKey\",\n    value: function buildCountKey(metricName) {\n      return \"\".concat(this.buildVersionablePrefix(), \"/count.\").concat(metricName);\n    }\n  }, {\n    key: \"buildGaugeKey\",\n    value: function buildGaugeKey(metricName) {\n      return \"\".concat(this.buildVersionablePrefix(), \"/gauge.\").concat(metricName);\n    }\n  }, {\n    key: \"searchPatternForCountKeys\",\n    value: function searchPatternForCountKeys() {\n      return \"\".concat(this.buildVersionablePrefix(), \"/count.*\");\n    }\n  }, {\n    key: \"searchPatternForSplitKeys\",\n    value: function searchPatternForSplitKeys() {\n      return \"\".concat(this.settings.storage.prefix, \".split.*\");\n    }\n  }, {\n    key: \"searchPatternForLatency\",\n    value: function searchPatternForLatency() {\n      return \"\".concat(this.buildLatencyKeyPrefix(), \".*\");\n    }\n  }, {\n    key: \"extractKey\",\n    value: function extractKey(builtKey) {\n      var s = builtKey.match(everythingAtTheEnd);\n\n      if (s && s.length) {\n        return s[0];\n      } else {\n        throw 'Invalid latency key provided';\n      }\n    }\n  }, {\n    key: \"extractCounterName\",\n    value: function extractCounterName(counterKey) {\n      var m = counterKey.match(everythingAfterCount);\n\n      if (m && m.length) {\n        return m[1]; // everything after count\n      } else {\n        throw 'Invalid counter key provided';\n      }\n    }\n  }, {\n    key: \"extractLatencyMetricNameAndBucket\",\n    value: function extractLatencyMetricNameAndBucket(latencyKey) {\n      var parts = latencyKey.match(latencyMetricNameAndBucket);\n\n      if (parts && parts.length > 2) {\n        return {\n          metricName: parts[1],\n          bucketNumber: parts[2]\n        };\n      } else {\n        throw 'Invalid counter key provided';\n      }\n    }\n  }]);\n\n  return KeyBuilder;\n}();\n\nexport default KeyBuilder;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/storage/Keys.js"],"names":["_classCallCheck","_createClass","startsWith","everythingAtTheEnd","everythingAfterCount","latencyMetricNameAndBucket","KeyBuilder","settings","key","value","buildSplitKey","splitName","concat","storage","prefix","buildTrafficTypeKey","trafficType","buildSplitsTillKey","buildSplitsReady","isSplitKey","buildSegmentNameKey","segmentName","buildSegmentTillKey","buildRegisteredSegmentsKey","buildSegmentsReady","buildVersionablePrefix","version","runtime","ip","buildImpressionsKey","buildEventsKey","buildLatencyKeyPrefix","buildLatencyKey","metricName","bucketNumber","buildCountKey","buildGaugeKey","searchPatternForCountKeys","searchPatternForSplitKeys","searchPatternForLatency","extractKey","builtKey","s","match","length","extractCounterName","counterKey","m","extractLatencyMetricNameAndBucket","latencyKey","parts"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { startsWith } from '../utils/lang';\nvar everythingAtTheEnd = /[^.]+$/;\nvar everythingAfterCount = /count\\.([^/]+)$/;\nvar latencyMetricNameAndBucket = /latency\\.([^/]+)\\.bucket\\.([0-9]+)$/;\n\nvar KeyBuilder = /*#__PURE__*/function () {\n  function KeyBuilder(settings) {\n    _classCallCheck(this, KeyBuilder);\n\n    this.settings = settings;\n  }\n\n  _createClass(KeyBuilder, [{\n    key: \"buildSplitKey\",\n    value: function buildSplitKey(splitName) {\n      return \"\".concat(this.settings.storage.prefix, \".split.\").concat(splitName);\n    }\n  }, {\n    key: \"buildTrafficTypeKey\",\n    value: function buildTrafficTypeKey(trafficType) {\n      return \"\".concat(this.settings.storage.prefix, \".trafficType.\").concat(trafficType);\n    }\n  }, {\n    key: \"buildSplitsTillKey\",\n    value: function buildSplitsTillKey() {\n      return \"\".concat(this.settings.storage.prefix, \".splits.till\");\n    }\n  }, {\n    key: \"buildSplitsReady\",\n    value: function buildSplitsReady() {\n      return \"\".concat(this.settings.storage.prefix, \".splits.ready\");\n    }\n  }, {\n    key: \"isSplitKey\",\n    value: function isSplitKey(key) {\n      return startsWith(key, \"\".concat(this.settings.storage.prefix, \".split.\"));\n    }\n  }, {\n    key: \"buildSegmentNameKey\",\n    value: function buildSegmentNameKey(segmentName) {\n      return \"\".concat(this.settings.storage.prefix, \".segment.\").concat(segmentName);\n    }\n  }, {\n    key: \"buildSegmentTillKey\",\n    value: function buildSegmentTillKey(segmentName) {\n      return \"\".concat(this.settings.storage.prefix, \".segment.\").concat(segmentName, \".till\");\n    }\n  }, {\n    key: \"buildRegisteredSegmentsKey\",\n    value: function buildRegisteredSegmentsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".segments.registered\");\n    }\n  }, {\n    key: \"buildSegmentsReady\",\n    value: function buildSegmentsReady() {\n      return \"\".concat(this.settings.storage.prefix, \".segments.ready\");\n    }\n  }, {\n    key: \"buildVersionablePrefix\",\n    value: function buildVersionablePrefix() {\n      return \"\".concat(this.settings.storage.prefix, \"/\").concat(this.settings.version, \"/\").concat(this.settings.runtime.ip);\n    }\n  }, {\n    key: \"buildImpressionsKey\",\n    value: function buildImpressionsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".impressions\");\n    }\n  }, {\n    key: \"buildEventsKey\",\n    value: function buildEventsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".events\");\n    }\n  }, {\n    key: \"buildLatencyKeyPrefix\",\n    value: function buildLatencyKeyPrefix() {\n      return \"\".concat(this.buildVersionablePrefix(), \"/latency\");\n    }\n  }, {\n    key: \"buildLatencyKey\",\n    value: function buildLatencyKey(metricName, bucketNumber) {\n      return \"\".concat(this.buildLatencyKeyPrefix(), \".\").concat(metricName, \".bucket.\").concat(bucketNumber);\n    }\n  }, {\n    key: \"buildCountKey\",\n    value: function buildCountKey(metricName) {\n      return \"\".concat(this.buildVersionablePrefix(), \"/count.\").concat(metricName);\n    }\n  }, {\n    key: \"buildGaugeKey\",\n    value: function buildGaugeKey(metricName) {\n      return \"\".concat(this.buildVersionablePrefix(), \"/gauge.\").concat(metricName);\n    }\n  }, {\n    key: \"searchPatternForCountKeys\",\n    value: function searchPatternForCountKeys() {\n      return \"\".concat(this.buildVersionablePrefix(), \"/count.*\");\n    }\n  }, {\n    key: \"searchPatternForSplitKeys\",\n    value: function searchPatternForSplitKeys() {\n      return \"\".concat(this.settings.storage.prefix, \".split.*\");\n    }\n  }, {\n    key: \"searchPatternForLatency\",\n    value: function searchPatternForLatency() {\n      return \"\".concat(this.buildLatencyKeyPrefix(), \".*\");\n    }\n  }, {\n    key: \"extractKey\",\n    value: function extractKey(builtKey) {\n      var s = builtKey.match(everythingAtTheEnd);\n\n      if (s && s.length) {\n        return s[0];\n      } else {\n        throw 'Invalid latency key provided';\n      }\n    }\n  }, {\n    key: \"extractCounterName\",\n    value: function extractCounterName(counterKey) {\n      var m = counterKey.match(everythingAfterCount);\n\n      if (m && m.length) {\n        return m[1]; // everything after count\n      } else {\n        throw 'Invalid counter key provided';\n      }\n    }\n  }, {\n    key: \"extractLatencyMetricNameAndBucket\",\n    value: function extractLatencyMetricNameAndBucket(latencyKey) {\n      var parts = latencyKey.match(latencyMetricNameAndBucket);\n\n      if (parts && parts.length > 2) {\n        return {\n          metricName: parts[1],\n          bucketNumber: parts[2]\n        };\n      } else {\n        throw 'Invalid counter key provided';\n      }\n    }\n  }]);\n\n  return KeyBuilder;\n}();\n\nexport default KeyBuilder;"]},"metadata":{},"sourceType":"module"}