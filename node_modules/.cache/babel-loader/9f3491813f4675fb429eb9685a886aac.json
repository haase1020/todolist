{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport Engine from '../';\nimport thenable from '../../utils/promise/thenable';\nimport * as LabelsConstants from '../../utils/labels';\nimport { get } from '../../utils/lang';\nimport { CONTROL } from '../../utils/constants';\nvar treatmentException = {\n  treatment: CONTROL,\n  label: LabelsConstants.EXCEPTION,\n  config: null\n};\nexport function evaluateFeature(key, splitName, attributes, storage) {\n  var stringifiedSplit;\n\n  try {\n    stringifiedSplit = storage.splits.getSplit(splitName);\n  } catch (e) {\n    // the only scenario where getSplit can throw an error is when the storage\n    // is redis and there is a connection issue and we can't retrieve the split\n    // to be evaluated\n    return Promise.resolve(treatmentException);\n  }\n\n  if (thenable(stringifiedSplit)) {\n    return stringifiedSplit.then(function (result) {\n      return getEvaluation(result, key, attributes, storage);\n    });\n  }\n\n  return getEvaluation(stringifiedSplit, key, attributes, storage);\n}\nexport function evaluateFeatures(key, splitNames, attributes, storage) {\n  var stringifiedSplits;\n  var evaluations = {};\n\n  try {\n    stringifiedSplits = storage.splits.fetchMany(splitNames);\n  } catch (e) {\n    // the only scenario where fetchMany can throw an error is when the storage\n    // is redis and there is a connection issue and we can't retrieve the split\n    // to be evaluated\n    splitNames.forEach(function (splitName) {\n      evaluations[splitName] = treatmentException;\n    });\n    return Promise.resolve(evaluations);\n  }\n\n  return thenable(stringifiedSplits) ? stringifiedSplits.then(function (splits) {\n    return getEvaluations(splitNames, splits, key, attributes, storage);\n  }) : getEvaluations(splitNames, stringifiedSplits, key, attributes, storage);\n}\n\nfunction getEvaluation(stringifiedSplit, key, attributes, storage) {\n  var evaluation = {\n    treatment: CONTROL,\n    label: LabelsConstants.SPLIT_NOT_FOUND,\n    config: null\n  };\n\n  if (stringifiedSplit) {\n    var splitJSON = JSON.parse(stringifiedSplit);\n    var split = Engine.parse(splitJSON, storage);\n    evaluation = split.getTreatment(key, attributes, evaluateFeature); // If the storage is async, evaluation and changeNumber will return a thenable\n\n    if (thenable(evaluation)) {\n      return evaluation.then(function (result) {\n        result.changeNumber = split.getChangeNumber();\n        result.config = get(splitJSON, \"configurations.\".concat(result.treatment), null);\n        return result;\n      });\n    } else {\n      evaluation.changeNumber = split.getChangeNumber(); // Always sync and optional\n\n      evaluation.config = get(splitJSON, \"configurations.\".concat(evaluation.treatment), null);\n    }\n  }\n\n  return evaluation;\n}\n\nfunction getEvaluations(splitNames, splits, key, attributes, storage) {\n  var result = {};\n  var thenables = [];\n  splitNames.forEach(function (splitName) {\n    var evaluation = getEvaluation(splits[splitName], key, attributes, storage);\n\n    if (thenable(evaluation)) {\n      thenables.push(evaluation.then(function (res) {\n        result[splitName] = res;\n      }));\n    } else {\n      result[splitName] = evaluation;\n    }\n  });\n  return thenables.length > 0 ? Promise.all(thenables).then(function () {\n    return result;\n  }) : result;\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/evaluator/index.js"],"names":["Engine","thenable","LabelsConstants","get","CONTROL","treatmentException","treatment","label","EXCEPTION","config","evaluateFeature","key","splitName","attributes","storage","stringifiedSplit","splits","getSplit","e","Promise","resolve","then","result","getEvaluation","evaluateFeatures","splitNames","stringifiedSplits","evaluations","fetchMany","forEach","getEvaluations","evaluation","SPLIT_NOT_FOUND","splitJSON","JSON","parse","split","getTreatment","changeNumber","getChangeNumber","concat","thenables","push","res","length","all"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport Engine from '../';\nimport thenable from '../../utils/promise/thenable';\nimport * as LabelsConstants from '../../utils/labels';\nimport { get } from '../../utils/lang';\nimport { CONTROL } from '../../utils/constants';\nvar treatmentException = {\n  treatment: CONTROL,\n  label: LabelsConstants.EXCEPTION,\n  config: null\n};\nexport function evaluateFeature(key, splitName, attributes, storage) {\n  var stringifiedSplit;\n\n  try {\n    stringifiedSplit = storage.splits.getSplit(splitName);\n  } catch (e) {\n    // the only scenario where getSplit can throw an error is when the storage\n    // is redis and there is a connection issue and we can't retrieve the split\n    // to be evaluated\n    return Promise.resolve(treatmentException);\n  }\n\n  if (thenable(stringifiedSplit)) {\n    return stringifiedSplit.then(function (result) {\n      return getEvaluation(result, key, attributes, storage);\n    });\n  }\n\n  return getEvaluation(stringifiedSplit, key, attributes, storage);\n}\nexport function evaluateFeatures(key, splitNames, attributes, storage) {\n  var stringifiedSplits;\n  var evaluations = {};\n\n  try {\n    stringifiedSplits = storage.splits.fetchMany(splitNames);\n  } catch (e) {\n    // the only scenario where fetchMany can throw an error is when the storage\n    // is redis and there is a connection issue and we can't retrieve the split\n    // to be evaluated\n    splitNames.forEach(function (splitName) {\n      evaluations[splitName] = treatmentException;\n    });\n    return Promise.resolve(evaluations);\n  }\n\n  return thenable(stringifiedSplits) ? stringifiedSplits.then(function (splits) {\n    return getEvaluations(splitNames, splits, key, attributes, storage);\n  }) : getEvaluations(splitNames, stringifiedSplits, key, attributes, storage);\n}\n\nfunction getEvaluation(stringifiedSplit, key, attributes, storage) {\n  var evaluation = {\n    treatment: CONTROL,\n    label: LabelsConstants.SPLIT_NOT_FOUND,\n    config: null\n  };\n\n  if (stringifiedSplit) {\n    var splitJSON = JSON.parse(stringifiedSplit);\n    var split = Engine.parse(splitJSON, storage);\n    evaluation = split.getTreatment(key, attributes, evaluateFeature); // If the storage is async, evaluation and changeNumber will return a thenable\n\n    if (thenable(evaluation)) {\n      return evaluation.then(function (result) {\n        result.changeNumber = split.getChangeNumber();\n        result.config = get(splitJSON, \"configurations.\".concat(result.treatment), null);\n        return result;\n      });\n    } else {\n      evaluation.changeNumber = split.getChangeNumber(); // Always sync and optional\n\n      evaluation.config = get(splitJSON, \"configurations.\".concat(evaluation.treatment), null);\n    }\n  }\n\n  return evaluation;\n}\n\nfunction getEvaluations(splitNames, splits, key, attributes, storage) {\n  var result = {};\n  var thenables = [];\n  splitNames.forEach(function (splitName) {\n    var evaluation = getEvaluation(splits[splitName], key, attributes, storage);\n\n    if (thenable(evaluation)) {\n      thenables.push(evaluation.then(function (res) {\n        result[splitName] = res;\n      }));\n    } else {\n      result[splitName] = evaluation;\n    }\n  });\n  return thenables.length > 0 ? Promise.all(thenables).then(function () {\n    return result;\n  }) : result;\n}"]},"metadata":{},"sourceType":"module"}