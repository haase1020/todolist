{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport objectAssign from 'object-assign';\nimport thenable from '../promise/thenable';\nimport constants from './constants';\n\nvar Context = /*#__PURE__*/function () {\n  function Context() {\n    _classCallCheck(this, Context);\n\n    this._map = {};\n    this.constants = constants;\n  }\n  /**\n   * Gets an item in the context instance or a promise if the item is not yet stored and we are not doing a one time check.\n   * @param {String} name - The name of the item we want to get\n   * @return {Any} The item we want to get.\n   */\n\n\n  _createClass(Context, [{\n    key: \"get\",\n    value: function get(name) {\n      var flagCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (typeof name !== 'string' || typeof name === 'string' && !name.length) return; // Wrong usage, don't generate item promise.\n\n      var item = this._map[name]; // If we have the item, return it.\n\n      if (item !== undefined) {\n        return item;\n      } else if (!flagCheck) {\n        // If we don't and it's not a flag check, return a promise that we will resolve once we receive the item.\n        var resolve;\n        var promise = new Promise(function (res) {\n          return resolve = res;\n        });\n        promise.manualResolve = resolve;\n        this._map[name] = promise;\n        return promise;\n      }\n    }\n    /**\n     * Gets all objects stored in the context.\n     * @return {Object} - A new map of context-stored items.\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return objectAssign({}, this._map);\n    }\n    /**\n     * Stores an item in the context instance.\n     * @param {String} name - The name of what we are storing\n     * @param {Any} item - The item can be of any type.\n     * @return {Boolean} - The result of the operation\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(name, item) {\n      var _this = this;\n\n      if (typeof name !== 'string' || typeof name === 'string' && !name.length || item === undefined) return false; // We can't store this.\n\n      var existingItem = this._map[name]; // Item already exists and no one is waiting for the item. Abort and return false.\n\n      if (existingItem !== undefined && typeof existingItem.manualResolve !== 'function') return false; // Someone is waiting for this item, resolve to it.\n\n      if (thenable(existingItem) && existingItem.manualResolve) existingItem.manualResolve(item); // We are storing a promise, when resolving save the item. On error, clean up the item.\n\n      if (thenable(item)) {\n        item.then(function (item) {\n          _this._map[name] = item;\n          return item;\n        }).catch(function (err) {\n          _this._map[name] = undefined;\n          return err;\n        });\n      }\n\n      this._map[name] = item;\n      return true;\n    }\n  }]);\n\n  return Context;\n}();\n\nexport default Context;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/context/index.js"],"names":["_classCallCheck","_createClass","objectAssign","thenable","constants","Context","_map","key","value","get","name","flagCheck","arguments","length","undefined","item","resolve","promise","Promise","res","manualResolve","getAll","put","_this","existingItem","then","catch","err"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport objectAssign from 'object-assign';\nimport thenable from '../promise/thenable';\nimport constants from './constants';\n\nvar Context = /*#__PURE__*/function () {\n  function Context() {\n    _classCallCheck(this, Context);\n\n    this._map = {};\n    this.constants = constants;\n  }\n  /**\n   * Gets an item in the context instance or a promise if the item is not yet stored and we are not doing a one time check.\n   * @param {String} name - The name of the item we want to get\n   * @return {Any} The item we want to get.\n   */\n\n\n  _createClass(Context, [{\n    key: \"get\",\n    value: function get(name) {\n      var flagCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (typeof name !== 'string' || typeof name === 'string' && !name.length) return; // Wrong usage, don't generate item promise.\n\n      var item = this._map[name]; // If we have the item, return it.\n\n      if (item !== undefined) {\n        return item;\n      } else if (!flagCheck) {\n        // If we don't and it's not a flag check, return a promise that we will resolve once we receive the item.\n        var resolve;\n        var promise = new Promise(function (res) {\n          return resolve = res;\n        });\n        promise.manualResolve = resolve;\n        this._map[name] = promise;\n        return promise;\n      }\n    }\n    /**\n     * Gets all objects stored in the context.\n     * @return {Object} - A new map of context-stored items.\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return objectAssign({}, this._map);\n    }\n    /**\n     * Stores an item in the context instance.\n     * @param {String} name - The name of what we are storing\n     * @param {Any} item - The item can be of any type.\n     * @return {Boolean} - The result of the operation\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(name, item) {\n      var _this = this;\n\n      if (typeof name !== 'string' || typeof name === 'string' && !name.length || item === undefined) return false; // We can't store this.\n\n      var existingItem = this._map[name]; // Item already exists and no one is waiting for the item. Abort and return false.\n\n      if (existingItem !== undefined && typeof existingItem.manualResolve !== 'function') return false; // Someone is waiting for this item, resolve to it.\n\n      if (thenable(existingItem) && existingItem.manualResolve) existingItem.manualResolve(item); // We are storing a promise, when resolving save the item. On error, clean up the item.\n\n      if (thenable(item)) {\n        item.then(function (item) {\n          _this._map[name] = item;\n          return item;\n        }).catch(function (err) {\n          _this._map[name] = undefined;\n          return err;\n        });\n      }\n\n      this._map[name] = item;\n      return true;\n    }\n  }]);\n\n  return Context;\n}();\n\nexport default Context;"]},"metadata":{},"sourceType":"module"}