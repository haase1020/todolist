{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport thenable from '../../utils/promise/thenable';\nvar MAX_QUEUE_BYTE_SIZE = 5 * 1024 * 1024; // 5M\n\nvar EventsCache = /*#__PURE__*/function () {\n  function EventsCache(context) {\n    var _this = this;\n\n    _classCallCheck(this, EventsCache);\n\n    var settings = context.get(context.constants.SETTINGS);\n    var eventsModule = context.get(context.constants.EVENTS);\n    this.onFullQueue = false;\n    this.maxQueue = settings.scheduler.eventsQueueSize;\n    this.queue = [];\n    this.queueByteSize = 0;\n\n    if (thenable(eventsModule)) {\n      eventsModule.then(function (events) {\n        _this.onFullQueue = events.flushAndResetTimer;\n\n        _this._checkForFlush(); // Events is ready, check the queue.\n\n      });\n    } else if (typeof eventsModule.flushAndResetTimer === 'function') {\n      this.onFullQueue = eventsModule.flushAndResetTimer;\n    }\n  }\n  /**\n   * Get the current state of the queue.\n   */\n\n\n  _createClass(EventsCache, [{\n    key: \"state\",\n    value: function state() {\n      return this.queue;\n    }\n    /**\n     * Add a new event object at the end of the queue.\n     */\n\n  }, {\n    key: \"track\",\n    value: function track(data) {\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.queueByteSize += size;\n      this.queue.push(data);\n\n      this._checkForFlush();\n\n      return true;\n    }\n    /**\n     * Clear the data stored on the cache.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.queue = [];\n      this.queueByteSize = 0;\n      return this;\n    }\n    /**\n     * Returns the payload we will use for posting data.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.queue;\n    }\n    /**\n     * Check if the cache is empty.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.queue.length === 0;\n    }\n    /**\n     * Check if the cache queue is full and we need to flush it.\n     */\n\n  }, {\n    key: \"_checkForFlush\",\n    value: function _checkForFlush() {\n      if (this.queueByteSize > MAX_QUEUE_BYTE_SIZE || // 0 means no maximum value, in case we want to avoid this being triggered. Size limit is not affected by it.\n      this.maxQueue > 0 && this.queue.length >= this.maxQueue) {\n        this.onFullQueue && this.onFullQueue();\n      }\n    }\n  }]);\n\n  return EventsCache;\n}();\n\nexport default EventsCache;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/storage/EventsCache/InMemory.js"],"names":["_classCallCheck","_createClass","thenable","MAX_QUEUE_BYTE_SIZE","EventsCache","context","_this","settings","get","constants","SETTINGS","eventsModule","EVENTS","onFullQueue","maxQueue","scheduler","eventsQueueSize","queue","queueByteSize","then","events","flushAndResetTimer","_checkForFlush","key","value","state","track","data","size","arguments","length","undefined","push","clear","toJSON","isEmpty"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport thenable from '../../utils/promise/thenable';\nvar MAX_QUEUE_BYTE_SIZE = 5 * 1024 * 1024; // 5M\n\nvar EventsCache = /*#__PURE__*/function () {\n  function EventsCache(context) {\n    var _this = this;\n\n    _classCallCheck(this, EventsCache);\n\n    var settings = context.get(context.constants.SETTINGS);\n    var eventsModule = context.get(context.constants.EVENTS);\n    this.onFullQueue = false;\n    this.maxQueue = settings.scheduler.eventsQueueSize;\n    this.queue = [];\n    this.queueByteSize = 0;\n\n    if (thenable(eventsModule)) {\n      eventsModule.then(function (events) {\n        _this.onFullQueue = events.flushAndResetTimer;\n\n        _this._checkForFlush(); // Events is ready, check the queue.\n\n      });\n    } else if (typeof eventsModule.flushAndResetTimer === 'function') {\n      this.onFullQueue = eventsModule.flushAndResetTimer;\n    }\n  }\n  /**\n   * Get the current state of the queue.\n   */\n\n\n  _createClass(EventsCache, [{\n    key: \"state\",\n    value: function state() {\n      return this.queue;\n    }\n    /**\n     * Add a new event object at the end of the queue.\n     */\n\n  }, {\n    key: \"track\",\n    value: function track(data) {\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.queueByteSize += size;\n      this.queue.push(data);\n\n      this._checkForFlush();\n\n      return true;\n    }\n    /**\n     * Clear the data stored on the cache.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.queue = [];\n      this.queueByteSize = 0;\n      return this;\n    }\n    /**\n     * Returns the payload we will use for posting data.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.queue;\n    }\n    /**\n     * Check if the cache is empty.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.queue.length === 0;\n    }\n    /**\n     * Check if the cache queue is full and we need to flush it.\n     */\n\n  }, {\n    key: \"_checkForFlush\",\n    value: function _checkForFlush() {\n      if (this.queueByteSize > MAX_QUEUE_BYTE_SIZE || // 0 means no maximum value, in case we want to avoid this being triggered. Size limit is not affected by it.\n      this.maxQueue > 0 && this.queue.length >= this.maxQueue) {\n        this.onFullQueue && this.onFullQueue();\n      }\n    }\n  }]);\n\n  return EventsCache;\n}();\n\nexport default EventsCache;"]},"metadata":{},"sourceType":"module"}