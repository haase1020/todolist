{"ast":null,"code":"import React from 'react';\nimport SplitContext from './SplitContext';\nimport { ERROR_UM_NO_USECONTEXT } from './constants';\nimport { checkHooks } from './utils';\n/**\n * 'useManager' is a custom hook that returns the Manager instance from the Split factory.\n * It uses the 'useContext' hook to access the factory at Split context, which is updated by\n * the SplitFactory component.\n *\n * @return A Split Manager instance, or null if used outside the scope of SplitFactory\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#manager}\n */\n\nconst useManager = () => {\n  if (!checkHooks(ERROR_UM_NO_USECONTEXT)) return null;\n  const {\n    factory\n  } = React.useContext(SplitContext);\n  return factory ? factory.manager() : null;\n};\n\nexport default useManager;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/useManager.js"],"names":["React","SplitContext","ERROR_UM_NO_USECONTEXT","checkHooks","useManager","factory","useContext","manager"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,sBAAT,QAAuC,aAAvC;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA;;;;;;;;;AAQA,MAAMC,UAAU,GAAG,MAAM;AACrB,MAAI,CAACD,UAAU,CAACD,sBAAD,CAAf,EACI,OAAO,IAAP;AACJ,QAAM;AAAEG,IAAAA;AAAF,MAAcL,KAAK,CAACM,UAAN,CAAiBL,YAAjB,CAApB;AACA,SAAOI,OAAO,GAAGA,OAAO,CAACE,OAAR,EAAH,GAAuB,IAArC;AACH,CALD;;AAMA,eAAeH,UAAf","sourcesContent":["import React from 'react';\nimport SplitContext from './SplitContext';\nimport { ERROR_UM_NO_USECONTEXT } from './constants';\nimport { checkHooks } from './utils';\n/**\n * 'useManager' is a custom hook that returns the Manager instance from the Split factory.\n * It uses the 'useContext' hook to access the factory at Split context, which is updated by\n * the SplitFactory component.\n *\n * @return A Split Manager instance, or null if used outside the scope of SplitFactory\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#manager}\n */\nconst useManager = () => {\n    if (!checkHooks(ERROR_UM_NO_USECONTEXT))\n        return null;\n    const { factory } = React.useContext(SplitContext);\n    return factory ? factory.manager() : null;\n};\nexport default useManager;\n"]},"metadata":{},"sourceType":"module"}