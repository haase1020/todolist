{"ast":null,"code":"import SplitCacheInMemory from './SplitCache/InMemory';\nimport SplitCacheInLocalStorage from './SplitCache/InLocalStorage';\nimport SegmentCacheInMemory from './SegmentCache/InMemory';\nimport SegmentCacheInLocalStorage from './SegmentCache/InLocalStorage';\nimport ImpressionsCacheInMemory from './ImpressionsCache/InMemory';\nimport LatencyCacheInMemory from './LatencyCache/InMemory';\nimport CountCacheInMemory from './CountCache/InMemory';\nimport EventsCacheInMemory from './EventsCache/InMemory';\nimport KeyBuilder from './Keys';\nimport KeyBuilderLocalStorage from './KeysLocalStorage';\nimport { STORAGE_MEMORY, STORAGE_LOCALSTORAGE } from '../utils/constants'; // This value might be eventually set via a config parameter\n\nexport var DEFAULT_CACHE_EXPIRATION_IN_MILLIS = 864000000; // 10 days\n\nvar BrowserStorageFactory = function BrowserStorageFactory(context) {\n  var settings = context.get(context.constants.SETTINGS);\n  var storage = settings.storage;\n\n  switch (storage.type) {\n    case STORAGE_MEMORY:\n      {\n        var keys = new KeyBuilder(settings);\n        return {\n          splits: new SplitCacheInMemory(),\n          segments: new SegmentCacheInMemory(keys),\n          impressions: new ImpressionsCacheInMemory(),\n          metrics: new LatencyCacheInMemory(),\n          count: new CountCacheInMemory(),\n          events: new EventsCacheInMemory(context),\n          // When using shared instanciation with MEMORY we reuse everything but segments (they are customer per key).\n          shared: function shared(settings) {\n            var childKeyBuilder = new KeyBuilder(settings);\n            return {\n              splits: this.splits,\n              segments: new SegmentCacheInMemory(childKeyBuilder),\n              impressions: this.impressions,\n              metrics: this.metrics,\n              count: this.count,\n              events: this.events,\n              destroy: function destroy() {\n                this.splits = new SplitCacheInMemory();\n                this.segments.flush();\n              }\n            };\n          },\n          destroy: function destroy() {\n            this.splits.flush();\n            this.segments.flush();\n            this.impressions.clear();\n            this.metrics.clear();\n            this.count.clear();\n            this.events.clear();\n          }\n        };\n      }\n\n    case STORAGE_LOCALSTORAGE:\n      {\n        var _keys = new KeyBuilderLocalStorage(settings);\n\n        var expirationTimestamp = Date.now() - DEFAULT_CACHE_EXPIRATION_IN_MILLIS;\n        return {\n          splits: new SplitCacheInLocalStorage(_keys, expirationTimestamp, settings.sync.__splitFiltersValidation),\n          segments: new SegmentCacheInLocalStorage(_keys),\n          impressions: new ImpressionsCacheInMemory(),\n          metrics: new LatencyCacheInMemory(),\n          count: new CountCacheInMemory(),\n          events: new EventsCacheInMemory(context),\n          // When using shared instanciation with MEMORY we reuse everything but segments (they are customer per key).\n          shared: function shared(settings) {\n            var childKeysBuilder = new KeyBuilderLocalStorage(settings);\n            return {\n              splits: this.splits,\n              segments: new SegmentCacheInLocalStorage(childKeysBuilder),\n              impressions: this.impressions,\n              metrics: this.metrics,\n              count: this.count,\n              events: this.events,\n              destroy: function destroy() {\n                this.splits = new SplitCacheInMemory();\n                this.segments = new SegmentCacheInMemory(childKeysBuilder);\n              }\n            };\n          },\n          destroy: function destroy() {\n            this.splits = new SplitCacheInMemory();\n            this.segments = new SegmentCacheInMemory(new KeyBuilder(settings));\n            this.impressions.clear();\n            this.metrics.clear();\n            this.count.clear();\n            this.events.clear();\n          }\n        };\n      }\n\n    default:\n      throw new Error('Unsupported storage type');\n  }\n};\n\nexport default BrowserStorageFactory;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/storage/browser.js"],"names":["SplitCacheInMemory","SplitCacheInLocalStorage","SegmentCacheInMemory","SegmentCacheInLocalStorage","ImpressionsCacheInMemory","LatencyCacheInMemory","CountCacheInMemory","EventsCacheInMemory","KeyBuilder","KeyBuilderLocalStorage","STORAGE_MEMORY","STORAGE_LOCALSTORAGE","DEFAULT_CACHE_EXPIRATION_IN_MILLIS","BrowserStorageFactory","context","settings","get","constants","SETTINGS","storage","type","keys","splits","segments","impressions","metrics","count","events","shared","childKeyBuilder","destroy","flush","clear","_keys","expirationTimestamp","Date","now","sync","__splitFiltersValidation","childKeysBuilder","Error"],"mappings":"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","sourcesContent":["import SplitCacheInMemory from './SplitCache/InMemory';\nimport SplitCacheInLocalStorage from './SplitCache/InLocalStorage';\nimport SegmentCacheInMemory from './SegmentCache/InMemory';\nimport SegmentCacheInLocalStorage from './SegmentCache/InLocalStorage';\nimport ImpressionsCacheInMemory from './ImpressionsCache/InMemory';\nimport LatencyCacheInMemory from './LatencyCache/InMemory';\nimport CountCacheInMemory from './CountCache/InMemory';\nimport EventsCacheInMemory from './EventsCache/InMemory';\nimport KeyBuilder from './Keys';\nimport KeyBuilderLocalStorage from './KeysLocalStorage';\nimport { STORAGE_MEMORY, STORAGE_LOCALSTORAGE } from '../utils/constants'; // This value might be eventually set via a config parameter\n\nexport var DEFAULT_CACHE_EXPIRATION_IN_MILLIS = 864000000; // 10 days\n\nvar BrowserStorageFactory = function BrowserStorageFactory(context) {\n  var settings = context.get(context.constants.SETTINGS);\n  var storage = settings.storage;\n\n  switch (storage.type) {\n    case STORAGE_MEMORY:\n      {\n        var keys = new KeyBuilder(settings);\n        return {\n          splits: new SplitCacheInMemory(),\n          segments: new SegmentCacheInMemory(keys),\n          impressions: new ImpressionsCacheInMemory(),\n          metrics: new LatencyCacheInMemory(),\n          count: new CountCacheInMemory(),\n          events: new EventsCacheInMemory(context),\n          // When using shared instanciation with MEMORY we reuse everything but segments (they are customer per key).\n          shared: function shared(settings) {\n            var childKeyBuilder = new KeyBuilder(settings);\n            return {\n              splits: this.splits,\n              segments: new SegmentCacheInMemory(childKeyBuilder),\n              impressions: this.impressions,\n              metrics: this.metrics,\n              count: this.count,\n              events: this.events,\n              destroy: function destroy() {\n                this.splits = new SplitCacheInMemory();\n                this.segments.flush();\n              }\n            };\n          },\n          destroy: function destroy() {\n            this.splits.flush();\n            this.segments.flush();\n            this.impressions.clear();\n            this.metrics.clear();\n            this.count.clear();\n            this.events.clear();\n          }\n        };\n      }\n\n    case STORAGE_LOCALSTORAGE:\n      {\n        var _keys = new KeyBuilderLocalStorage(settings);\n\n        var expirationTimestamp = Date.now() - DEFAULT_CACHE_EXPIRATION_IN_MILLIS;\n        return {\n          splits: new SplitCacheInLocalStorage(_keys, expirationTimestamp, settings.sync.__splitFiltersValidation),\n          segments: new SegmentCacheInLocalStorage(_keys),\n          impressions: new ImpressionsCacheInMemory(),\n          metrics: new LatencyCacheInMemory(),\n          count: new CountCacheInMemory(),\n          events: new EventsCacheInMemory(context),\n          // When using shared instanciation with MEMORY we reuse everything but segments (they are customer per key).\n          shared: function shared(settings) {\n            var childKeysBuilder = new KeyBuilderLocalStorage(settings);\n            return {\n              splits: this.splits,\n              segments: new SegmentCacheInLocalStorage(childKeysBuilder),\n              impressions: this.impressions,\n              metrics: this.metrics,\n              count: this.count,\n              events: this.events,\n              destroy: function destroy() {\n                this.splits = new SplitCacheInMemory();\n                this.segments = new SegmentCacheInMemory(childKeysBuilder);\n              }\n            };\n          },\n          destroy: function destroy() {\n            this.splits = new SplitCacheInMemory();\n            this.segments = new SegmentCacheInMemory(new KeyBuilder(settings));\n            this.impressions.clear();\n            this.metrics.clear();\n            this.count.clear();\n            this.events.clear();\n          }\n        };\n      }\n\n    default:\n      throw new Error('Unsupported storage type');\n  }\n};\n\nexport default BrowserStorageFactory;"]},"metadata":{},"sourceType":"module"}