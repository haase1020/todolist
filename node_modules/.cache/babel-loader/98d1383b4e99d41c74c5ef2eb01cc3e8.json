{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport { Logger, LogLevels, setLogLevel as _setLogLevel } from './LoggerFactory';\nimport isLocalStorageAvailable from '../localstorage/isAvailable';\nimport { find, merge } from '../lang';\n\nvar isLogLevelString = function isLogLevelString(str) {\n  return !!find(LogLevels, function (lvl) {\n    return str === lvl;\n  });\n};\n\nvar defaultOptions = {\n  showLevel: true,\n  displayAllErrors: false\n};\nvar LS_KEY = 'splitio_debug';\nvar ENV_VAR_KEY = 'SPLITIO_DEBUG';\nvar isNode = false; // We check for version truthiness since most shims will have that as empty string.\n\nif (typeof process !== 'undefined' && typeof process.version !== 'undefined' && !!process.version) {\n  isNode = true;\n}\n\nvar initialState = String(isNode ? process.env[ENV_VAR_KEY] : isLocalStorageAvailable() ? localStorage.getItem(LS_KEY) : '');\n\nvar createLog = function createLog(namespace) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Logger(namespace, merge(options, defaultOptions));\n};\n\nvar ownLog = createLog('splitio-utils:logger');\n/**\n * The public Logger utility API.\n */\n\nexport var API = {\n  /**\n   * Enables all the logs.\n   */\n  enable: function enable() {\n    _setLogLevel(LogLevels.DEBUG);\n  },\n\n  /**\n   * Sets a custom log Level for the SDK.\n   * @param {string} logLevel - Custom LogLevel value.\n   */\n  setLogLevel: function setLogLevel(logLevel) {\n    if (isLogLevelString(logLevel)) {\n      _setLogLevel(logLevel);\n    } else {\n      ownLog.error('Invalid Log Level - No changes to the logs will be applied.');\n    }\n  },\n\n  /**\n   * Disables all the log levels.\n   */\n  disable: function disable() {\n    // Disabling is equal logLevel none\n    _setLogLevel(LogLevels.NONE);\n  },\n\n  /**\n   * Exposed for usage with setLogLevel\n   */\n  LogLevel: LogLevels\n}; // \"enable\", \"enabled\" and \"on\", are synonims with 'DEBUG' loglevel\n\nif (/^(enabled?|on)/i.test(initialState)) {\n  API.enable(LogLevels.DEBUG);\n} else if (isLogLevelString(initialState)) {\n  API.setLogLevel(initialState);\n} else {\n  // By default it starts disabled.\n  API.disable();\n} // By default we expose logger instance creator wrapper.\n\n\nexport default createLog;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/logger/index.js"],"names":["Logger","LogLevels","setLogLevel","_setLogLevel","isLocalStorageAvailable","find","merge","isLogLevelString","str","lvl","defaultOptions","showLevel","displayAllErrors","LS_KEY","ENV_VAR_KEY","isNode","process","version","initialState","String","env","localStorage","getItem","createLog","namespace","options","arguments","length","undefined","ownLog","API","enable","DEBUG","logLevel","error","disable","NONE","LogLevel","test"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,WAAW,IAAIC,YAA3C,QAA+D,iBAA/D;AACA,OAAOC,uBAAP,MAAoC,6BAApC;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,SAA5B;;AAEA,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,GAA1B,EAA+B;AACpD,SAAO,CAAC,CAACH,IAAI,CAACJ,SAAD,EAAY,UAAUQ,GAAV,EAAe;AACtC,WAAOD,GAAG,KAAKC,GAAf;AACD,GAFY,CAAb;AAGD,CAJD;;AAMA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,SAAS,EAAE,IADQ;AAEnBC,EAAAA,gBAAgB,EAAE;AAFC,CAArB;AAIA,IAAIC,MAAM,GAAG,eAAb;AACA,IAAIC,WAAW,GAAG,eAAlB;AACA,IAAIC,MAAM,GAAG,KAAb,C,CAAoB;;AAEpB,IAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACC,OAAf,KAA2B,WAA7D,IAA4E,CAAC,CAACD,OAAO,CAACC,OAA1F,EAAmG;AACjGF,EAAAA,MAAM,GAAG,IAAT;AACD;;AAED,IAAIG,YAAY,GAAGC,MAAM,CAACJ,MAAM,GAAGC,OAAO,CAACI,GAAR,CAAYN,WAAZ,CAAH,GAA8BV,uBAAuB,KAAKiB,YAAY,CAACC,OAAb,CAAqBT,MAArB,CAAL,GAAoC,EAAhG,CAAzB;;AAEA,IAAIU,SAAS,GAAG,SAASA,SAAT,CAAmBC,SAAnB,EAA8B;AAC5C,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,SAAO,IAAI1B,MAAJ,CAAWwB,SAAX,EAAsBlB,KAAK,CAACmB,OAAD,EAAUf,cAAV,CAA3B,CAAP;AACD,CAHD;;AAKA,IAAImB,MAAM,GAAGN,SAAS,CAAC,sBAAD,CAAtB;AACA;;;;AAIA,OAAO,IAAIO,GAAG,GAAG;AACf;;;AAGAC,EAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB5B,IAAAA,YAAY,CAACF,SAAS,CAAC+B,KAAX,CAAZ;AACD,GANc;;AAQf;;;;AAIA9B,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqB+B,QAArB,EAA+B;AAC1C,QAAI1B,gBAAgB,CAAC0B,QAAD,CAApB,EAAgC;AAC9B9B,MAAAA,YAAY,CAAC8B,QAAD,CAAZ;AACD,KAFD,MAEO;AACLJ,MAAAA,MAAM,CAACK,KAAP,CAAa,6DAAb;AACD;AACF,GAlBc;;AAoBf;;;AAGAC,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B;AACAhC,IAAAA,YAAY,CAACF,SAAS,CAACmC,IAAX,CAAZ;AACD,GA1Bc;;AA4Bf;;;AAGAC,EAAAA,QAAQ,EAAEpC;AA/BK,CAAV,C,CAgCJ;;AAEH,IAAI,kBAAkBqC,IAAlB,CAAuBpB,YAAvB,CAAJ,EAA0C;AACxCY,EAAAA,GAAG,CAACC,MAAJ,CAAW9B,SAAS,CAAC+B,KAArB;AACD,CAFD,MAEO,IAAIzB,gBAAgB,CAACW,YAAD,CAApB,EAAoC;AACzCY,EAAAA,GAAG,CAAC5B,WAAJ,CAAgBgB,YAAhB;AACD,CAFM,MAEA;AACL;AACAY,EAAAA,GAAG,CAACK,OAAJ;AACD,C,CAAC;;;AAGF,eAAeZ,SAAf","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport { Logger, LogLevels, setLogLevel as _setLogLevel } from './LoggerFactory';\nimport isLocalStorageAvailable from '../localstorage/isAvailable';\nimport { find, merge } from '../lang';\n\nvar isLogLevelString = function isLogLevelString(str) {\n  return !!find(LogLevels, function (lvl) {\n    return str === lvl;\n  });\n};\n\nvar defaultOptions = {\n  showLevel: true,\n  displayAllErrors: false\n};\nvar LS_KEY = 'splitio_debug';\nvar ENV_VAR_KEY = 'SPLITIO_DEBUG';\nvar isNode = false; // We check for version truthiness since most shims will have that as empty string.\n\nif (typeof process !== 'undefined' && typeof process.version !== 'undefined' && !!process.version) {\n  isNode = true;\n}\n\nvar initialState = String(isNode ? process.env[ENV_VAR_KEY] : isLocalStorageAvailable() ? localStorage.getItem(LS_KEY) : '');\n\nvar createLog = function createLog(namespace) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Logger(namespace, merge(options, defaultOptions));\n};\n\nvar ownLog = createLog('splitio-utils:logger');\n/**\n * The public Logger utility API.\n */\n\nexport var API = {\n  /**\n   * Enables all the logs.\n   */\n  enable: function enable() {\n    _setLogLevel(LogLevels.DEBUG);\n  },\n\n  /**\n   * Sets a custom log Level for the SDK.\n   * @param {string} logLevel - Custom LogLevel value.\n   */\n  setLogLevel: function setLogLevel(logLevel) {\n    if (isLogLevelString(logLevel)) {\n      _setLogLevel(logLevel);\n    } else {\n      ownLog.error('Invalid Log Level - No changes to the logs will be applied.');\n    }\n  },\n\n  /**\n   * Disables all the log levels.\n   */\n  disable: function disable() {\n    // Disabling is equal logLevel none\n    _setLogLevel(LogLevels.NONE);\n  },\n\n  /**\n   * Exposed for usage with setLogLevel\n   */\n  LogLevel: LogLevels\n}; // \"enable\", \"enabled\" and \"on\", are synonims with 'DEBUG' loglevel\n\nif (/^(enabled?|on)/i.test(initialState)) {\n  API.enable(LogLevels.DEBUG);\n} else if (isLogLevelString(initialState)) {\n  API.setLogLevel(initialState);\n} else {\n  // By default it starts disabled.\n  API.disable();\n} // By default we expose logger instance creator wrapper.\n\n\nexport default createLog;"]},"metadata":{},"sourceType":"module"}