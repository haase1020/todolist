{"ast":null,"code":"import React from 'react';\nimport memoizeOne from 'memoize-one';\nimport shallowEqual from 'shallowequal';\nimport SplitContext from './SplitContext';\nimport { getControlTreatmentsWithConfig, WARN_ST_NO_CLIENT } from './constants';\n\nfunction argsAreEqual(newArgs, lastArgs) {\n  return newArgs[0] === lastArgs[0] && // client\n  newArgs[1] === lastArgs[1] && // lastUpdate\n  shallowEqual(newArgs[2], lastArgs[2]) && // names\n  shallowEqual(newArgs[3], lastArgs[3]); // attributes\n}\n\nfunction evaluateSplits(client, lastUpdate, names, attributes) {\n  return client.getTreatmentsWithConfig(names, attributes);\n}\n/**\n * SplitTreatments accepts a list of split names and optional attributes. It access the client at SplitContext to\n * call 'client.getTreatmentsWithConfig()' method, and passes the returned treatments to a child as a function.\n *\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#get-treatments-with-configurations}\n */\n\n\nclass SplitTreatments extends React.Component {\n  constructor() {\n    super(...arguments); // Attaching a memoized `client.getTreatmentsWithConfig` function to the component instance, to avoid duplicated impressions because\n    // the function result is the same given the same `client` instance, `lastUpdate` timestamp, and list of split `names` and `attributes`.\n\n    this.evaluateSplits = memoizeOne(evaluateSplits, argsAreEqual);\n  }\n\n  render() {\n    const {\n      names,\n      children,\n      attributes\n    } = this.props;\n    return React.createElement(SplitContext.Consumer, null, splitContext => {\n      const {\n        client,\n        isReady,\n        isReadyFromCache,\n        isDestroyed,\n        lastUpdate\n      } = splitContext;\n      let treatments;\n      const isOperational = !isDestroyed && (isReady || isReadyFromCache);\n\n      if (client && isOperational) {\n        treatments = this.evaluateSplits(client, lastUpdate, names, attributes);\n      } else {\n        treatments = getControlTreatmentsWithConfig(names);\n\n        if (!client) {\n          this.logWarning = true;\n        }\n      } // SplitTreatments only accepts a function as a child, not a React Element (JSX)\n\n\n      return children(Object.assign(Object.assign({}, splitContext), {\n        treatments\n      }));\n    });\n  }\n\n  componentDidMount() {\n    if (this.logWarning) {\n      console.log(WARN_ST_NO_CLIENT);\n    }\n  }\n\n}\n\nexport default SplitTreatments;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/SplitTreatments.js"],"names":["React","memoizeOne","shallowEqual","SplitContext","getControlTreatmentsWithConfig","WARN_ST_NO_CLIENT","argsAreEqual","newArgs","lastArgs","evaluateSplits","client","lastUpdate","names","attributes","getTreatmentsWithConfig","SplitTreatments","Component","constructor","arguments","render","children","props","createElement","Consumer","splitContext","isReady","isReadyFromCache","isDestroyed","treatments","isOperational","logWarning","Object","assign","componentDidMount","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,8BAAT,EAAyCC,iBAAzC,QAAkE,aAAlE;;AACA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,QAA/B,EAAyC;AACrC,SAAOD,OAAO,CAAC,CAAD,CAAP,KAAeC,QAAQ,CAAC,CAAD,CAAvB,IAA8B;AACjCD,EAAAA,OAAO,CAAC,CAAD,CAAP,KAAeC,QAAQ,CAAC,CAAD,CADpB,IAC2B;AAC9BN,EAAAA,YAAY,CAACK,OAAO,CAAC,CAAD,CAAR,EAAaC,QAAQ,CAAC,CAAD,CAArB,CAFT,IAEsC;AACzCN,EAAAA,YAAY,CAACK,OAAO,CAAC,CAAD,CAAR,EAAaC,QAAQ,CAAC,CAAD,CAArB,CAHhB,CADqC,CAIM;AAC9C;;AACD,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,UAAhC,EAA4CC,KAA5C,EAAmDC,UAAnD,EAA+D;AAC3D,SAAOH,MAAM,CAACI,uBAAP,CAA+BF,KAA/B,EAAsCC,UAAtC,CAAP;AACH;AACD;;;;;;;;AAMA,MAAME,eAAN,SAA8Bf,KAAK,CAACgB,SAApC,CAA8C;AAC1CC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT,EADU,CAEV;AACA;;AACA,SAAKT,cAAL,GAAsBR,UAAU,CAACQ,cAAD,EAAiBH,YAAjB,CAAhC;AACH;;AACDa,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEP,MAAAA,KAAF;AAASQ,MAAAA,QAAT;AAAmBP,MAAAA;AAAnB,QAAkC,KAAKQ,KAA7C;AACA,WAAQrB,KAAK,CAACsB,aAAN,CAAoBnB,YAAY,CAACoB,QAAjC,EAA2C,IAA3C,EAAkDC,YAAD,IAAkB;AACvE,YAAM;AAAEd,QAAAA,MAAF;AAAUe,QAAAA,OAAV;AAAmBC,QAAAA,gBAAnB;AAAqCC,QAAAA,WAArC;AAAkDhB,QAAAA;AAAlD,UAAiEa,YAAvE;AACA,UAAII,UAAJ;AACA,YAAMC,aAAa,GAAG,CAACF,WAAD,KAAiBF,OAAO,IAAIC,gBAA5B,CAAtB;;AACA,UAAIhB,MAAM,IAAImB,aAAd,EAA6B;AACzBD,QAAAA,UAAU,GAAG,KAAKnB,cAAL,CAAoBC,MAApB,EAA4BC,UAA5B,EAAwCC,KAAxC,EAA+CC,UAA/C,CAAb;AACH,OAFD,MAGK;AACDe,QAAAA,UAAU,GAAGxB,8BAA8B,CAACQ,KAAD,CAA3C;;AACA,YAAI,CAACF,MAAL,EAAa;AACT,eAAKoB,UAAL,GAAkB,IAAlB;AACH;AACJ,OAZsE,CAavE;;;AACA,aAAOV,QAAQ,CAACW,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,YAAlB,CAAd,EAA+C;AAAEI,QAAAA;AAAF,OAA/C,CAAD,CAAf;AACH,KAfO,CAAR;AAgBH;;AACDK,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKH,UAAT,EAAqB;AACjBI,MAAAA,OAAO,CAACC,GAAR,CAAY9B,iBAAZ;AACH;AACJ;;AA9ByC;;AAgC9C,eAAeU,eAAf","sourcesContent":["import React from 'react';\nimport memoizeOne from 'memoize-one';\nimport shallowEqual from 'shallowequal';\nimport SplitContext from './SplitContext';\nimport { getControlTreatmentsWithConfig, WARN_ST_NO_CLIENT } from './constants';\nfunction argsAreEqual(newArgs, lastArgs) {\n    return newArgs[0] === lastArgs[0] && // client\n        newArgs[1] === lastArgs[1] && // lastUpdate\n        shallowEqual(newArgs[2], lastArgs[2]) && // names\n        shallowEqual(newArgs[3], lastArgs[3]); // attributes\n}\nfunction evaluateSplits(client, lastUpdate, names, attributes) {\n    return client.getTreatmentsWithConfig(names, attributes);\n}\n/**\n * SplitTreatments accepts a list of split names and optional attributes. It access the client at SplitContext to\n * call 'client.getTreatmentsWithConfig()' method, and passes the returned treatments to a child as a function.\n *\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#get-treatments-with-configurations}\n */\nclass SplitTreatments extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Attaching a memoized `client.getTreatmentsWithConfig` function to the component instance, to avoid duplicated impressions because\n        // the function result is the same given the same `client` instance, `lastUpdate` timestamp, and list of split `names` and `attributes`.\n        this.evaluateSplits = memoizeOne(evaluateSplits, argsAreEqual);\n    }\n    render() {\n        const { names, children, attributes } = this.props;\n        return (React.createElement(SplitContext.Consumer, null, (splitContext) => {\n            const { client, isReady, isReadyFromCache, isDestroyed, lastUpdate } = splitContext;\n            let treatments;\n            const isOperational = !isDestroyed && (isReady || isReadyFromCache);\n            if (client && isOperational) {\n                treatments = this.evaluateSplits(client, lastUpdate, names, attributes);\n            }\n            else {\n                treatments = getControlTreatmentsWithConfig(names);\n                if (!client) {\n                    this.logWarning = true;\n                }\n            }\n            // SplitTreatments only accepts a function as a child, not a React Element (JSX)\n            return children(Object.assign(Object.assign({}, splitContext), { treatments }));\n        }));\n    }\n    componentDidMount() {\n        if (this.logWarning) {\n            console.log(WARN_ST_NO_CLIENT);\n        }\n    }\n}\nexport default SplitTreatments;\n"]},"metadata":{},"sourceType":"module"}