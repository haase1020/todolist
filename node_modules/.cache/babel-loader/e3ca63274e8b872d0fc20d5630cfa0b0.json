{"ast":null,"code":"import logFactory from '../../../utils/logger';\nimport { isString } from '../../../utils/lang';\nvar log = logFactory('splitio-settings');\n/**\n * This function validates `settings.integrations` object\n *\n * @param {Object} settings SDK settings object to validate\n * @param {Array<string>} validIntegrationTypes list of integration types to filter from `settings.integrations`\n *\n * @returns {Array} array of valid integration items. The array might be empty if `settings` object does not have valid integrations.\n */\n\nvar validateIntegrationsSettings = function validateIntegrationsSettings(settings) {\n  var validIntegrationTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var integrations = settings.integrations; // If integrations is not an array or an empty array, we return an empty array (no integrations).\n\n  if (!Array.isArray(integrations) || integrations.length === 0) return []; // We remove invalid integration items\n\n  var validIntegrations = integrations.filter(function (integration) {\n    return integration && isString(integration.type) && validIntegrationTypes.indexOf(integration.type) > -1;\n  });\n  var invalids = integrations.length - validIntegrations.length;\n  if (invalids) log.warn(\"\".concat(invalids, \" integration \").concat(invalids === 1 ? 'item' : 'items', \" at settings \").concat(invalids === 1 ? 'is' : 'are', \" invalid: integration items must have a valid 'type' value\"));\n  return validIntegrations;\n};\n\nexport default validateIntegrationsSettings;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/settings/integrations/common.js"],"names":["logFactory","isString","log","validateIntegrationsSettings","settings","validIntegrationTypes","arguments","length","undefined","integrations","Array","isArray","validIntegrations","filter","integration","type","indexOf","invalids","warn","concat"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,IAAIC,GAAG,GAAGF,UAAU,CAAC,kBAAD,CAApB;AACA;;;;;;;;;AASA,IAAIG,4BAA4B,GAAG,SAASA,4BAAT,CAAsCC,QAAtC,EAAgD;AACjF,MAAIC,qBAAqB,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhG;AACA,MAAIG,YAAY,GAAGL,QAAQ,CAACK,YAA5B,CAFiF,CAEvC;;AAE1C,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,YAAd,CAAD,IAAgCA,YAAY,CAACF,MAAb,KAAwB,CAA5D,EAA+D,OAAO,EAAP,CAJkB,CAIP;;AAE1E,MAAIK,iBAAiB,GAAGH,YAAY,CAACI,MAAb,CAAoB,UAAUC,WAAV,EAAuB;AACjE,WAAOA,WAAW,IAAIb,QAAQ,CAACa,WAAW,CAACC,IAAb,CAAvB,IAA6CV,qBAAqB,CAACW,OAAtB,CAA8BF,WAAW,CAACC,IAA1C,IAAkD,CAAC,CAAvG;AACD,GAFuB,CAAxB;AAGA,MAAIE,QAAQ,GAAGR,YAAY,CAACF,MAAb,GAAsBK,iBAAiB,CAACL,MAAvD;AACA,MAAIU,QAAJ,EAAcf,GAAG,CAACgB,IAAJ,CAAS,GAAGC,MAAH,CAAUF,QAAV,EAAoB,eAApB,EAAqCE,MAArC,CAA4CF,QAAQ,KAAK,CAAb,GAAiB,MAAjB,GAA0B,OAAtE,EAA+E,eAA/E,EAAgGE,MAAhG,CAAuGF,QAAQ,KAAK,CAAb,GAAiB,IAAjB,GAAwB,KAA/H,EAAsI,4DAAtI,CAAT;AACd,SAAOL,iBAAP;AACD,CAZD;;AAcA,eAAeT,4BAAf","sourcesContent":["import logFactory from '../../../utils/logger';\nimport { isString } from '../../../utils/lang';\nvar log = logFactory('splitio-settings');\n/**\n * This function validates `settings.integrations` object\n *\n * @param {Object} settings SDK settings object to validate\n * @param {Array<string>} validIntegrationTypes list of integration types to filter from `settings.integrations`\n *\n * @returns {Array} array of valid integration items. The array might be empty if `settings` object does not have valid integrations.\n */\n\nvar validateIntegrationsSettings = function validateIntegrationsSettings(settings) {\n  var validIntegrationTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var integrations = settings.integrations; // If integrations is not an array or an empty array, we return an empty array (no integrations).\n\n  if (!Array.isArray(integrations) || integrations.length === 0) return []; // We remove invalid integration items\n\n  var validIntegrations = integrations.filter(function (integration) {\n    return integration && isString(integration.type) && validIntegrationTypes.indexOf(integration.type) > -1;\n  });\n  var invalids = integrations.length - validIntegrations.length;\n  if (invalids) log.warn(\"\".concat(invalids, \" integration \").concat(invalids === 1 ? 'item' : 'items', \" at settings \").concat(invalids === 1 ? 'is' : 'are', \" invalid: integration items must have a valid 'type' value\"));\n  return validIntegrations;\n};\n\nexport default validateIntegrationsSettings;"]},"metadata":{},"sourceType":"module"}