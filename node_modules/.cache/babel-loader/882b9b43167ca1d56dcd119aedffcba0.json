{"ast":null,"code":"import { uniq } from '../lang';\nimport logFactory from '../logger';\nimport { validateSplit } from './split';\nvar log = logFactory('');\nexport function validateSplits(maybeSplits, method) {\n  var listName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'split_names';\n  var item = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'split name';\n\n  if (Array.isArray(maybeSplits) && maybeSplits.length > 0) {\n    var validatedArray = []; // Remove invalid values\n\n    maybeSplits.forEach(function (maybeSplit) {\n      var splitName = validateSplit(maybeSplit, method, item);\n      if (splitName) validatedArray.push(splitName);\n    }); // Strip off duplicated values if we have valid split names then return\n\n    if (validatedArray.length) return uniq(validatedArray);\n  }\n\n  log.error(\"\".concat(method, \": \").concat(listName, \" must be a non-empty array.\"));\n  return false;\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/inputValidation/splits.js"],"names":["uniq","logFactory","validateSplit","log","validateSplits","maybeSplits","method","listName","arguments","length","undefined","item","Array","isArray","validatedArray","forEach","maybeSplit","splitName","push","error","concat"],"mappings":"AAAA,SAASA,IAAT,QAAqB,SAArB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,IAAIC,GAAG,GAAGF,UAAU,CAAC,EAAD,CAApB;AACA,OAAO,SAASG,cAAT,CAAwBC,WAAxB,EAAqCC,MAArC,EAA6C;AAClD,MAAIC,QAAQ,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,aAAnF;AACA,MAAIG,IAAI,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,YAA/E;;AAEA,MAAII,KAAK,CAACC,OAAN,CAAcR,WAAd,KAA8BA,WAAW,CAACI,MAAZ,GAAqB,CAAvD,EAA0D;AACxD,QAAIK,cAAc,GAAG,EAArB,CADwD,CAC/B;;AAEzBT,IAAAA,WAAW,CAACU,OAAZ,CAAoB,UAAUC,UAAV,EAAsB;AACxC,UAAIC,SAAS,GAAGf,aAAa,CAACc,UAAD,EAAaV,MAAb,EAAqBK,IAArB,CAA7B;AACA,UAAIM,SAAJ,EAAeH,cAAc,CAACI,IAAf,CAAoBD,SAApB;AAChB,KAHD,EAHwD,CAMpD;;AAEJ,QAAIH,cAAc,CAACL,MAAnB,EAA2B,OAAOT,IAAI,CAACc,cAAD,CAAX;AAC5B;;AAEDX,EAAAA,GAAG,CAACgB,KAAJ,CAAU,GAAGC,MAAH,CAAUd,MAAV,EAAkB,IAAlB,EAAwBc,MAAxB,CAA+Bb,QAA/B,EAAyC,6BAAzC,CAAV;AACA,SAAO,KAAP;AACD","sourcesContent":["import { uniq } from '../lang';\nimport logFactory from '../logger';\nimport { validateSplit } from './split';\nvar log = logFactory('');\nexport function validateSplits(maybeSplits, method) {\n  var listName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'split_names';\n  var item = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'split name';\n\n  if (Array.isArray(maybeSplits) && maybeSplits.length > 0) {\n    var validatedArray = []; // Remove invalid values\n\n    maybeSplits.forEach(function (maybeSplit) {\n      var splitName = validateSplit(maybeSplit, method, item);\n      if (splitName) validatedArray.push(splitName);\n    }); // Strip off duplicated values if we have valid split names then return\n\n    if (validatedArray.length) return uniq(validatedArray);\n  }\n\n  log.error(\"\".concat(method, \": \").concat(listName, \" must be a non-empty array.\"));\n  return false;\n}"]},"metadata":{},"sourceType":"module"}