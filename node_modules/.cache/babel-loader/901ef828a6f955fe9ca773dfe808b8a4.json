{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-producer:split-changes');\nimport splitChangesFetcher from '../fetcher/SplitChanges';\nimport parseSegments from '../../engine/parser/segments';\nimport { SplitError } from '../../utils/lang/Errors';\nimport { _Set, setToArray } from '../../utils/lang/Sets';\nimport thenable from '../../utils/promise/thenable';\n\nfunction computeSplitsMutation(entries) {\n  var computed = entries.reduce(function (accum, split) {\n    if (split.status === 'ACTIVE') {\n      accum.added.push([split.name, JSON.stringify(split)]);\n      parseSegments(split.conditions).forEach(function (segmentName) {\n        accum.segments.add(segmentName);\n      });\n    } else {\n      accum.removed.push(split.name);\n    }\n\n    return accum;\n  }, {\n    added: [],\n    removed: [],\n    segments: new _Set()\n  });\n  computed.segments = setToArray(computed.segments);\n  return computed;\n}\n\nexport default function SplitChangesUpdaterFactory(context) {\n  var isNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _context$getAll = context.getAll(),\n      settings = _context$getAll[context.constants.SETTINGS],\n      readiness = _context$getAll[context.constants.READINESS],\n      storage = _context$getAll[context.constants.STORAGE],\n      metricCollectors = _context$getAll[context.constants.COLLECTORS];\n\n  var splitsEventEmitter = readiness.splits;\n  var startingUp = true;\n  var readyOnAlreadyExistentState = true;\n  /**\n   * Split updater returns a promise that resolves with a `false` boolean value if it fails to fetch splits or synchronize them with the storage.\n   *\n   * @param {number | undefined} retry current number of retry attemps. this param is only set by SplitChangesUpdater itself.\n   */\n\n  return function SplitChangesUpdater() {\n    var retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    function splitChanges(since) {\n      log.debug(\"Spin up split update using since = \".concat(since));\n      var fetcherPromise = splitChangesFetcher(settings, since, startingUp, metricCollectors, isNode).then(function (splitChanges) {\n        startingUp = false;\n        var mutation = computeSplitsMutation(splitChanges.splits);\n        log.debug(\"New splits \".concat(mutation.added.length));\n        log.debug(\"Removed splits \".concat(mutation.removed.length));\n        log.debug(\"Segment names collected \".concat(mutation.segments)); // Write into storage\n        // @TODO if allowing custom storages, wrap errors as SplitErrors to distinguish from user callback errors\n\n        return Promise.all([// calling first `setChangenumber` method, to perform cache flush if split filter queryString changed\n        storage.splits.setChangeNumber(splitChanges.till), storage.splits.addSplits(mutation.added), storage.splits.removeSplits(mutation.removed), storage.segments.registerSegments(mutation.segments)]).then(function () {\n          if (since !== splitChanges.till || readyOnAlreadyExistentState) {\n            readyOnAlreadyExistentState = false;\n            splitsEventEmitter.emit(splitsEventEmitter.SDK_SPLITS_ARRIVED);\n          }\n        });\n      }).catch(function (error) {\n        // handle user callback errors\n        if (!(error instanceof SplitError)) {\n          setTimeout(function () {\n            throw error;\n          }, 0);\n          startingUp = false; // Stop retrying.\n        }\n\n        log.warn(\"Error while doing fetch of Splits. \".concat(error));\n\n        if (startingUp && settings.startup.retriesOnFailureBeforeReady > retry) {\n          retry += 1;\n          log.info(\"Retrying download of splits #\".concat(retry, \". Reason: \").concat(error));\n          return SplitChangesUpdater(retry);\n        } else {\n          startingUp = false;\n        }\n\n        return false;\n      }); // After triggering the requests, if we have cached splits information let's notify that.\n\n      if (startingUp && storage.splits.checkCache()) splitsEventEmitter.emit(splitsEventEmitter.SDK_SPLITS_CACHE_LOADED);\n      return fetcherPromise;\n    } // @TODO check why e2e tests take so much time when sync storage result is not handled in a promise\n\n\n    var since = storage.splits.getChangeNumber();\n    var sincePromise = thenable(since) ? since : Promise.resolve(since);\n    return sincePromise.then(splitChanges);\n  };\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/producer/updater/SplitChanges.js"],"names":["logFactory","log","splitChangesFetcher","parseSegments","SplitError","_Set","setToArray","thenable","computeSplitsMutation","entries","computed","reduce","accum","split","status","added","push","name","JSON","stringify","conditions","forEach","segmentName","segments","add","removed","SplitChangesUpdaterFactory","context","isNode","arguments","length","undefined","_context$getAll","getAll","settings","constants","SETTINGS","readiness","READINESS","storage","STORAGE","metricCollectors","COLLECTORS","splitsEventEmitter","splits","startingUp","readyOnAlreadyExistentState","SplitChangesUpdater","retry","splitChanges","since","debug","concat","fetcherPromise","then","mutation","Promise","all","setChangeNumber","till","addSplits","removeSplits","registerSegments","emit","SDK_SPLITS_ARRIVED","catch","error","setTimeout","warn","startup","retriesOnFailureBeforeReady","info","checkCache","SDK_SPLITS_CACHE_LOADED","getChangeNumber","sincePromise","resolve"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-producer:split-changes');\nimport splitChangesFetcher from '../fetcher/SplitChanges';\nimport parseSegments from '../../engine/parser/segments';\nimport { SplitError } from '../../utils/lang/Errors';\nimport { _Set, setToArray } from '../../utils/lang/Sets';\nimport thenable from '../../utils/promise/thenable';\n\nfunction computeSplitsMutation(entries) {\n  var computed = entries.reduce(function (accum, split) {\n    if (split.status === 'ACTIVE') {\n      accum.added.push([split.name, JSON.stringify(split)]);\n      parseSegments(split.conditions).forEach(function (segmentName) {\n        accum.segments.add(segmentName);\n      });\n    } else {\n      accum.removed.push(split.name);\n    }\n\n    return accum;\n  }, {\n    added: [],\n    removed: [],\n    segments: new _Set()\n  });\n  computed.segments = setToArray(computed.segments);\n  return computed;\n}\n\nexport default function SplitChangesUpdaterFactory(context) {\n  var isNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _context$getAll = context.getAll(),\n      settings = _context$getAll[context.constants.SETTINGS],\n      readiness = _context$getAll[context.constants.READINESS],\n      storage = _context$getAll[context.constants.STORAGE],\n      metricCollectors = _context$getAll[context.constants.COLLECTORS];\n\n  var splitsEventEmitter = readiness.splits;\n  var startingUp = true;\n  var readyOnAlreadyExistentState = true;\n  /**\n   * Split updater returns a promise that resolves with a `false` boolean value if it fails to fetch splits or synchronize them with the storage.\n   *\n   * @param {number | undefined} retry current number of retry attemps. this param is only set by SplitChangesUpdater itself.\n   */\n\n  return function SplitChangesUpdater() {\n    var retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    function splitChanges(since) {\n      log.debug(\"Spin up split update using since = \".concat(since));\n      var fetcherPromise = splitChangesFetcher(settings, since, startingUp, metricCollectors, isNode).then(function (splitChanges) {\n        startingUp = false;\n        var mutation = computeSplitsMutation(splitChanges.splits);\n        log.debug(\"New splits \".concat(mutation.added.length));\n        log.debug(\"Removed splits \".concat(mutation.removed.length));\n        log.debug(\"Segment names collected \".concat(mutation.segments)); // Write into storage\n        // @TODO if allowing custom storages, wrap errors as SplitErrors to distinguish from user callback errors\n\n        return Promise.all([// calling first `setChangenumber` method, to perform cache flush if split filter queryString changed\n        storage.splits.setChangeNumber(splitChanges.till), storage.splits.addSplits(mutation.added), storage.splits.removeSplits(mutation.removed), storage.segments.registerSegments(mutation.segments)]).then(function () {\n          if (since !== splitChanges.till || readyOnAlreadyExistentState) {\n            readyOnAlreadyExistentState = false;\n            splitsEventEmitter.emit(splitsEventEmitter.SDK_SPLITS_ARRIVED);\n          }\n        });\n      }).catch(function (error) {\n        // handle user callback errors\n        if (!(error instanceof SplitError)) {\n          setTimeout(function () {\n            throw error;\n          }, 0);\n          startingUp = false; // Stop retrying.\n        }\n\n        log.warn(\"Error while doing fetch of Splits. \".concat(error));\n\n        if (startingUp && settings.startup.retriesOnFailureBeforeReady > retry) {\n          retry += 1;\n          log.info(\"Retrying download of splits #\".concat(retry, \". Reason: \").concat(error));\n          return SplitChangesUpdater(retry);\n        } else {\n          startingUp = false;\n        }\n\n        return false;\n      }); // After triggering the requests, if we have cached splits information let's notify that.\n\n      if (startingUp && storage.splits.checkCache()) splitsEventEmitter.emit(splitsEventEmitter.SDK_SPLITS_CACHE_LOADED);\n      return fetcherPromise;\n    } // @TODO check why e2e tests take so much time when sync storage result is not handled in a promise\n\n\n    var since = storage.splits.getChangeNumber();\n    var sincePromise = thenable(since) ? since : Promise.resolve(since);\n    return sincePromise.then(splitChanges);\n  };\n}"]},"metadata":{},"sourceType":"module"}