{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport objectAssign from 'object-assign';\nimport { get } from '../utils/lang';\nimport parser from './parser';\nimport keyParser from '../utils/key/parser';\nimport thenable from '../utils/promise/thenable';\nimport * as LabelsConstants from '../utils/labels';\nimport { CONTROL } from '../utils/constants';\n\nfunction defaults(inst) {\n  // in case we don't have a default treatment in the instanciation, use 'control'\n  if (typeof inst.baseInfo.defaultTreatment !== 'string') {\n    inst.baseInfo.defaultTreatment = CONTROL;\n  }\n}\n\nfunction evaluationResult(result, defaultTreatment) {\n  return {\n    treatment: get(result, 'treatment', defaultTreatment),\n    label: get(result, 'label', LabelsConstants.NO_CONDITION_MATCH)\n  };\n}\n\nfunction Split(baseInfo, evaluator) {\n  if (!(this instanceof Split)) {\n    return new Split(baseInfo, evaluator);\n  }\n\n  this.baseInfo = baseInfo;\n  this.evaluator = evaluator;\n  defaults(this);\n}\n\nSplit.parse = function parse(splitFlatStructure, storage) {\n  var conditions = splitFlatStructure.conditions;\n  var evaluator = parser(conditions, storage);\n  return new Split(objectAssign({}, splitFlatStructure), evaluator);\n};\n\nSplit.prototype.getKey = function getKey() {\n  return this.baseInfo.name;\n};\n\nSplit.prototype.getTreatment = function getTreatment(key, attributes, splitEvaluator) {\n  var _this$baseInfo = this.baseInfo,\n      killed = _this$baseInfo.killed,\n      seed = _this$baseInfo.seed,\n      defaultTreatment = _this$baseInfo.defaultTreatment,\n      trafficAllocation = _this$baseInfo.trafficAllocation,\n      trafficAllocationSeed = _this$baseInfo.trafficAllocationSeed,\n      algo = _this$baseInfo.algo;\n  var parsedKey;\n  var treatment;\n  var label;\n\n  try {\n    parsedKey = keyParser(key);\n  } catch (err) {\n    return {\n      treatment: CONTROL,\n      label: LabelsConstants.EXCEPTION\n    };\n  }\n\n  if (this.isGarbage()) {\n    treatment = CONTROL;\n    label = LabelsConstants.SPLIT_ARCHIVED;\n  } else if (killed) {\n    treatment = defaultTreatment;\n    label = LabelsConstants.SPLIT_KILLED;\n  } else {\n    var evaluation = this.evaluator(parsedKey, seed, trafficAllocation, trafficAllocationSeed, attributes, algo, splitEvaluator); // Evaluation could be async, so we should handle that case checking for a\n    // thenable object\n\n    if (thenable(evaluation)) {\n      return evaluation.then(function (result) {\n        return evaluationResult(result, defaultTreatment);\n      });\n    } else {\n      return evaluationResult(evaluation, defaultTreatment);\n    }\n  }\n\n  return {\n    treatment: treatment,\n    label: label\n  };\n};\n\nSplit.prototype.isGarbage = function isGarbage() {\n  return this.baseInfo.status === 'ARCHIVED';\n};\n\nSplit.prototype.getChangeNumber = function getChangeNumber() {\n  return this.baseInfo.changeNumber;\n};\n\nexport default Split;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/index.js"],"names":["objectAssign","get","parser","keyParser","thenable","LabelsConstants","CONTROL","defaults","inst","baseInfo","defaultTreatment","evaluationResult","result","treatment","label","NO_CONDITION_MATCH","Split","evaluator","parse","splitFlatStructure","storage","conditions","prototype","getKey","name","getTreatment","key","attributes","splitEvaluator","_this$baseInfo","killed","seed","trafficAllocation","trafficAllocationSeed","algo","parsedKey","err","EXCEPTION","isGarbage","SPLIT_ARCHIVED","SPLIT_KILLED","evaluation","then","status","getChangeNumber","changeNumber"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport objectAssign from 'object-assign';\nimport { get } from '../utils/lang';\nimport parser from './parser';\nimport keyParser from '../utils/key/parser';\nimport thenable from '../utils/promise/thenable';\nimport * as LabelsConstants from '../utils/labels';\nimport { CONTROL } from '../utils/constants';\n\nfunction defaults(inst) {\n  // in case we don't have a default treatment in the instanciation, use 'control'\n  if (typeof inst.baseInfo.defaultTreatment !== 'string') {\n    inst.baseInfo.defaultTreatment = CONTROL;\n  }\n}\n\nfunction evaluationResult(result, defaultTreatment) {\n  return {\n    treatment: get(result, 'treatment', defaultTreatment),\n    label: get(result, 'label', LabelsConstants.NO_CONDITION_MATCH)\n  };\n}\n\nfunction Split(baseInfo, evaluator) {\n  if (!(this instanceof Split)) {\n    return new Split(baseInfo, evaluator);\n  }\n\n  this.baseInfo = baseInfo;\n  this.evaluator = evaluator;\n  defaults(this);\n}\n\nSplit.parse = function parse(splitFlatStructure, storage) {\n  var conditions = splitFlatStructure.conditions;\n  var evaluator = parser(conditions, storage);\n  return new Split(objectAssign({}, splitFlatStructure), evaluator);\n};\n\nSplit.prototype.getKey = function getKey() {\n  return this.baseInfo.name;\n};\n\nSplit.prototype.getTreatment = function getTreatment(key, attributes, splitEvaluator) {\n  var _this$baseInfo = this.baseInfo,\n      killed = _this$baseInfo.killed,\n      seed = _this$baseInfo.seed,\n      defaultTreatment = _this$baseInfo.defaultTreatment,\n      trafficAllocation = _this$baseInfo.trafficAllocation,\n      trafficAllocationSeed = _this$baseInfo.trafficAllocationSeed,\n      algo = _this$baseInfo.algo;\n  var parsedKey;\n  var treatment;\n  var label;\n\n  try {\n    parsedKey = keyParser(key);\n  } catch (err) {\n    return {\n      treatment: CONTROL,\n      label: LabelsConstants.EXCEPTION\n    };\n  }\n\n  if (this.isGarbage()) {\n    treatment = CONTROL;\n    label = LabelsConstants.SPLIT_ARCHIVED;\n  } else if (killed) {\n    treatment = defaultTreatment;\n    label = LabelsConstants.SPLIT_KILLED;\n  } else {\n    var evaluation = this.evaluator(parsedKey, seed, trafficAllocation, trafficAllocationSeed, attributes, algo, splitEvaluator); // Evaluation could be async, so we should handle that case checking for a\n    // thenable object\n\n    if (thenable(evaluation)) {\n      return evaluation.then(function (result) {\n        return evaluationResult(result, defaultTreatment);\n      });\n    } else {\n      return evaluationResult(evaluation, defaultTreatment);\n    }\n  }\n\n  return {\n    treatment: treatment,\n    label: label\n  };\n};\n\nSplit.prototype.isGarbage = function isGarbage() {\n  return this.baseInfo.status === 'ARCHIVED';\n};\n\nSplit.prototype.getChangeNumber = function getChangeNumber() {\n  return this.baseInfo.changeNumber;\n};\n\nexport default Split;"]},"metadata":{},"sourceType":"module"}