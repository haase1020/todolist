{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport matchersTransform from '../transforms/matchers';\nimport treatmentsParser from '../treatments';\nimport matcherFactory from '../matchers';\nimport sanitizeValue from '../value';\nimport conditionFactory from '../condition';\nimport ifElseIfCombiner from '../combiners/ifelseif';\nimport andCombiner from '../combiners/and';\nimport thenable from '../../utils/promise/thenable';\n\nfunction parse(conditions, storage) {\n  var predicates = [];\n\n  for (var i = 0; i < conditions.length; i++) {\n    var _conditions$i = conditions[i],\n        matchers = _conditions$i.matcherGroup.matchers,\n        partitions = _conditions$i.partitions,\n        label = _conditions$i.label,\n        conditionType = _conditions$i.conditionType; // transform data structure\n\n    matchers = matchersTransform(matchers); // create a set of pure functions from the matcher's dto\n\n    var expressions = matchers.map(function (matcherDto) {\n      var matcher = matcherFactory(matcherDto, storage); // Evaluator function.\n\n      return function (key, attributes, splitEvaluator) {\n        var value = sanitizeValue(key, matcherDto, attributes);\n        var result = value !== undefined ? matcher(value, splitEvaluator) : false;\n\n        if (thenable(result)) {\n          return result.then(function (res) {\n            return Boolean(res ^ matcherDto.negate);\n          });\n        }\n\n        return Boolean(result ^ matcherDto.negate);\n      };\n    }); // if matcher's factory can't instanciate the matchers, the expressions array\n    // will be empty\n\n    if (expressions.length === 0) {\n      // reset any data collected during parsing\n      predicates = []; // and break the loop\n\n      break;\n    }\n\n    predicates.push(conditionFactory(andCombiner(expressions), treatmentsParser.parse(partitions), label, conditionType));\n  } // Instanciate evaluator given the set of conditions using if else if logic\n\n\n  return ifElseIfCombiner(predicates);\n}\n\nexport default parse;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/parser/index.js"],"names":["matchersTransform","treatmentsParser","matcherFactory","sanitizeValue","conditionFactory","ifElseIfCombiner","andCombiner","thenable","parse","conditions","storage","predicates","i","length","_conditions$i","matchers","matcherGroup","partitions","label","conditionType","expressions","map","matcherDto","matcher","key","attributes","splitEvaluator","value","result","undefined","then","res","Boolean","negate","push"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAOA,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,gBAAP,MAA6B,eAA7B;AACA,OAAOC,cAAP,MAA2B,aAA3B;AACA,OAAOC,aAAP,MAA0B,UAA1B;AACA,OAAOC,gBAAP,MAA6B,cAA7B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,QAAP,MAAqB,8BAArB;;AAEA,SAASC,KAAT,CAAeC,UAAf,EAA2BC,OAA3B,EAAoC;AAClC,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACI,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,QAAIE,aAAa,GAAGL,UAAU,CAACG,CAAD,CAA9B;AAAA,QACIG,QAAQ,GAAGD,aAAa,CAACE,YAAd,CAA2BD,QAD1C;AAAA,QAEIE,UAAU,GAAGH,aAAa,CAACG,UAF/B;AAAA,QAGIC,KAAK,GAAGJ,aAAa,CAACI,KAH1B;AAAA,QAIIC,aAAa,GAAGL,aAAa,CAACK,aAJlC,CAD0C,CAKO;;AAEjDJ,IAAAA,QAAQ,GAAGf,iBAAiB,CAACe,QAAD,CAA5B,CAP0C,CAOF;;AAExC,QAAIK,WAAW,GAAGL,QAAQ,CAACM,GAAT,CAAa,UAAUC,UAAV,EAAsB;AACnD,UAAIC,OAAO,GAAGrB,cAAc,CAACoB,UAAD,EAAaZ,OAAb,CAA5B,CADmD,CACA;;AAEnD,aAAO,UAAUc,GAAV,EAAeC,UAAf,EAA2BC,cAA3B,EAA2C;AAChD,YAAIC,KAAK,GAAGxB,aAAa,CAACqB,GAAD,EAAMF,UAAN,EAAkBG,UAAlB,CAAzB;AACA,YAAIG,MAAM,GAAGD,KAAK,KAAKE,SAAV,GAAsBN,OAAO,CAACI,KAAD,EAAQD,cAAR,CAA7B,GAAuD,KAApE;;AAEA,YAAInB,QAAQ,CAACqB,MAAD,CAAZ,EAAsB;AACpB,iBAAOA,MAAM,CAACE,IAAP,CAAY,UAAUC,GAAV,EAAe;AAChC,mBAAOC,OAAO,CAACD,GAAG,GAAGT,UAAU,CAACW,MAAlB,CAAd;AACD,WAFM,CAAP;AAGD;;AAED,eAAOD,OAAO,CAACJ,MAAM,GAAGN,UAAU,CAACW,MAArB,CAAd;AACD,OAXD;AAYD,KAfiB,CAAlB,CAT0C,CAwBtC;AACJ;;AAEA,QAAIb,WAAW,CAACP,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B;AACAF,MAAAA,UAAU,GAAG,EAAb,CAF4B,CAEX;;AAEjB;AACD;;AAEDA,IAAAA,UAAU,CAACuB,IAAX,CAAgB9B,gBAAgB,CAACE,WAAW,CAACc,WAAD,CAAZ,EAA2BnB,gBAAgB,CAACO,KAAjB,CAAuBS,UAAvB,CAA3B,EAA+DC,KAA/D,EAAsEC,aAAtE,CAAhC;AACD,GAtCiC,CAsChC;;;AAGF,SAAOd,gBAAgB,CAACM,UAAD,CAAvB;AACD;;AAED,eAAeH,KAAf","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport matchersTransform from '../transforms/matchers';\nimport treatmentsParser from '../treatments';\nimport matcherFactory from '../matchers';\nimport sanitizeValue from '../value';\nimport conditionFactory from '../condition';\nimport ifElseIfCombiner from '../combiners/ifelseif';\nimport andCombiner from '../combiners/and';\nimport thenable from '../../utils/promise/thenable';\n\nfunction parse(conditions, storage) {\n  var predicates = [];\n\n  for (var i = 0; i < conditions.length; i++) {\n    var _conditions$i = conditions[i],\n        matchers = _conditions$i.matcherGroup.matchers,\n        partitions = _conditions$i.partitions,\n        label = _conditions$i.label,\n        conditionType = _conditions$i.conditionType; // transform data structure\n\n    matchers = matchersTransform(matchers); // create a set of pure functions from the matcher's dto\n\n    var expressions = matchers.map(function (matcherDto) {\n      var matcher = matcherFactory(matcherDto, storage); // Evaluator function.\n\n      return function (key, attributes, splitEvaluator) {\n        var value = sanitizeValue(key, matcherDto, attributes);\n        var result = value !== undefined ? matcher(value, splitEvaluator) : false;\n\n        if (thenable(result)) {\n          return result.then(function (res) {\n            return Boolean(res ^ matcherDto.negate);\n          });\n        }\n\n        return Boolean(result ^ matcherDto.negate);\n      };\n    }); // if matcher's factory can't instanciate the matchers, the expressions array\n    // will be empty\n\n    if (expressions.length === 0) {\n      // reset any data collected during parsing\n      predicates = []; // and break the loop\n\n      break;\n    }\n\n    predicates.push(conditionFactory(andCombiner(expressions), treatmentsParser.parse(partitions), label, conditionType));\n  } // Instanciate evaluator given the set of conditions using if else if logic\n\n\n  return ifElseIfCombiner(predicates);\n}\n\nexport default parse;"]},"metadata":{},"sourceType":"module"}