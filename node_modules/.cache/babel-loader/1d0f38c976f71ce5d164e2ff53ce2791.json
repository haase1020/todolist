{"ast":null,"code":"import getFetch from '../getFetch';\nimport { SplitNetworkError } from '../../utils/lang/Errors';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-services:service');\nexport default function Fetcher(request) {\n  // using `fetch(url, options)` signature to work with unfetch\n  var url = request.url; // @TODO: update to use global fetch when IE10+ is deprecated\n\n  return getFetch()(url, request) // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful\n  .then(function (response) {\n    if (!response.ok) {\n      throw {\n        response: response\n      };\n    }\n\n    return response;\n  }).catch(function (error) {\n    var resp = error.response;\n    var msg = '';\n\n    if (resp) {\n      // An HTTP error\n      switch (resp.status) {\n        case 404:\n          msg = 'Invalid API key or resource not found.';\n          break;\n\n        default:\n          msg = resp.statusText;\n          break;\n      }\n    } else {\n      // Something else, either an error making the request or a Network error.\n      msg = error.message;\n    }\n\n    if (!resp || resp.status !== 403) {\n      // 403's log we'll be handled somewhere else.\n      log[request.logErrorsAsInfo ? 'info' : 'error'](\"Response status is not OK. Status: \".concat(resp ? resp.status : 'NO_STATUS', \". URL: \").concat(url, \". Message: \").concat(msg));\n    } // passes `undefined` as statusCode if not an HTTP error (resp === undefined)\n\n\n    throw new SplitNetworkError(msg, resp && resp.status);\n  });\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/services/transport/index.js"],"names":["getFetch","SplitNetworkError","logFactory","log","Fetcher","request","url","then","response","ok","catch","error","resp","msg","status","statusText","message","logErrorsAsInfo","concat"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,0BAAD,CAApB;AACA,eAAe,SAASE,OAAT,CAAiBC,OAAjB,EAA0B;AACvC;AACA,MAAIC,GAAG,GAAGD,OAAO,CAACC,GAAlB,CAFuC,CAEhB;;AAEvB,SAAON,QAAQ,GAAGM,GAAH,EAAQD,OAAR,CAAR,CAAyB;AAAzB,GACNE,IADM,CACD,UAAUC,QAAV,EAAoB;AACxB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,YAAM;AACJD,QAAAA,QAAQ,EAAEA;AADN,OAAN;AAGD;;AAED,WAAOA,QAAP;AACD,GATM,EASJE,KATI,CASE,UAAUC,KAAV,EAAiB;AACxB,QAAIC,IAAI,GAAGD,KAAK,CAACH,QAAjB;AACA,QAAIK,GAAG,GAAG,EAAV;;AAEA,QAAID,IAAJ,EAAU;AACR;AACA,cAAQA,IAAI,CAACE,MAAb;AACE,aAAK,GAAL;AACED,UAAAA,GAAG,GAAG,wCAAN;AACA;;AAEF;AACEA,UAAAA,GAAG,GAAGD,IAAI,CAACG,UAAX;AACA;AAPJ;AASD,KAXD,MAWO;AACL;AACAF,MAAAA,GAAG,GAAGF,KAAK,CAACK,OAAZ;AACD;;AAED,QAAI,CAACJ,IAAD,IAASA,IAAI,CAACE,MAAL,KAAgB,GAA7B,EAAkC;AAChC;AACAX,MAAAA,GAAG,CAACE,OAAO,CAACY,eAAR,GAA0B,MAA1B,GAAmC,OAApC,CAAH,CAAgD,sCAAsCC,MAAtC,CAA6CN,IAAI,GAAGA,IAAI,CAACE,MAAR,GAAiB,WAAlE,EAA+E,SAA/E,EAA0FI,MAA1F,CAAiGZ,GAAjG,EAAsG,aAAtG,EAAqHY,MAArH,CAA4HL,GAA5H,CAAhD;AACD,KAvBuB,CAuBtB;;;AAGF,UAAM,IAAIZ,iBAAJ,CAAsBY,GAAtB,EAA2BD,IAAI,IAAIA,IAAI,CAACE,MAAxC,CAAN;AACD,GApCM,CAAP;AAqCD","sourcesContent":["import getFetch from '../getFetch';\nimport { SplitNetworkError } from '../../utils/lang/Errors';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-services:service');\nexport default function Fetcher(request) {\n  // using `fetch(url, options)` signature to work with unfetch\n  var url = request.url; // @TODO: update to use global fetch when IE10+ is deprecated\n\n  return getFetch()(url, request) // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful\n  .then(function (response) {\n    if (!response.ok) {\n      throw {\n        response: response\n      };\n    }\n\n    return response;\n  }).catch(function (error) {\n    var resp = error.response;\n    var msg = '';\n\n    if (resp) {\n      // An HTTP error\n      switch (resp.status) {\n        case 404:\n          msg = 'Invalid API key or resource not found.';\n          break;\n\n        default:\n          msg = resp.statusText;\n          break;\n      }\n    } else {\n      // Something else, either an error making the request or a Network error.\n      msg = error.message;\n    }\n\n    if (!resp || resp.status !== 403) {\n      // 403's log we'll be handled somewhere else.\n      log[request.logErrorsAsInfo ? 'info' : 'error'](\"Response status is not OK. Status: \".concat(resp ? resp.status : 'NO_STATUS', \". URL: \").concat(url, \". Message: \").concat(msg));\n    } // passes `undefined` as statusCode if not an HTTP error (resp === undefined)\n\n\n    throw new SplitNetworkError(msg, resp && resp.status);\n  });\n}"]},"metadata":{},"sourceType":"module"}