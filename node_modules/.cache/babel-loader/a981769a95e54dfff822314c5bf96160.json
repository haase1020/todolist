{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport { findIndex } from '../../utils/lang';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-engine:combiner');\nimport thenable from '../../utils/promise/thenable';\n\nfunction andResults(results) {\n  var i = 0;\n  var len = results.length;\n  var hasMatchedAll; // loop through all the matchers an stop at the first one returning false.\n\n  for (; i < len && results[i]; i++) {// logic is run inside the condition of evaluates next step.\n  }\n\n  hasMatchedAll = i === len;\n  log.debug(\"[andCombiner] evaluates to \".concat(hasMatchedAll));\n  return hasMatchedAll;\n}\n\nfunction andCombinerContext(matchers) {\n  function andCombiner() {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    var matcherResults = matchers.map(function (matcher) {\n      return matcher.apply(void 0, params);\n    }); // If any matching result is a thenable we should use Promise.all\n\n    if (findIndex(matcherResults, thenable) !== -1) {\n      return Promise.all(matcherResults).then(andResults);\n    } else {\n      return andResults(matcherResults);\n    }\n  }\n\n  return andCombiner;\n}\n\nexport default andCombinerContext;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/combiners/and.js"],"names":["findIndex","logFactory","log","thenable","andResults","results","i","len","length","hasMatchedAll","debug","concat","andCombinerContext","matchers","andCombiner","_len","arguments","params","Array","_key","matcherResults","map","matcher","apply","Promise","all","then"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,SAASA,SAAT,QAA0B,kBAA1B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,yBAAD,CAApB;AACA,OAAOE,QAAP,MAAqB,8BAArB;;AAEA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,GAAG,GAAGF,OAAO,CAACG,MAAlB;AACA,MAAIC,aAAJ,CAH2B,CAGR;;AAEnB,SAAOH,CAAC,GAAGC,GAAJ,IAAWF,OAAO,CAACC,CAAD,CAAzB,EAA8BA,CAAC,EAA/B,EAAmC,CAAC;AACnC;;AAEDG,EAAAA,aAAa,GAAGH,CAAC,KAAKC,GAAtB;AACAL,EAAAA,GAAG,CAACQ,KAAJ,CAAU,8BAA8BC,MAA9B,CAAqCF,aAArC,CAAV;AACA,SAAOA,aAAP;AACD;;AAED,SAASG,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,WAASC,WAAT,GAAuB;AACrB,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACR,MAArB,EAA6BS,MAAM,GAAG,IAAIC,KAAJ,CAAUH,IAAV,CAAtC,EAAuDI,IAAI,GAAG,CAAnE,EAAsEA,IAAI,GAAGJ,IAA7E,EAAmFI,IAAI,EAAvF,EAA2F;AACzFF,MAAAA,MAAM,CAACE,IAAD,CAAN,GAAeH,SAAS,CAACG,IAAD,CAAxB;AACD;;AAED,QAAIC,cAAc,GAAGP,QAAQ,CAACQ,GAAT,CAAa,UAAUC,OAAV,EAAmB;AACnD,aAAOA,OAAO,CAACC,KAAR,CAAc,KAAK,CAAnB,EAAsBN,MAAtB,CAAP;AACD,KAFoB,CAArB,CALqB,CAOjB;;AAEJ,QAAIjB,SAAS,CAACoB,cAAD,EAAiBjB,QAAjB,CAAT,KAAwC,CAAC,CAA7C,EAAgD;AAC9C,aAAOqB,OAAO,CAACC,GAAR,CAAYL,cAAZ,EAA4BM,IAA5B,CAAiCtB,UAAjC,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,UAAU,CAACgB,cAAD,CAAjB;AACD;AACF;;AAED,SAAON,WAAP;AACD;;AAED,eAAeF,kBAAf","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport { findIndex } from '../../utils/lang';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-engine:combiner');\nimport thenable from '../../utils/promise/thenable';\n\nfunction andResults(results) {\n  var i = 0;\n  var len = results.length;\n  var hasMatchedAll; // loop through all the matchers an stop at the first one returning false.\n\n  for (; i < len && results[i]; i++) {// logic is run inside the condition of evaluates next step.\n  }\n\n  hasMatchedAll = i === len;\n  log.debug(\"[andCombiner] evaluates to \".concat(hasMatchedAll));\n  return hasMatchedAll;\n}\n\nfunction andCombinerContext(matchers) {\n  function andCombiner() {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    var matcherResults = matchers.map(function (matcher) {\n      return matcher.apply(void 0, params);\n    }); // If any matching result is a thenable we should use Promise.all\n\n    if (findIndex(matcherResults, thenable) !== -1) {\n      return Promise.all(matcherResults).then(andResults);\n    } else {\n      return andResults(matcherResults);\n    }\n  }\n\n  return andCombiner;\n}\n\nexport default andCombinerContext;"]},"metadata":{},"sourceType":"module"}