{"ast":null,"code":"import GaToSplit from './ga/GaToSplit';\nimport SplitToGa from './ga/SplitToGa';\nimport { GOOGLE_ANALYTICS_TO_SPLIT, SPLIT_TO_GOOGLE_ANALYTICS, SPLIT_IMPRESSION, SPLIT_EVENT } from '../utils/constants';\n/**\n * Factory function for browser IntegrationsManager.\n * The integrations manager instantiates integration modules, and bypass tracked events and impressions to them.\n *\n * @param {Context} context SplitFactory context\n *\n * @returns integration manager or null if `integrations` are not present in settings.\n */\n\nvar integrationsManagerFactory = function integrationsManagerFactory(context) {\n  var settings = context.get(context.constants.SETTINGS);\n  var listeners = []; // No need to check if `settings.integrations` is an array. It was already validated in settings validation\n\n  settings.integrations.forEach(function (integrationOptions) {\n    var type = integrationOptions.type;\n    var integration;\n\n    switch (type) {\n      case GOOGLE_ANALYTICS_TO_SPLIT:\n        {\n          var storage = context.get(context.constants.STORAGE);\n          var coreSettings = settings.core;\n          integration = GaToSplit(integrationOptions, storage, coreSettings);\n          break;\n        }\n\n      case SPLIT_TO_GOOGLE_ANALYTICS:\n        {\n          integration = new SplitToGa(integrationOptions);\n          break;\n        }\n    }\n\n    if (integration && integration.queue) listeners.push(integration);\n  }); // If `listeners` is empty, not return a integration manager\n\n  if (listeners.length === 0) return; // Exception safe methods: each integration module is responsable for handling errors\n\n  return {\n    handleImpression: function handleImpression(impressionData) {\n      listeners.forEach(function (listener) {\n        return listener.queue({\n          type: SPLIT_IMPRESSION,\n          payload: impressionData\n        });\n      });\n    },\n    handleEvent: function handleEvent(eventData) {\n      listeners.forEach(function (listener) {\n        return listener.queue({\n          type: SPLIT_EVENT,\n          payload: eventData\n        });\n      });\n    }\n  };\n};\n\nexport default integrationsManagerFactory;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/integrations/browser.js"],"names":["GaToSplit","SplitToGa","GOOGLE_ANALYTICS_TO_SPLIT","SPLIT_TO_GOOGLE_ANALYTICS","SPLIT_IMPRESSION","SPLIT_EVENT","integrationsManagerFactory","context","settings","get","constants","SETTINGS","listeners","integrations","forEach","integrationOptions","type","integration","storage","STORAGE","coreSettings","core","queue","push","length","handleImpression","impressionData","listener","payload","handleEvent","eventData"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,SAASC,yBAAT,EAAoCC,yBAApC,EAA+DC,gBAA/D,EAAiFC,WAAjF,QAAoG,oBAApG;AACA;;;;;;;;;AASA,IAAIC,0BAA0B,GAAG,SAASA,0BAAT,CAAoCC,OAApC,EAA6C;AAC5E,MAAIC,QAAQ,GAAGD,OAAO,CAACE,GAAR,CAAYF,OAAO,CAACG,SAAR,CAAkBC,QAA9B,CAAf;AACA,MAAIC,SAAS,GAAG,EAAhB,CAF4E,CAExD;;AAEpBJ,EAAAA,QAAQ,CAACK,YAAT,CAAsBC,OAAtB,CAA8B,UAAUC,kBAAV,EAA8B;AAC1D,QAAIC,IAAI,GAAGD,kBAAkB,CAACC,IAA9B;AACA,QAAIC,WAAJ;;AAEA,YAAQD,IAAR;AACE,WAAKd,yBAAL;AACE;AACE,cAAIgB,OAAO,GAAGX,OAAO,CAACE,GAAR,CAAYF,OAAO,CAACG,SAAR,CAAkBS,OAA9B,CAAd;AACA,cAAIC,YAAY,GAAGZ,QAAQ,CAACa,IAA5B;AACAJ,UAAAA,WAAW,GAAGjB,SAAS,CAACe,kBAAD,EAAqBG,OAArB,EAA8BE,YAA9B,CAAvB;AACA;AACD;;AAEH,WAAKjB,yBAAL;AACE;AACEc,UAAAA,WAAW,GAAG,IAAIhB,SAAJ,CAAcc,kBAAd,CAAd;AACA;AACD;AAbL;;AAgBA,QAAIE,WAAW,IAAIA,WAAW,CAACK,KAA/B,EAAsCV,SAAS,CAACW,IAAV,CAAeN,WAAf;AACvC,GArBD,EAJ4E,CAyBxE;;AAEJ,MAAIL,SAAS,CAACY,MAAV,KAAqB,CAAzB,EAA4B,OA3BgD,CA2BxC;;AAEpC,SAAO;AACLC,IAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,cAA1B,EAA0C;AAC1Dd,MAAAA,SAAS,CAACE,OAAV,CAAkB,UAAUa,QAAV,EAAoB;AACpC,eAAOA,QAAQ,CAACL,KAAT,CAAe;AACpBN,UAAAA,IAAI,EAAEZ,gBADc;AAEpBwB,UAAAA,OAAO,EAAEF;AAFW,SAAf,CAAP;AAID,OALD;AAMD,KARI;AASLG,IAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBC,SAArB,EAAgC;AAC3ClB,MAAAA,SAAS,CAACE,OAAV,CAAkB,UAAUa,QAAV,EAAoB;AACpC,eAAOA,QAAQ,CAACL,KAAT,CAAe;AACpBN,UAAAA,IAAI,EAAEX,WADc;AAEpBuB,UAAAA,OAAO,EAAEE;AAFW,SAAf,CAAP;AAID,OALD;AAMD;AAhBI,GAAP;AAkBD,CA/CD;;AAiDA,eAAexB,0BAAf","sourcesContent":["import GaToSplit from './ga/GaToSplit';\nimport SplitToGa from './ga/SplitToGa';\nimport { GOOGLE_ANALYTICS_TO_SPLIT, SPLIT_TO_GOOGLE_ANALYTICS, SPLIT_IMPRESSION, SPLIT_EVENT } from '../utils/constants';\n/**\n * Factory function for browser IntegrationsManager.\n * The integrations manager instantiates integration modules, and bypass tracked events and impressions to them.\n *\n * @param {Context} context SplitFactory context\n *\n * @returns integration manager or null if `integrations` are not present in settings.\n */\n\nvar integrationsManagerFactory = function integrationsManagerFactory(context) {\n  var settings = context.get(context.constants.SETTINGS);\n  var listeners = []; // No need to check if `settings.integrations` is an array. It was already validated in settings validation\n\n  settings.integrations.forEach(function (integrationOptions) {\n    var type = integrationOptions.type;\n    var integration;\n\n    switch (type) {\n      case GOOGLE_ANALYTICS_TO_SPLIT:\n        {\n          var storage = context.get(context.constants.STORAGE);\n          var coreSettings = settings.core;\n          integration = GaToSplit(integrationOptions, storage, coreSettings);\n          break;\n        }\n\n      case SPLIT_TO_GOOGLE_ANALYTICS:\n        {\n          integration = new SplitToGa(integrationOptions);\n          break;\n        }\n    }\n\n    if (integration && integration.queue) listeners.push(integration);\n  }); // If `listeners` is empty, not return a integration manager\n\n  if (listeners.length === 0) return; // Exception safe methods: each integration module is responsable for handling errors\n\n  return {\n    handleImpression: function handleImpression(impressionData) {\n      listeners.forEach(function (listener) {\n        return listener.queue({\n          type: SPLIT_IMPRESSION,\n          payload: impressionData\n        });\n      });\n    },\n    handleEvent: function handleEvent(eventData) {\n      listeners.forEach(function (listener) {\n        return listener.queue({\n          type: SPLIT_EVENT,\n          payload: eventData\n        });\n      });\n    }\n  };\n};\n\nexport default integrationsManagerFactory;"]},"metadata":{},"sourceType":"module"}