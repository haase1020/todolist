{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport timeout from '../../utils/promise/timeout';\nimport tracker from '../../utils/timeTracker';\nimport { SplitError } from '../../utils/lang/Errors';\nimport splitChangesService from '../../services/splitChanges';\nimport splitChangesRequest from '../../services/splitChanges/get';\n\nfunction splitChangesFetcher(settings, since) {\n  var startingUp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var metricCollectors = arguments.length > 3 ? arguments[3] : undefined;\n  var isNode = arguments.length > 4 ? arguments[4] : undefined;\n  var filterQueryString = settings.sync.__splitFiltersValidation.queryString;\n  var splitsPromise = splitChangesService(splitChangesRequest(settings, since, filterQueryString));\n  var collectMetrics = startingUp || isNode; // If we are on the browser, only collect this metric for first fetch. On node do it always.\n\n  splitsPromise = tracker.start(tracker.TaskNames.SPLITS_FETCH, collectMetrics ? metricCollectors : false, splitsPromise);\n\n  if (startingUp) {\n    // Decorate with the timeout functionality if required\n    splitsPromise = timeout(settings.startup.requestTimeoutBeforeReady, splitsPromise);\n  }\n\n  return splitsPromise // JSON parsing errors are handled as SplitErrors, to distinguish from user callback errors\n  .then(function (resp) {\n    return resp.json().catch(function (error) {\n      throw new SplitError(error.message);\n    });\n  });\n}\n\nexport default splitChangesFetcher;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/producer/fetcher/SplitChanges.js"],"names":["timeout","tracker","SplitError","splitChangesService","splitChangesRequest","splitChangesFetcher","settings","since","startingUp","arguments","length","undefined","metricCollectors","isNode","filterQueryString","sync","__splitFiltersValidation","queryString","splitsPromise","collectMetrics","start","TaskNames","SPLITS_FETCH","startup","requestTimeoutBeforeReady","then","resp","json","catch","error","message"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAOA,OAAP,MAAoB,6BAApB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAOC,mBAAP,MAAgC,6BAAhC;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,KAAvC,EAA8C;AAC5C,MAAIC,UAAU,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAArF;AACA,MAAIG,gBAAgB,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAA7D;AACA,MAAIE,MAAM,GAAGJ,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAnD;AACA,MAAIG,iBAAiB,GAAGR,QAAQ,CAACS,IAAT,CAAcC,wBAAd,CAAuCC,WAA/D;AACA,MAAIC,aAAa,GAAGf,mBAAmB,CAACC,mBAAmB,CAACE,QAAD,EAAWC,KAAX,EAAkBO,iBAAlB,CAApB,CAAvC;AACA,MAAIK,cAAc,GAAGX,UAAU,IAAIK,MAAnC,CAN4C,CAMD;;AAE3CK,EAAAA,aAAa,GAAGjB,OAAO,CAACmB,KAAR,CAAcnB,OAAO,CAACoB,SAAR,CAAkBC,YAAhC,EAA8CH,cAAc,GAAGP,gBAAH,GAAsB,KAAlF,EAAyFM,aAAzF,CAAhB;;AAEA,MAAIV,UAAJ,EAAgB;AACd;AACAU,IAAAA,aAAa,GAAGlB,OAAO,CAACM,QAAQ,CAACiB,OAAT,CAAiBC,yBAAlB,EAA6CN,aAA7C,CAAvB;AACD;;AAED,SAAOA,aAAa,CAAC;AAAD,GACnBO,IADM,CACD,UAAUC,IAAV,EAAgB;AACpB,WAAOA,IAAI,CAACC,IAAL,GAAYC,KAAZ,CAAkB,UAAUC,KAAV,EAAiB;AACxC,YAAM,IAAI3B,UAAJ,CAAe2B,KAAK,CAACC,OAArB,CAAN;AACD,KAFM,CAAP;AAGD,GALM,CAAP;AAMD;;AAED,eAAezB,mBAAf","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport timeout from '../../utils/promise/timeout';\nimport tracker from '../../utils/timeTracker';\nimport { SplitError } from '../../utils/lang/Errors';\nimport splitChangesService from '../../services/splitChanges';\nimport splitChangesRequest from '../../services/splitChanges/get';\n\nfunction splitChangesFetcher(settings, since) {\n  var startingUp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var metricCollectors = arguments.length > 3 ? arguments[3] : undefined;\n  var isNode = arguments.length > 4 ? arguments[4] : undefined;\n  var filterQueryString = settings.sync.__splitFiltersValidation.queryString;\n  var splitsPromise = splitChangesService(splitChangesRequest(settings, since, filterQueryString));\n  var collectMetrics = startingUp || isNode; // If we are on the browser, only collect this metric for first fetch. On node do it always.\n\n  splitsPromise = tracker.start(tracker.TaskNames.SPLITS_FETCH, collectMetrics ? metricCollectors : false, splitsPromise);\n\n  if (startingUp) {\n    // Decorate with the timeout functionality if required\n    splitsPromise = timeout(settings.startup.requestTimeoutBeforeReady, splitsPromise);\n  }\n\n  return splitsPromise // JSON parsing errors are handled as SplitErrors, to distinguish from user callback errors\n  .then(function (resp) {\n    return resp.json().catch(function (error) {\n      throw new SplitError(error.message);\n    });\n  });\n}\n\nexport default splitChangesFetcher;"]},"metadata":{},"sourceType":"module"}