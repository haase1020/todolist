{"ast":null,"code":"import { isString } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('');\nvar EVENT_TYPE_REGEX = /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/;\nexport function validateEvent(maybeEvent, method) {\n  if (maybeEvent == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined event_type, event_type must be a non-empty string.\"));\n  } else if (!isString(maybeEvent)) {\n    log.error(\"\".concat(method, \": you passed an invalid event_type, event_type must be a non-empty string.\"));\n  } else {\n    // It is a string.\n    if (maybeEvent.length === 0) {\n      log.error(\"\".concat(method, \": you passed an empty event_type, event_type must be a non-empty string.\"));\n    } else if (!EVENT_TYPE_REGEX.test(maybeEvent)) {\n      log.error(\"\".concat(method, \": you passed \\\"\").concat(maybeEvent, \"\\\", event_type must adhere to the regular expression /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/g. This means an event_type must be alphanumeric, cannot be more than 80 characters long, and can only include a dash, underscore, period, or colon as separators of alphanumeric characters.\"));\n    } else {\n      return maybeEvent;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/utils/inputValidation/event.js"],"names":["isString","logFactory","log","EVENT_TYPE_REGEX","validateEvent","maybeEvent","method","undefined","error","concat","length","test"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,EAAD,CAApB;AACA,IAAIE,gBAAgB,GAAG,oCAAvB;AACA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,MAAnC,EAA2C;AAChD,MAAID,UAAU,IAAIE,SAAlB,EAA6B;AAC3B;AACAL,IAAAA,GAAG,CAACM,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,qFAAlB,CAAV;AACD,GAHD,MAGO,IAAI,CAACN,QAAQ,CAACK,UAAD,CAAb,EAA2B;AAChCH,IAAAA,GAAG,CAACM,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,4EAAlB,CAAV;AACD,GAFM,MAEA;AACL;AACA,QAAID,UAAU,CAACK,MAAX,KAAsB,CAA1B,EAA6B;AAC3BR,MAAAA,GAAG,CAACM,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,0EAAlB,CAAV;AACD,KAFD,MAEO,IAAI,CAACH,gBAAgB,CAACQ,IAAjB,CAAsBN,UAAtB,CAAL,EAAwC;AAC7CH,MAAAA,GAAG,CAACM,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,iBAAlB,EAAqCG,MAArC,CAA4CJ,UAA5C,EAAwD,wRAAxD,CAAV;AACD,KAFM,MAEA;AACL,aAAOA,UAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD","sourcesContent":["import { isString } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('');\nvar EVENT_TYPE_REGEX = /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/;\nexport function validateEvent(maybeEvent, method) {\n  if (maybeEvent == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined event_type, event_type must be a non-empty string.\"));\n  } else if (!isString(maybeEvent)) {\n    log.error(\"\".concat(method, \": you passed an invalid event_type, event_type must be a non-empty string.\"));\n  } else {\n    // It is a string.\n    if (maybeEvent.length === 0) {\n      log.error(\"\".concat(method, \": you passed an empty event_type, event_type must be a non-empty string.\"));\n    } else if (!EVENT_TYPE_REGEX.test(maybeEvent)) {\n      log.error(\"\".concat(method, \": you passed \\\"\").concat(maybeEvent, \"\\\", event_type must adhere to the regular expression /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/g. This means an event_type must be alphanumeric, cannot be more than 80 characters long, and can only include a dash, underscore, period, or colon as separators of alphanumeric characters.\"));\n    } else {\n      return maybeEvent;\n    }\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"module"}