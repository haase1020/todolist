{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport objectAssign from 'object-assign';\nimport { isString, numberIsFinite, unicAsStrings } from '../../utils/lang';\nimport logFactory from '../../utils/logger';\nimport { validateEvent, validateEventValue, validateEventProperties, validateKey, validateTrafficType } from '../../utils/inputValidation';\nvar logName = 'splitio-ga-to-split',\n    logNameMapper = logName + ':mapper';\nvar log = logFactory(logName);\n/**\n * Provides a plugin to use with analytics.js, accounting for the possibility\n * that the global command queue has been renamed or not yet defined.\n * @param {string} pluginName The plugin name identifier.\n * @param {Function} pluginConstructor The plugin constructor function.\n */\n\nfunction providePlugin(pluginName, pluginConstructor) {\n  // get reference to global command queue. Init it if not defined yet.\n  var gaAlias = window.GoogleAnalyticsObject || 'ga';\n\n  window[gaAlias] = window[gaAlias] || function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (window[gaAlias].q = window[gaAlias].q || []).push(args);\n  }; // provides the plugin for use with analytics.js.\n\n\n  window[gaAlias]('provide', pluginName, pluginConstructor);\n} // Default mapping: object used for building the default mapper from hits to Split events\n\n\nvar defaultMapping = {\n  eventTypeId: {\n    event: 'eventAction',\n    social: 'socialAction'\n  },\n  eventValue: {\n    event: 'eventValue',\n    timing: 'timingValue'\n  },\n  eventProperties: {\n    pageview: ['page'],\n    screenview: ['screenName'],\n    event: ['eventCategory', 'eventLabel'],\n    social: ['socialNetwork', 'socialTarget'],\n    timing: ['timingCategory', 'timingVar', 'timingLabel'],\n    exception: ['exDescription', 'exFatal']\n  }\n};\n/**\n * Build a mapper function based on a mapping object\n *\n * @param {object} mapping\n */\n\nfunction mapperBuilder(mapping) {\n  return function (model) {\n    var hitType = model.get('hitType');\n    var eventTypeId = model.get(mapping.eventTypeId[hitType] || 'hitType');\n    var value = model.get(mapping.eventValue[hitType]);\n    var properties = {};\n    var fields = mapping.eventProperties[hitType];\n\n    if (fields) {\n      for (var i = 0; i < fields.length; i++) {\n        properties[fields[i]] = model.get(fields[i]);\n      }\n    }\n\n    return {\n      eventTypeId: eventTypeId,\n      value: value,\n      properties: properties,\n      timestamp: Date.now()\n    };\n  };\n} // exposed for unit testing purposses.\n\n\nexport var defaultMapper = mapperBuilder(defaultMapping);\nexport var defaultPrefix = 'ga';\n/**\n * Return a new list of identities removing invalid and duplicated ones.\n *\n * @param {Array} identities list of identities\n * @returns list of valid and unique identities. The list might be empty if `identities` is not an array or all its elements are invalid.\n */\n\nexport function validateIdentities(identities) {\n  if (!Array.isArray(identities)) return []; // Remove duplicated identities\n\n  var uniqueIdentities = unicAsStrings(identities); // Filter based on rum-agent identities validator\n\n  return uniqueIdentities.filter(function (identity) {\n    if (!identity) return false;\n    var maybeKey = identity.key;\n    var maybeTT = identity.trafficType;\n    if (!isString(maybeKey) && !numberIsFinite(maybeKey)) return false;\n    if (!isString(maybeTT)) return false;\n    return true;\n  });\n}\n/**\n * Checks if EventData fields (except EventTypeId) are valid, and logs corresponding warnings.\n * EventTypeId is validated separately.\n *\n * @param {EventData} data event data instance to validate. Precondition: data != undefined\n * @returns {boolean} Whether the data instance is a valid EventData or not.\n */\n\nexport function validateEventData(eventData) {\n  if (!validateEvent(eventData.eventTypeId, logNameMapper)) return false;\n  if (validateEventValue(eventData.value, logNameMapper) === false) return false;\n\n  var _validateEventPropert = validateEventProperties(eventData.properties, logNameMapper),\n      properties = _validateEventPropert.properties;\n\n  if (properties === false) return false;\n  if (eventData.timestamp && !numberIsFinite(eventData.timestamp)) return false;\n  if (eventData.key && validateKey(eventData.key, logNameMapper) === false) return false;\n  if (eventData.trafficTypeName && validateTrafficType(eventData.trafficTypeName, logNameMapper) === false) return false;\n  return true;\n}\nvar INVALID_PREFIX_REGEX = /^[^a-zA-Z0-9]+/;\nvar INVALID_SUBSTRING_REGEX = /[^-_.:a-zA-Z0-9]+/g;\n/**\n * Fixes the passed string value to comply with EventTypeId format, by removing invalid characters and truncating if necessary.\n *\n * @param {string} eventTypeId string value to fix.\n * @returns {string} Fixed version of `eventTypeId`.\n */\n\nexport function fixEventTypeId(eventTypeId) {\n  // return the input eventTypeId if it cannot be fixed\n  if (!isString(eventTypeId) || eventTypeId.length === 0) {\n    return eventTypeId;\n  } // replace invalid substrings and truncate\n\n\n  var fixed = eventTypeId.replace(INVALID_PREFIX_REGEX, '').replace(INVALID_SUBSTRING_REGEX, '_');\n  var truncated = fixed.slice(0, 80);\n  if (truncated.length < fixed.length) log.warn('EventTypeId was truncated because it cannot be more than 80 characters long.');\n  return truncated;\n}\n/**\n * GaToSplit integration.\n * This function provides the SplitTracker plugin to ga command queue.\n *\n * @param {object} sdkOptions options passed at the SDK integrations settings\n * @param {object} storage SDK storage passed to track events\n * @param {object} coreSettings core settings used to define an identity if no one provided as SDK or plugin options\n */\n\nfunction GaToSplit(sdkOptions, storage, coreSettings) {\n  var defaultOptions = {\n    prefix: defaultPrefix,\n    // We set default identities if key and TT are present in settings.core\n    identities: coreSettings.key && coreSettings.trafficType ? [{\n      key: coreSettings.key,\n      trafficType: coreSettings.trafficType\n    }] : undefined\n  };\n\n  var SplitTracker = // Constructor for the SplitTracker plugin.\n  function SplitTracker(tracker, pluginOptions) {\n    _classCallCheck(this, SplitTracker); // precedence of options: SDK options (config.integrations) overwrite pluginOptions (`ga('require', 'splitTracker', pluginOptions)`)\n\n\n    var opts = objectAssign({}, defaultOptions, sdkOptions, pluginOptions);\n    this.tracker = tracker; // Validate identities\n\n    var validIdentities = validateIdentities(opts.identities);\n\n    if (validIdentities.length === 0) {\n      log.warn('No valid identities were provided. Please check that you are passing a valid list of identities or providing a traffic type at the SDK configuration.');\n      return;\n    }\n\n    var invalids = validIdentities.length - opts.identities.length;\n\n    if (invalids) {\n      log.warn(\"\".concat(invalids, \" identities were discarded because they are invalid or duplicated. Identities must be an array of objects with key and trafficType.\"));\n    }\n\n    opts.identities = validIdentities; // Validate prefix\n\n    if (!isString(opts.prefix)) {\n      log.warn('The provided `prefix` was ignored since it is invalid. Please check that you are passing a string object as `prefix`.');\n      opts.prefix = undefined;\n    } // Overwrite sendHitTask to perform plugin tasks:\n    // 1) filter hits\n    // 2) map hits to Split events\n    // 3) handle events, i.e., validate and send them to Split BE\n\n\n    var originalSendHitTask = tracker.get('sendHitTask');\n    tracker.set('sendHitTask', function (model) {\n      originalSendHitTask(model); // filter hit if `hits` flag is false or if it comes from Split-to-GA integration\n\n      if (opts.hits === false || model.get('splitHit')) return;\n\n      try {\n        if (opts.filter && !opts.filter(model)) return;\n      } catch (err) {\n        log.warn(\"GaToSplit custom filter threw: \".concat(err));\n        return;\n      } // map hit into an EventData instance\n\n\n      var eventData = defaultMapper(model);\n\n      if (opts.mapper) {\n        try {\n          eventData = opts.mapper(model, eventData);\n        } catch (err) {\n          log.warn(\"GaToSplit custom mapper threw: \".concat(err));\n          return;\n        }\n\n        if (!eventData) return;\n      } // Add prefix. Nothing is appended if the prefix is falsy, e.g. undefined or ''.\n\n\n      if (opts.prefix) eventData.eventTypeId = \"\".concat(opts.prefix, \".\").concat(eventData.eventTypeId);\n      eventData.eventTypeId = fixEventTypeId(eventData.eventTypeId);\n      if (!validateEventData(eventData)) return; // Store the event\n\n      if (eventData.key && eventData.trafficTypeName) {\n        storage.events.track(eventData);\n      } else {\n        // Store the event for each Key-TT pair (identities), if key and TT is not present in eventData\n        opts.identities.forEach(function (identity) {\n          var event = objectAssign({\n            key: identity.key,\n            trafficTypeName: identity.trafficType\n          }, eventData);\n          storage.events.track(event);\n        });\n      }\n    });\n    log.info('Started GA-to-Split integration');\n  }; // Register the plugin, even if config is invalid, since, if not provided, it will block `ga` command queue.\n\n\n  providePlugin('splitTracker', SplitTracker);\n}\n\nexport default GaToSplit;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/integrations/ga/GaToSplit.js"],"names":["_classCallCheck","objectAssign","isString","numberIsFinite","unicAsStrings","logFactory","validateEvent","validateEventValue","validateEventProperties","validateKey","validateTrafficType","logName","logNameMapper","log","providePlugin","pluginName","pluginConstructor","gaAlias","window","GoogleAnalyticsObject","_len","arguments","length","args","Array","_key","q","push","defaultMapping","eventTypeId","event","social","eventValue","timing","eventProperties","pageview","screenview","exception","mapperBuilder","mapping","model","hitType","get","value","properties","fields","i","timestamp","Date","now","defaultMapper","defaultPrefix","validateIdentities","identities","isArray","uniqueIdentities","filter","identity","maybeKey","key","maybeTT","trafficType","validateEventData","eventData","_validateEventPropert","trafficTypeName","INVALID_PREFIX_REGEX","INVALID_SUBSTRING_REGEX","fixEventTypeId","fixed","replace","truncated","slice","warn","GaToSplit","sdkOptions","storage","coreSettings","defaultOptions","prefix","undefined","SplitTracker","tracker","pluginOptions","opts","validIdentities","invalids","concat","originalSendHitTask","set","hits","err","mapper","events","track","forEach","info"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport objectAssign from 'object-assign';\nimport { isString, numberIsFinite, unicAsStrings } from '../../utils/lang';\nimport logFactory from '../../utils/logger';\nimport { validateEvent, validateEventValue, validateEventProperties, validateKey, validateTrafficType } from '../../utils/inputValidation';\nvar logName = 'splitio-ga-to-split',\n    logNameMapper = logName + ':mapper';\nvar log = logFactory(logName);\n/**\n * Provides a plugin to use with analytics.js, accounting for the possibility\n * that the global command queue has been renamed or not yet defined.\n * @param {string} pluginName The plugin name identifier.\n * @param {Function} pluginConstructor The plugin constructor function.\n */\n\nfunction providePlugin(pluginName, pluginConstructor) {\n  // get reference to global command queue. Init it if not defined yet.\n  var gaAlias = window.GoogleAnalyticsObject || 'ga';\n\n  window[gaAlias] = window[gaAlias] || function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (window[gaAlias].q = window[gaAlias].q || []).push(args);\n  }; // provides the plugin for use with analytics.js.\n\n\n  window[gaAlias]('provide', pluginName, pluginConstructor);\n} // Default mapping: object used for building the default mapper from hits to Split events\n\n\nvar defaultMapping = {\n  eventTypeId: {\n    event: 'eventAction',\n    social: 'socialAction'\n  },\n  eventValue: {\n    event: 'eventValue',\n    timing: 'timingValue'\n  },\n  eventProperties: {\n    pageview: ['page'],\n    screenview: ['screenName'],\n    event: ['eventCategory', 'eventLabel'],\n    social: ['socialNetwork', 'socialTarget'],\n    timing: ['timingCategory', 'timingVar', 'timingLabel'],\n    exception: ['exDescription', 'exFatal']\n  }\n};\n/**\n * Build a mapper function based on a mapping object\n *\n * @param {object} mapping\n */\n\nfunction mapperBuilder(mapping) {\n  return function (model) {\n    var hitType = model.get('hitType');\n    var eventTypeId = model.get(mapping.eventTypeId[hitType] || 'hitType');\n    var value = model.get(mapping.eventValue[hitType]);\n    var properties = {};\n    var fields = mapping.eventProperties[hitType];\n\n    if (fields) {\n      for (var i = 0; i < fields.length; i++) {\n        properties[fields[i]] = model.get(fields[i]);\n      }\n    }\n\n    return {\n      eventTypeId: eventTypeId,\n      value: value,\n      properties: properties,\n      timestamp: Date.now()\n    };\n  };\n} // exposed for unit testing purposses.\n\n\nexport var defaultMapper = mapperBuilder(defaultMapping);\nexport var defaultPrefix = 'ga';\n/**\n * Return a new list of identities removing invalid and duplicated ones.\n *\n * @param {Array} identities list of identities\n * @returns list of valid and unique identities. The list might be empty if `identities` is not an array or all its elements are invalid.\n */\n\nexport function validateIdentities(identities) {\n  if (!Array.isArray(identities)) return []; // Remove duplicated identities\n\n  var uniqueIdentities = unicAsStrings(identities); // Filter based on rum-agent identities validator\n\n  return uniqueIdentities.filter(function (identity) {\n    if (!identity) return false;\n    var maybeKey = identity.key;\n    var maybeTT = identity.trafficType;\n    if (!isString(maybeKey) && !numberIsFinite(maybeKey)) return false;\n    if (!isString(maybeTT)) return false;\n    return true;\n  });\n}\n/**\n * Checks if EventData fields (except EventTypeId) are valid, and logs corresponding warnings.\n * EventTypeId is validated separately.\n *\n * @param {EventData} data event data instance to validate. Precondition: data != undefined\n * @returns {boolean} Whether the data instance is a valid EventData or not.\n */\n\nexport function validateEventData(eventData) {\n  if (!validateEvent(eventData.eventTypeId, logNameMapper)) return false;\n  if (validateEventValue(eventData.value, logNameMapper) === false) return false;\n\n  var _validateEventPropert = validateEventProperties(eventData.properties, logNameMapper),\n      properties = _validateEventPropert.properties;\n\n  if (properties === false) return false;\n  if (eventData.timestamp && !numberIsFinite(eventData.timestamp)) return false;\n  if (eventData.key && validateKey(eventData.key, logNameMapper) === false) return false;\n  if (eventData.trafficTypeName && validateTrafficType(eventData.trafficTypeName, logNameMapper) === false) return false;\n  return true;\n}\nvar INVALID_PREFIX_REGEX = /^[^a-zA-Z0-9]+/;\nvar INVALID_SUBSTRING_REGEX = /[^-_.:a-zA-Z0-9]+/g;\n/**\n * Fixes the passed string value to comply with EventTypeId format, by removing invalid characters and truncating if necessary.\n *\n * @param {string} eventTypeId string value to fix.\n * @returns {string} Fixed version of `eventTypeId`.\n */\n\nexport function fixEventTypeId(eventTypeId) {\n  // return the input eventTypeId if it cannot be fixed\n  if (!isString(eventTypeId) || eventTypeId.length === 0) {\n    return eventTypeId;\n  } // replace invalid substrings and truncate\n\n\n  var fixed = eventTypeId.replace(INVALID_PREFIX_REGEX, '').replace(INVALID_SUBSTRING_REGEX, '_');\n  var truncated = fixed.slice(0, 80);\n  if (truncated.length < fixed.length) log.warn('EventTypeId was truncated because it cannot be more than 80 characters long.');\n  return truncated;\n}\n/**\n * GaToSplit integration.\n * This function provides the SplitTracker plugin to ga command queue.\n *\n * @param {object} sdkOptions options passed at the SDK integrations settings\n * @param {object} storage SDK storage passed to track events\n * @param {object} coreSettings core settings used to define an identity if no one provided as SDK or plugin options\n */\n\nfunction GaToSplit(sdkOptions, storage, coreSettings) {\n  var defaultOptions = {\n    prefix: defaultPrefix,\n    // We set default identities if key and TT are present in settings.core\n    identities: coreSettings.key && coreSettings.trafficType ? [{\n      key: coreSettings.key,\n      trafficType: coreSettings.trafficType\n    }] : undefined\n  };\n\n  var SplitTracker = // Constructor for the SplitTracker plugin.\n  function SplitTracker(tracker, pluginOptions) {\n    _classCallCheck(this, SplitTracker);\n\n    // precedence of options: SDK options (config.integrations) overwrite pluginOptions (`ga('require', 'splitTracker', pluginOptions)`)\n    var opts = objectAssign({}, defaultOptions, sdkOptions, pluginOptions);\n    this.tracker = tracker; // Validate identities\n\n    var validIdentities = validateIdentities(opts.identities);\n\n    if (validIdentities.length === 0) {\n      log.warn('No valid identities were provided. Please check that you are passing a valid list of identities or providing a traffic type at the SDK configuration.');\n      return;\n    }\n\n    var invalids = validIdentities.length - opts.identities.length;\n\n    if (invalids) {\n      log.warn(\"\".concat(invalids, \" identities were discarded because they are invalid or duplicated. Identities must be an array of objects with key and trafficType.\"));\n    }\n\n    opts.identities = validIdentities; // Validate prefix\n\n    if (!isString(opts.prefix)) {\n      log.warn('The provided `prefix` was ignored since it is invalid. Please check that you are passing a string object as `prefix`.');\n      opts.prefix = undefined;\n    } // Overwrite sendHitTask to perform plugin tasks:\n    // 1) filter hits\n    // 2) map hits to Split events\n    // 3) handle events, i.e., validate and send them to Split BE\n\n\n    var originalSendHitTask = tracker.get('sendHitTask');\n    tracker.set('sendHitTask', function (model) {\n      originalSendHitTask(model); // filter hit if `hits` flag is false or if it comes from Split-to-GA integration\n\n      if (opts.hits === false || model.get('splitHit')) return;\n\n      try {\n        if (opts.filter && !opts.filter(model)) return;\n      } catch (err) {\n        log.warn(\"GaToSplit custom filter threw: \".concat(err));\n        return;\n      } // map hit into an EventData instance\n\n\n      var eventData = defaultMapper(model);\n\n      if (opts.mapper) {\n        try {\n          eventData = opts.mapper(model, eventData);\n        } catch (err) {\n          log.warn(\"GaToSplit custom mapper threw: \".concat(err));\n          return;\n        }\n\n        if (!eventData) return;\n      } // Add prefix. Nothing is appended if the prefix is falsy, e.g. undefined or ''.\n\n\n      if (opts.prefix) eventData.eventTypeId = \"\".concat(opts.prefix, \".\").concat(eventData.eventTypeId);\n      eventData.eventTypeId = fixEventTypeId(eventData.eventTypeId);\n      if (!validateEventData(eventData)) return; // Store the event\n\n      if (eventData.key && eventData.trafficTypeName) {\n        storage.events.track(eventData);\n      } else {\n        // Store the event for each Key-TT pair (identities), if key and TT is not present in eventData\n        opts.identities.forEach(function (identity) {\n          var event = objectAssign({\n            key: identity.key,\n            trafficTypeName: identity.trafficType\n          }, eventData);\n          storage.events.track(event);\n        });\n      }\n    });\n    log.info('Started GA-to-Split integration');\n  }; // Register the plugin, even if config is invalid, since, if not provided, it will block `ga` command queue.\n\n\n  providePlugin('splitTracker', SplitTracker);\n}\n\nexport default GaToSplit;"]},"metadata":{},"sourceType":"module"}