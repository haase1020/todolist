{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport engine from '../engine';\nimport thenable from '../../utils/promise/thenable';\nimport * as LabelsConstants from '../../utils/labels'; // Build Evaluation object if and only if matchingResult is true\n\nfunction match(matchingResult, bucketingKey, seed, treatments, label, algo) {\n  if (matchingResult) {\n    var treatment = engine.getTreatment(bucketingKey, seed, treatments, algo);\n    return {\n      treatment: treatment,\n      label: label\n    };\n  } // else we should notify the engine to continue evaluating\n\n\n  return undefined;\n} // Condition factory\n\n\nfunction conditionContext(matcherEvaluator, treatments, label, conditionType) {\n  function conditionEvaluator(key, seed, trafficAllocation, trafficAllocationSeed, splitEvaluator, attributes, algo) {\n    // Whitelisting has more priority than traffic allocation, so we don't apply this filtering to those conditions.\n    if (conditionType === 'ROLLOUT' && !engine.shouldApplyRollout(trafficAllocation, key.bucketingKey, trafficAllocationSeed, algo)) {\n      return {\n        treatment: undefined,\n        label: LabelsConstants.NOT_IN_SPLIT\n      };\n    } // matcherEvaluator could be Async, this relays on matchers return value, so we need\n    // to verify for thenable before play with the result.\n    // Also, we pass splitEvaluator function in case we have a matcher that needs to evaluate another split,\n    // as well as the entire key object for the same reason.\n\n\n    var matches = matcherEvaluator(key, attributes, splitEvaluator);\n\n    if (thenable(matches)) {\n      return matches.then(function (result) {\n        return match(result, key.bucketingKey, seed, treatments, label, algo);\n      });\n    }\n\n    return match(matches, key.bucketingKey, seed, treatments, label, algo);\n  }\n\n  return conditionEvaluator;\n}\n\nexport default conditionContext;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/condition/index.js"],"names":["engine","thenable","LabelsConstants","match","matchingResult","bucketingKey","seed","treatments","label","algo","treatment","getTreatment","undefined","conditionContext","matcherEvaluator","conditionType","conditionEvaluator","key","trafficAllocation","trafficAllocationSeed","splitEvaluator","attributes","shouldApplyRollout","NOT_IN_SPLIT","matches","then","result"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAO,KAAKC,eAAZ,MAAiC,oBAAjC,C,CAAuD;;AAEvD,SAASC,KAAT,CAAeC,cAAf,EAA+BC,YAA/B,EAA6CC,IAA7C,EAAmDC,UAAnD,EAA+DC,KAA/D,EAAsEC,IAAtE,EAA4E;AAC1E,MAAIL,cAAJ,EAAoB;AAClB,QAAIM,SAAS,GAAGV,MAAM,CAACW,YAAP,CAAoBN,YAApB,EAAkCC,IAAlC,EAAwCC,UAAxC,EAAoDE,IAApD,CAAhB;AACA,WAAO;AACLC,MAAAA,SAAS,EAAEA,SADN;AAELF,MAAAA,KAAK,EAAEA;AAFF,KAAP;AAID,GAPyE,CAOxE;;;AAGF,SAAOI,SAAP;AACD,C,CAAC;;;AAGF,SAASC,gBAAT,CAA0BC,gBAA1B,EAA4CP,UAA5C,EAAwDC,KAAxD,EAA+DO,aAA/D,EAA8E;AAC5E,WAASC,kBAAT,CAA4BC,GAA5B,EAAiCX,IAAjC,EAAuCY,iBAAvC,EAA0DC,qBAA1D,EAAiFC,cAAjF,EAAiGC,UAAjG,EAA6GZ,IAA7G,EAAmH;AACjH;AACA,QAAIM,aAAa,KAAK,SAAlB,IAA+B,CAACf,MAAM,CAACsB,kBAAP,CAA0BJ,iBAA1B,EAA6CD,GAAG,CAACZ,YAAjD,EAA+Dc,qBAA/D,EAAsFV,IAAtF,CAApC,EAAiI;AAC/H,aAAO;AACLC,QAAAA,SAAS,EAAEE,SADN;AAELJ,QAAAA,KAAK,EAAEN,eAAe,CAACqB;AAFlB,OAAP;AAID,KAPgH,CAO/G;AACF;AACA;AACA;;;AAGA,QAAIC,OAAO,GAAGV,gBAAgB,CAACG,GAAD,EAAMI,UAAN,EAAkBD,cAAlB,CAA9B;;AAEA,QAAInB,QAAQ,CAACuB,OAAD,CAAZ,EAAuB;AACrB,aAAOA,OAAO,CAACC,IAAR,CAAa,UAAUC,MAAV,EAAkB;AACpC,eAAOvB,KAAK,CAACuB,MAAD,EAAST,GAAG,CAACZ,YAAb,EAA2BC,IAA3B,EAAiCC,UAAjC,EAA6CC,KAA7C,EAAoDC,IAApD,CAAZ;AACD,OAFM,CAAP;AAGD;;AAED,WAAON,KAAK,CAACqB,OAAD,EAAUP,GAAG,CAACZ,YAAd,EAA4BC,IAA5B,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAqDC,IAArD,CAAZ;AACD;;AAED,SAAOO,kBAAP;AACD;;AAED,eAAeH,gBAAf","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport engine from '../engine';\nimport thenable from '../../utils/promise/thenable';\nimport * as LabelsConstants from '../../utils/labels'; // Build Evaluation object if and only if matchingResult is true\n\nfunction match(matchingResult, bucketingKey, seed, treatments, label, algo) {\n  if (matchingResult) {\n    var treatment = engine.getTreatment(bucketingKey, seed, treatments, algo);\n    return {\n      treatment: treatment,\n      label: label\n    };\n  } // else we should notify the engine to continue evaluating\n\n\n  return undefined;\n} // Condition factory\n\n\nfunction conditionContext(matcherEvaluator, treatments, label, conditionType) {\n  function conditionEvaluator(key, seed, trafficAllocation, trafficAllocationSeed, splitEvaluator, attributes, algo) {\n    // Whitelisting has more priority than traffic allocation, so we don't apply this filtering to those conditions.\n    if (conditionType === 'ROLLOUT' && !engine.shouldApplyRollout(trafficAllocation, key.bucketingKey, trafficAllocationSeed, algo)) {\n      return {\n        treatment: undefined,\n        label: LabelsConstants.NOT_IN_SPLIT\n      };\n    } // matcherEvaluator could be Async, this relays on matchers return value, so we need\n    // to verify for thenable before play with the result.\n    // Also, we pass splitEvaluator function in case we have a matcher that needs to evaluate another split,\n    // as well as the entire key object for the same reason.\n\n\n    var matches = matcherEvaluator(key, attributes, splitEvaluator);\n\n    if (thenable(matches)) {\n      return matches.then(function (result) {\n        return match(result, key.bucketingKey, seed, treatments, label, algo);\n      });\n    }\n\n    return match(matches, key.bucketingKey, seed, treatments, label, algo);\n  }\n\n  return conditionEvaluator;\n}\n\nexport default conditionContext;"]},"metadata":{},"sourceType":"module"}