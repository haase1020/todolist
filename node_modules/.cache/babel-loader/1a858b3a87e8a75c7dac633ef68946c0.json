{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { numberIsFinite } from '../../utils/lang';\nimport usesSegments from '../../utils/splits/usesSegments';\nimport killLocally from './killLocally';\n\nvar SplitCacheInMemory = /*#__PURE__*/function () {\n  function SplitCacheInMemory() {\n    _classCallCheck(this, SplitCacheInMemory);\n\n    this.flush();\n  }\n\n  _createClass(SplitCacheInMemory, [{\n    key: \"addSplit\",\n    value: function addSplit(splitName, split) {\n      var splitFromMemory = this.getSplit(splitName);\n\n      if (splitFromMemory) {\n        // We had this Split already\n        var previousSplit = JSON.parse(splitFromMemory);\n\n        if (previousSplit.trafficTypeName) {\n          var previousTtName = previousSplit.trafficTypeName;\n          this.ttCache[previousTtName]--;\n          if (!this.ttCache[previousTtName]) delete this.ttCache[previousTtName];\n        }\n\n        if (usesSegments(previousSplit.conditions)) {\n          // Substract from segments count for the previous version of this Split.\n          this.splitsWithSegmentsCount--;\n        }\n      }\n\n      var parsedSplit = JSON.parse(split);\n\n      if (parsedSplit) {\n        // Store the Split.\n        this.splitCache[splitName] = split; // Update TT cache\n\n        var ttName = parsedSplit.trafficTypeName;\n\n        if (ttName) {\n          // safeguard\n          if (!this.ttCache[ttName]) this.ttCache[ttName] = 0;\n          this.ttCache[ttName]++;\n        } // Add to segments count for the new version of the Split\n\n\n        if (usesSegments(parsedSplit.conditions)) this.splitsWithSegmentsCount++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"addSplits\",\n    value: function addSplits(entries) {\n      var _this = this;\n\n      var results = [];\n      entries.forEach(function (keyValuePair) {\n        results.push(_this.addSplit(keyValuePair[0], keyValuePair[1]));\n      });\n      return results;\n    }\n  }, {\n    key: \"removeSplit\",\n    value: function removeSplit(splitName) {\n      var split = this.getSplit(splitName);\n\n      if (split) {\n        // Delete the Split\n        delete this.splitCache[splitName];\n        var parsedSplit = JSON.parse(split);\n        var ttName = parsedSplit.trafficTypeName;\n\n        if (ttName) {\n          // safeguard\n          this.ttCache[ttName]--; // Update tt cache\n\n          if (!this.ttCache[ttName]) delete this.ttCache[ttName];\n        } // Update the segments count.\n\n\n        if (usesSegments(parsedSplit.conditions)) this.splitsWithSegmentsCount--;\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"removeSplits\",\n    value: function removeSplits(splitNames) {\n      var _this2 = this;\n\n      splitNames.forEach(function (n) {\n        return _this2.removeSplit(n);\n      });\n      return splitNames.length;\n    }\n  }, {\n    key: \"getSplit\",\n    value: function getSplit(splitName) {\n      return this.splitCache[splitName];\n    }\n  }, {\n    key: \"setChangeNumber\",\n    value: function setChangeNumber(changeNumber) {\n      this.changeNumber = changeNumber;\n      return true;\n    }\n  }, {\n    key: \"getChangeNumber\",\n    value: function getChangeNumber() {\n      return this.changeNumber;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var _this3 = this;\n\n      return this.getKeys().map(function (key) {\n        return _this3.splitCache[key];\n      });\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return Object.keys(this.splitCache);\n    }\n  }, {\n    key: \"trafficTypeExists\",\n    value: function trafficTypeExists(trafficType) {\n      return numberIsFinite(this.ttCache[trafficType]) && this.ttCache[trafficType] > 0;\n    }\n  }, {\n    key: \"usesSegments\",\n    value: function usesSegments() {\n      return this.getChangeNumber() === -1 || this.splitsWithSegmentsCount > 0;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      this.splitCache = {};\n      this.ttCache = {};\n      this.changeNumber = -1;\n      this.splitsWithSegmentsCount = 0;\n    }\n    /**\n     * Fetches multiple splits definitions.\n     */\n\n  }, {\n    key: \"fetchMany\",\n    value: function fetchMany(splitNames) {\n      var _this4 = this;\n\n      var splits = {};\n      splitNames.forEach(function (splitName) {\n        splits[splitName] = _this4.splitCache[splitName] || null;\n      });\n      return splits;\n    }\n    /**\n     * Check if the splits information is already stored in cache. In memory there is no cache to check.\n     */\n\n  }, {\n    key: \"checkCache\",\n    value: function checkCache() {\n      return false;\n    }\n  }]);\n\n  return SplitCacheInMemory;\n}();\n\nSplitCacheInMemory.prototype.killLocally = killLocally;\nexport default SplitCacheInMemory;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/storage/SplitCache/InMemory.js"],"names":["_classCallCheck","_createClass","numberIsFinite","usesSegments","killLocally","SplitCacheInMemory","flush","key","value","addSplit","splitName","split","splitFromMemory","getSplit","previousSplit","JSON","parse","trafficTypeName","previousTtName","ttCache","conditions","splitsWithSegmentsCount","parsedSplit","splitCache","ttName","addSplits","entries","_this","results","forEach","keyValuePair","push","removeSplit","removeSplits","splitNames","_this2","n","length","setChangeNumber","changeNumber","getChangeNumber","getAll","_this3","getKeys","map","Object","keys","trafficTypeExists","trafficType","fetchMany","_this4","splits","checkCache","prototype"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { numberIsFinite } from '../../utils/lang';\nimport usesSegments from '../../utils/splits/usesSegments';\nimport killLocally from './killLocally';\n\nvar SplitCacheInMemory = /*#__PURE__*/function () {\n  function SplitCacheInMemory() {\n    _classCallCheck(this, SplitCacheInMemory);\n\n    this.flush();\n  }\n\n  _createClass(SplitCacheInMemory, [{\n    key: \"addSplit\",\n    value: function addSplit(splitName, split) {\n      var splitFromMemory = this.getSplit(splitName);\n\n      if (splitFromMemory) {\n        // We had this Split already\n        var previousSplit = JSON.parse(splitFromMemory);\n\n        if (previousSplit.trafficTypeName) {\n          var previousTtName = previousSplit.trafficTypeName;\n          this.ttCache[previousTtName]--;\n          if (!this.ttCache[previousTtName]) delete this.ttCache[previousTtName];\n        }\n\n        if (usesSegments(previousSplit.conditions)) {\n          // Substract from segments count for the previous version of this Split.\n          this.splitsWithSegmentsCount--;\n        }\n      }\n\n      var parsedSplit = JSON.parse(split);\n\n      if (parsedSplit) {\n        // Store the Split.\n        this.splitCache[splitName] = split; // Update TT cache\n\n        var ttName = parsedSplit.trafficTypeName;\n\n        if (ttName) {\n          // safeguard\n          if (!this.ttCache[ttName]) this.ttCache[ttName] = 0;\n          this.ttCache[ttName]++;\n        } // Add to segments count for the new version of the Split\n\n\n        if (usesSegments(parsedSplit.conditions)) this.splitsWithSegmentsCount++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"addSplits\",\n    value: function addSplits(entries) {\n      var _this = this;\n\n      var results = [];\n      entries.forEach(function (keyValuePair) {\n        results.push(_this.addSplit(keyValuePair[0], keyValuePair[1]));\n      });\n      return results;\n    }\n  }, {\n    key: \"removeSplit\",\n    value: function removeSplit(splitName) {\n      var split = this.getSplit(splitName);\n\n      if (split) {\n        // Delete the Split\n        delete this.splitCache[splitName];\n        var parsedSplit = JSON.parse(split);\n        var ttName = parsedSplit.trafficTypeName;\n\n        if (ttName) {\n          // safeguard\n          this.ttCache[ttName]--; // Update tt cache\n\n          if (!this.ttCache[ttName]) delete this.ttCache[ttName];\n        } // Update the segments count.\n\n\n        if (usesSegments(parsedSplit.conditions)) this.splitsWithSegmentsCount--;\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"removeSplits\",\n    value: function removeSplits(splitNames) {\n      var _this2 = this;\n\n      splitNames.forEach(function (n) {\n        return _this2.removeSplit(n);\n      });\n      return splitNames.length;\n    }\n  }, {\n    key: \"getSplit\",\n    value: function getSplit(splitName) {\n      return this.splitCache[splitName];\n    }\n  }, {\n    key: \"setChangeNumber\",\n    value: function setChangeNumber(changeNumber) {\n      this.changeNumber = changeNumber;\n      return true;\n    }\n  }, {\n    key: \"getChangeNumber\",\n    value: function getChangeNumber() {\n      return this.changeNumber;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var _this3 = this;\n\n      return this.getKeys().map(function (key) {\n        return _this3.splitCache[key];\n      });\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return Object.keys(this.splitCache);\n    }\n  }, {\n    key: \"trafficTypeExists\",\n    value: function trafficTypeExists(trafficType) {\n      return numberIsFinite(this.ttCache[trafficType]) && this.ttCache[trafficType] > 0;\n    }\n  }, {\n    key: \"usesSegments\",\n    value: function usesSegments() {\n      return this.getChangeNumber() === -1 || this.splitsWithSegmentsCount > 0;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      this.splitCache = {};\n      this.ttCache = {};\n      this.changeNumber = -1;\n      this.splitsWithSegmentsCount = 0;\n    }\n    /**\n     * Fetches multiple splits definitions.\n     */\n\n  }, {\n    key: \"fetchMany\",\n    value: function fetchMany(splitNames) {\n      var _this4 = this;\n\n      var splits = {};\n      splitNames.forEach(function (splitName) {\n        splits[splitName] = _this4.splitCache[splitName] || null;\n      });\n      return splits;\n    }\n    /**\n     * Check if the splits information is already stored in cache. In memory there is no cache to check.\n     */\n\n  }, {\n    key: \"checkCache\",\n    value: function checkCache() {\n      return false;\n    }\n  }]);\n\n  return SplitCacheInMemory;\n}();\n\nSplitCacheInMemory.prototype.killLocally = killLocally;\nexport default SplitCacheInMemory;"]},"metadata":{},"sourceType":"module"}