{"ast":null,"code":"/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport { types } from './types';\nimport allMatcher from './all';\nimport segmentMatcher from './segment';\nimport whitelistMatcher from './whitelist';\nimport eqMatcher from './eq';\nimport gteMatcher from './gte';\nimport lteMatcher from './lte';\nimport betweenMatcher from './between';\nimport equalToSetMatcher from './eq_set';\nimport containsAllSetMatcher from './cont_all';\nimport containsAnySetMatcher from './cont_any';\nimport partOfSetMatcher from './part_of';\nimport swMatcher from './sw';\nimport ewMatcher from './ew';\nimport containsStrMatcher from './cont_str';\nimport dependencyMatcher from './dependency';\nimport booleanMatcher from './boolean';\nimport stringMatcher from './string';\n/**\n * Matcher factory.\n */\n\nfunction MatcherFactory(matcherDto, storage) {\n  var type = matcherDto.type,\n      value = matcherDto.value;\n  var matcherFn;\n\n  if (type === types.ALL) {\n    matcherFn = allMatcher(value);\n  } else if (type === types.SEGMENT) {\n    matcherFn = segmentMatcher(value, storage);\n  } else if (type === types.WHITELIST) {\n    matcherFn = whitelistMatcher(value);\n  } else if (type === types.EQUAL_TO) {\n    matcherFn = eqMatcher(value);\n  } else if (type === types.GREATER_THAN_OR_EQUAL_TO) {\n    matcherFn = gteMatcher(value);\n  } else if (type === types.LESS_THAN_OR_EQUAL_TO) {\n    matcherFn = lteMatcher(value);\n  } else if (type === types.BETWEEN) {\n    matcherFn = betweenMatcher(value);\n  } else if (type === types.EQUAL_TO_SET) {\n    matcherFn = equalToSetMatcher(value);\n  } else if (type === types.CONTAINS_ANY_OF_SET) {\n    matcherFn = containsAnySetMatcher(value);\n  } else if (type === types.CONTAINS_ALL_OF_SET) {\n    matcherFn = containsAllSetMatcher(value);\n  } else if (type === types.PART_OF_SET) {\n    matcherFn = partOfSetMatcher(value);\n  } else if (type === types.STARTS_WITH) {\n    matcherFn = swMatcher(value);\n  } else if (type === types.ENDS_WITH) {\n    matcherFn = ewMatcher(value);\n  } else if (type === types.CONTAINS_STRING) {\n    matcherFn = containsStrMatcher(value);\n  } else if (type === types.IN_SPLIT_TREATMENT) {\n    matcherFn = dependencyMatcher(value, storage);\n  } else if (type === types.EQUAL_TO_BOOLEAN) {\n    matcherFn = booleanMatcher(value);\n  } else if (type === types.MATCHES_STRING) {\n    matcherFn = stringMatcher(value);\n  }\n\n  return matcherFn;\n}\n\nexport default MatcherFactory;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/matchers/index.js"],"names":["types","allMatcher","segmentMatcher","whitelistMatcher","eqMatcher","gteMatcher","lteMatcher","betweenMatcher","equalToSetMatcher","containsAllSetMatcher","containsAnySetMatcher","partOfSetMatcher","swMatcher","ewMatcher","containsStrMatcher","dependencyMatcher","booleanMatcher","stringMatcher","MatcherFactory","matcherDto","storage","type","value","matcherFn","ALL","SEGMENT","WHITELIST","EQUAL_TO","GREATER_THAN_OR_EQUAL_TO","LESS_THAN_OR_EQUAL_TO","BETWEEN","EQUAL_TO_SET","CONTAINS_ANY_OF_SET","CONTAINS_ALL_OF_SET","PART_OF_SET","STARTS_WITH","ENDS_WITH","CONTAINS_STRING","IN_SPLIT_TREATMENT","EQUAL_TO_BOOLEAN","MATCHES_STRING"],"mappings":"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","sourcesContent":["/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport { types } from './types';\nimport allMatcher from './all';\nimport segmentMatcher from './segment';\nimport whitelistMatcher from './whitelist';\nimport eqMatcher from './eq';\nimport gteMatcher from './gte';\nimport lteMatcher from './lte';\nimport betweenMatcher from './between';\nimport equalToSetMatcher from './eq_set';\nimport containsAllSetMatcher from './cont_all';\nimport containsAnySetMatcher from './cont_any';\nimport partOfSetMatcher from './part_of';\nimport swMatcher from './sw';\nimport ewMatcher from './ew';\nimport containsStrMatcher from './cont_str';\nimport dependencyMatcher from './dependency';\nimport booleanMatcher from './boolean';\nimport stringMatcher from './string';\n/**\n * Matcher factory.\n */\n\nfunction MatcherFactory(matcherDto, storage) {\n  var type = matcherDto.type,\n      value = matcherDto.value;\n  var matcherFn;\n\n  if (type === types.ALL) {\n    matcherFn = allMatcher(value);\n  } else if (type === types.SEGMENT) {\n    matcherFn = segmentMatcher(value, storage);\n  } else if (type === types.WHITELIST) {\n    matcherFn = whitelistMatcher(value);\n  } else if (type === types.EQUAL_TO) {\n    matcherFn = eqMatcher(value);\n  } else if (type === types.GREATER_THAN_OR_EQUAL_TO) {\n    matcherFn = gteMatcher(value);\n  } else if (type === types.LESS_THAN_OR_EQUAL_TO) {\n    matcherFn = lteMatcher(value);\n  } else if (type === types.BETWEEN) {\n    matcherFn = betweenMatcher(value);\n  } else if (type === types.EQUAL_TO_SET) {\n    matcherFn = equalToSetMatcher(value);\n  } else if (type === types.CONTAINS_ANY_OF_SET) {\n    matcherFn = containsAnySetMatcher(value);\n  } else if (type === types.CONTAINS_ALL_OF_SET) {\n    matcherFn = containsAllSetMatcher(value);\n  } else if (type === types.PART_OF_SET) {\n    matcherFn = partOfSetMatcher(value);\n  } else if (type === types.STARTS_WITH) {\n    matcherFn = swMatcher(value);\n  } else if (type === types.ENDS_WITH) {\n    matcherFn = ewMatcher(value);\n  } else if (type === types.CONTAINS_STRING) {\n    matcherFn = containsStrMatcher(value);\n  } else if (type === types.IN_SPLIT_TREATMENT) {\n    matcherFn = dependencyMatcher(value, storage);\n  } else if (type === types.EQUAL_TO_BOOLEAN) {\n    matcherFn = booleanMatcher(value);\n  } else if (type === types.MATCHES_STRING) {\n    matcherFn = stringMatcher(value);\n  }\n\n  return matcherFn;\n}\n\nexport default MatcherFactory;"]},"metadata":{},"sourceType":"module"}