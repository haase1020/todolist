{"ast":null,"code":"import utfx from 'utfx';\nvar stringSource = utfx.stringSource;\nvar stringDestination = utfx.stringDestination;\nvar encodeUTF16toUTF8 = utfx.encodeUTF16toUTF8;\nexport function UTF16ToUTF8(key) {\n  var sd;\n  encodeUTF16toUTF8(stringSource(key), sd = stringDestination());\n  return sd();\n}\n/*!\n * +----------------------------------------------------------------------------------+\n * | murmurHash3.js v3.0.0 (http://github.com/karanlyons/murmurHash3.js)              |\n * | A TypeScript/JavaScript implementation of MurmurHash3's hashing algorithms.      |\n * |----------------------------------------------------------------------------------|\n * | Copyright (c) 2012-2020 Karan Lyons. Freely distributable under the MIT license. |\n * +----------------------------------------------------------------------------------+\n */\n\nexport function x86Multiply(m, n) {\n  //\n  // Given two 32bit ints, returns the two multiplied together as a\n  // 32bit int.\n  //\n  return (m & 0xffff) * n + (((m >>> 16) * n & 0xffff) << 16);\n}\nexport function x86Rotl(m, n) {\n  //\n  // Given a 32bit int and an int representing a number of bit positions,\n  // returns the 32bit int rotated left by that number of positions.\n  //\n  return m << n | m >>> 32 - n;\n}\nexport function x86Fmix(h) {\n  //\n  // Given a block, returns murmurHash3's final x86 mix of that block.\n  //\n  h ^= h >>> 16;\n  h = x86Multiply(h, 0x85ebca6b);\n  h ^= h >>> 13;\n  h = x86Multiply(h, 0xc2b2ae35);\n  h ^= h >>> 16;\n  return h;\n}","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/engine/engine/murmur3/index.js"],"names":["utfx","stringSource","stringDestination","encodeUTF16toUTF8","UTF16ToUTF8","key","sd","x86Multiply","m","n","x86Rotl","x86Fmix","h"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,IAAIC,YAAY,GAAGD,IAAI,CAACC,YAAxB;AACA,IAAIC,iBAAiB,GAAGF,IAAI,CAACE,iBAA7B;AACA,IAAIC,iBAAiB,GAAGH,IAAI,CAACG,iBAA7B;AACA,OAAO,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AAC/B,MAAIC,EAAJ;AACAH,EAAAA,iBAAiB,CAACF,YAAY,CAACI,GAAD,CAAb,EAAoBC,EAAE,GAAGJ,iBAAiB,EAA1C,CAAjB;AACA,SAAOI,EAAE,EAAT;AACD;AACD;;;;;;;;;AASA,OAAO,SAASC,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AAChC;AACA;AACA;AACA;AACA,SAAO,CAACD,CAAC,GAAG,MAAL,IAAeC,CAAf,IAAoB,CAAC,CAACD,CAAC,KAAK,EAAP,IAAaC,CAAb,GAAiB,MAAlB,KAA6B,EAAjD,CAAP;AACD;AACD,OAAO,SAASC,OAAT,CAAiBF,CAAjB,EAAoBC,CAApB,EAAuB;AAC5B;AACA;AACA;AACA;AACA,SAAOD,CAAC,IAAIC,CAAL,GAASD,CAAC,KAAK,KAAKC,CAA3B;AACD;AACD,OAAO,SAASE,OAAT,CAAiBC,CAAjB,EAAoB;AACzB;AACA;AACA;AACAA,EAAAA,CAAC,IAAIA,CAAC,KAAK,EAAX;AACAA,EAAAA,CAAC,GAAGL,WAAW,CAACK,CAAD,EAAI,UAAJ,CAAf;AACAA,EAAAA,CAAC,IAAIA,CAAC,KAAK,EAAX;AACAA,EAAAA,CAAC,GAAGL,WAAW,CAACK,CAAD,EAAI,UAAJ,CAAf;AACAA,EAAAA,CAAC,IAAIA,CAAC,KAAK,EAAX;AACA,SAAOA,CAAP;AACD","sourcesContent":["import utfx from 'utfx';\nvar stringSource = utfx.stringSource;\nvar stringDestination = utfx.stringDestination;\nvar encodeUTF16toUTF8 = utfx.encodeUTF16toUTF8;\nexport function UTF16ToUTF8(key) {\n  var sd;\n  encodeUTF16toUTF8(stringSource(key), sd = stringDestination());\n  return sd();\n}\n/*!\n * +----------------------------------------------------------------------------------+\n * | murmurHash3.js v3.0.0 (http://github.com/karanlyons/murmurHash3.js)              |\n * | A TypeScript/JavaScript implementation of MurmurHash3's hashing algorithms.      |\n * |----------------------------------------------------------------------------------|\n * | Copyright (c) 2012-2020 Karan Lyons. Freely distributable under the MIT license. |\n * +----------------------------------------------------------------------------------+\n */\n\nexport function x86Multiply(m, n) {\n  //\n  // Given two 32bit ints, returns the two multiplied together as a\n  // 32bit int.\n  //\n  return (m & 0xffff) * n + (((m >>> 16) * n & 0xffff) << 16);\n}\nexport function x86Rotl(m, n) {\n  //\n  // Given a 32bit int and an int representing a number of bit positions,\n  // returns the 32bit int rotated left by that number of positions.\n  //\n  return m << n | m >>> 32 - n;\n}\nexport function x86Fmix(h) {\n  //\n  // Given a block, returns murmurHash3's final x86 mix of that block.\n  //\n  h ^= h >>> 16;\n  h = x86Multiply(h, 0x85ebca6b);\n  h ^= h >>> 13;\n  h = x86Multiply(h, 0xc2b2ae35);\n  h ^= h >>> 16;\n  return h;\n}"]},"metadata":{},"sourceType":"module"}