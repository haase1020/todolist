{"ast":null,"code":"import { get } from '../utils/lang';\nimport ClientWithInputValidationLayer from './inputValidation';\nimport { LOCALHOST_MODE } from '../utils/constants';\nimport { validateKey, validateTrafficType } from '../utils/inputValidation';\n\nfunction BrowserClientFactory(context) {\n  var _client$track;\n\n  var settings = context.get(context.constants.SETTINGS);\n  var maybeKey = get(settings, 'core.key', undefined);\n  var maybeTT = get(settings, 'core.trafficType', undefined);\n\n  if (settings.mode === LOCALHOST_MODE && maybeKey === undefined) {\n    settings.core.key = 'localhost_key';\n  } else {\n    settings.core.key = validateKey(maybeKey, 'Client instantiation');\n  } // Key is also binded to the .track method. Same thing happens with trafficType but only if present on configs. (not required)\n\n\n  var trackBindings = [settings.core.key];\n\n  if (maybeTT !== undefined) {\n    var tt = validateTrafficType(maybeTT, 'Client instantiation');\n    settings.core.trafficType = tt;\n    trackBindings.push(tt);\n  }\n\n  var client = ClientWithInputValidationLayer(context, true, trackBindings.length > 1);\n  client.isBrowserClient = true; // In the browser land, we can bind the key and the traffic type (if provided)\n\n  client.getTreatment = client.getTreatment.bind(client, settings.core.key);\n  client.getTreatmentWithConfig = client.getTreatmentWithConfig.bind(client, settings.core.key);\n  client.getTreatments = client.getTreatments.bind(client, settings.core.key);\n  client.getTreatmentsWithConfig = client.getTreatmentsWithConfig.bind(client, settings.core.key);\n  client.track = (_client$track = client.track).bind.apply(_client$track, [client].concat(trackBindings));\n  return client;\n}\n\nexport default BrowserClientFactory;","map":{"version":3,"sources":["/home/mandi/mandi/todolist/node_modules/@splitsoftware/splitio-react/es/splitio/client/browser.js"],"names":["get","ClientWithInputValidationLayer","LOCALHOST_MODE","validateKey","validateTrafficType","BrowserClientFactory","context","_client$track","settings","constants","SETTINGS","maybeKey","undefined","maybeTT","mode","core","key","trackBindings","tt","trafficType","push","client","length","isBrowserClient","getTreatment","bind","getTreatmentWithConfig","getTreatments","getTreatmentsWithConfig","track","apply","concat"],"mappings":"AAAA,SAASA,GAAT,QAAoB,eAApB;AACA,OAAOC,8BAAP,MAA2C,mBAA3C;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,WAAT,EAAsBC,mBAAtB,QAAiD,0BAAjD;;AAEA,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AACrC,MAAIC,aAAJ;;AAEA,MAAIC,QAAQ,GAAGF,OAAO,CAACN,GAAR,CAAYM,OAAO,CAACG,SAAR,CAAkBC,QAA9B,CAAf;AACA,MAAIC,QAAQ,GAAGX,GAAG,CAACQ,QAAD,EAAW,UAAX,EAAuBI,SAAvB,CAAlB;AACA,MAAIC,OAAO,GAAGb,GAAG,CAACQ,QAAD,EAAW,kBAAX,EAA+BI,SAA/B,CAAjB;;AAEA,MAAIJ,QAAQ,CAACM,IAAT,KAAkBZ,cAAlB,IAAoCS,QAAQ,KAAKC,SAArD,EAAgE;AAC9DJ,IAAAA,QAAQ,CAACO,IAAT,CAAcC,GAAd,GAAoB,eAApB;AACD,GAFD,MAEO;AACLR,IAAAA,QAAQ,CAACO,IAAT,CAAcC,GAAd,GAAoBb,WAAW,CAACQ,QAAD,EAAW,sBAAX,CAA/B;AACD,GAXoC,CAWnC;;;AAGF,MAAIM,aAAa,GAAG,CAACT,QAAQ,CAACO,IAAT,CAAcC,GAAf,CAApB;;AAEA,MAAIH,OAAO,KAAKD,SAAhB,EAA2B;AACzB,QAAIM,EAAE,GAAGd,mBAAmB,CAACS,OAAD,EAAU,sBAAV,CAA5B;AACAL,IAAAA,QAAQ,CAACO,IAAT,CAAcI,WAAd,GAA4BD,EAA5B;AACAD,IAAAA,aAAa,CAACG,IAAd,CAAmBF,EAAnB;AACD;;AAED,MAAIG,MAAM,GAAGpB,8BAA8B,CAACK,OAAD,EAAU,IAAV,EAAgBW,aAAa,CAACK,MAAd,GAAuB,CAAvC,CAA3C;AACAD,EAAAA,MAAM,CAACE,eAAP,GAAyB,IAAzB,CAvBqC,CAuBN;;AAE/BF,EAAAA,MAAM,CAACG,YAAP,GAAsBH,MAAM,CAACG,YAAP,CAAoBC,IAApB,CAAyBJ,MAAzB,EAAiCb,QAAQ,CAACO,IAAT,CAAcC,GAA/C,CAAtB;AACAK,EAAAA,MAAM,CAACK,sBAAP,GAAgCL,MAAM,CAACK,sBAAP,CAA8BD,IAA9B,CAAmCJ,MAAnC,EAA2Cb,QAAQ,CAACO,IAAT,CAAcC,GAAzD,CAAhC;AACAK,EAAAA,MAAM,CAACM,aAAP,GAAuBN,MAAM,CAACM,aAAP,CAAqBF,IAArB,CAA0BJ,MAA1B,EAAkCb,QAAQ,CAACO,IAAT,CAAcC,GAAhD,CAAvB;AACAK,EAAAA,MAAM,CAACO,uBAAP,GAAiCP,MAAM,CAACO,uBAAP,CAA+BH,IAA/B,CAAoCJ,MAApC,EAA4Cb,QAAQ,CAACO,IAAT,CAAcC,GAA1D,CAAjC;AACAK,EAAAA,MAAM,CAACQ,KAAP,GAAe,CAACtB,aAAa,GAAGc,MAAM,CAACQ,KAAxB,EAA+BJ,IAA/B,CAAoCK,KAApC,CAA0CvB,aAA1C,EAAyD,CAACc,MAAD,EAASU,MAAT,CAAgBd,aAAhB,CAAzD,CAAf;AACA,SAAOI,MAAP;AACD;;AAED,eAAehB,oBAAf","sourcesContent":["import { get } from '../utils/lang';\nimport ClientWithInputValidationLayer from './inputValidation';\nimport { LOCALHOST_MODE } from '../utils/constants';\nimport { validateKey, validateTrafficType } from '../utils/inputValidation';\n\nfunction BrowserClientFactory(context) {\n  var _client$track;\n\n  var settings = context.get(context.constants.SETTINGS);\n  var maybeKey = get(settings, 'core.key', undefined);\n  var maybeTT = get(settings, 'core.trafficType', undefined);\n\n  if (settings.mode === LOCALHOST_MODE && maybeKey === undefined) {\n    settings.core.key = 'localhost_key';\n  } else {\n    settings.core.key = validateKey(maybeKey, 'Client instantiation');\n  } // Key is also binded to the .track method. Same thing happens with trafficType but only if present on configs. (not required)\n\n\n  var trackBindings = [settings.core.key];\n\n  if (maybeTT !== undefined) {\n    var tt = validateTrafficType(maybeTT, 'Client instantiation');\n    settings.core.trafficType = tt;\n    trackBindings.push(tt);\n  }\n\n  var client = ClientWithInputValidationLayer(context, true, trackBindings.length > 1);\n  client.isBrowserClient = true; // In the browser land, we can bind the key and the traffic type (if provided)\n\n  client.getTreatment = client.getTreatment.bind(client, settings.core.key);\n  client.getTreatmentWithConfig = client.getTreatmentWithConfig.bind(client, settings.core.key);\n  client.getTreatments = client.getTreatments.bind(client, settings.core.key);\n  client.getTreatmentsWithConfig = client.getTreatmentsWithConfig.bind(client, settings.core.key);\n  client.track = (_client$track = client.track).bind.apply(_client$track, [client].concat(trackBindings));\n  return client;\n}\n\nexport default BrowserClientFactory;"]},"metadata":{},"sourceType":"module"}